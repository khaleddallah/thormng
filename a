diff --git a/ROBOTIS-THORMANG-MPC/thormang3_walking_module/src/walking_module.cpp b/ROBOTIS-THORMANG-MPC/thormang3_walking_module/src/walking_module.cpp
index e7f3a54..10c10e6 100644
--- a/ROBOTIS-THORMANG-MPC/thormang3_walking_module/src/walking_module.cpp
+++ b/ROBOTIS-THORMANG-MPC/thormang3_walking_module/src/walking_module.cpp
@@ -186,8 +186,8 @@ void OnlineWalkingModule::initialize(const int control_cycle_msec, robotis_frame
   // online_walking->setInitialPose(0.196, -0.290, -0.450, 0.51, 0.501, 0.49,
   //                                0.021,  -0.276 , -0.453, 0.494, 0.490, 0.495,
   //                                0,      0,     0, 0, 0, 0);
-  online_walking->setInitialPose(0,  -0.08, -0.47, 0, 0, 0,
-                                 0,   0.08, -0.47, 0, 0, 0,
+  online_walking->setInitialPose(0,  -0.08, -0.48, 0, 0, 0,
+                                 0,   0.08, -0.48, 0, 0, 0,
                                  0,      0,     0, 0, 0, 0);
 
 
diff --git a/ROBOTIS-THORMANG-OPC-for-git/LICENSE b/ROBOTIS-THORMANG-OPC-for-git/LICENSE
deleted file mode 100644
index 1d93559..0000000
--- a/ROBOTIS-THORMANG-OPC-for-git/LICENSE
+++ /dev/null
@@ -1,26 +0,0 @@
-Software License Agreement (BSD License)
- 
-Copyright (c) 2014, ROBOTIS Inc.
-All rights reserved.
- 
-Redistribution and use in source and binary forms, with or without
-modification, are permitted provided that the following conditions are met:
-    * Redistributions of source code must retain the above copyright
-      notice, this list of conditions and the following disclaimer.
-    * Redistributions in binary form must reproduce the above copyright
-      notice, this list of conditions and the following disclaimer in the
-      documentation and/or other materials provided with the distribution.
-    * Neither the name of ROBOTIS nor the names of its contributors may be
-      used to endorse or promote products derived from this software
-      without specific prior written permission.
- 
-THIS SOFTWARE IS PROVIDED BY ROBOTIS "AS IS" AND ANY EXPRESS OR IMPLIED
-WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
-MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
-IN NO EVENT SHALL ROBOTIS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
-PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
-OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
-WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
-OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
-ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
diff --git a/ROBOTIS-THORMANG-OPC-for-git/README.md b/ROBOTIS-THORMANG-OPC-for-git/README.md
deleted file mode 100644
index dd734c6..0000000
--- a/ROBOTIS-THORMANG-OPC-for-git/README.md
+++ /dev/null
@@ -1,31 +0,0 @@
-# ROBOTIS-THORMANG
-THORMANG Series Repository
-
-![](https://github.com/ROBOTIS-GIT/emanual/blob/master/assets/images/platform/thormang3/thormang3.png)
-
-## What is THORMANG3?
-
-THOR (Tactical Hazardous Operations Robot) is an affordable, full size humanoid robot platform with advanced
-computational power, sophisticated sensors, high payload capacity, and dynamic motion abilities to enable many exciting researches and educational activities.
-
-### Hardware
-
-|Feature|Description|
-|:---:|:---:|
-|DOF|29|
-|Actuator|200W x 10 / 100W x 11 / 20W x 8|
-|Computer|Intel® NUC with Intel® Core™ i5 Processor<br />(DDR4 RAM 8GB / M.2 SSD 128GB) x2|
-|Wireless router|Dlink DIR-806A x 1|
-|Sensor|Logitech C920 HD Camera x 1<br />Intel Realsense(Option) x 1<br />Hokuyo UTM-30LX-EW(Option) x 1<br />F/T: ATi Mini58-SI-2800-120 x 2<br />IMU: MicroSrain 3DM-GX4-25 x 1|
-|Battery|22V, 22000mA x 1<br />18.5V, 11000mA x 1|
-|Height|137.5cm|
-|Weight|42Kg|
- 
-### Software
-
-The followings are source code development environments.
-- OS : Linux (Ubuntu LTS 64-bit) with ROS (Robot Operating System)
-- Compiler : GNU project C and C++ Compiler
-- Programming Language : C++
-
-## [E-Manual](emanual.robotis.com/docs/en/platform/thormang3/getting_started/)
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_action_script_player/CHANGELOG.rst b/ROBOTIS-THORMANG-OPC-for-git/thormang3_action_script_player/CHANGELOG.rst
deleted file mode 100644
index 5d63065..0000000
--- a/ROBOTIS-THORMANG-OPC-for-git/thormang3_action_script_player/CHANGELOG.rst
+++ /dev/null
@@ -1,24 +0,0 @@
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-Changelog for package thormang3_action_script_player
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-0.2.0 (2016-08-19)
------------
-* added thormang3_offset_tuner_client package
-
-0.1.0 (2016-08-18)
------------
-* first public release for Kinetic
-* modified arg of ros init
-* added a fuction - action play for only specified joints
-  modified action_script_player.cpp
-  modified action_script.yaml
-  modified message_callback.cpp for coding style
-* modified thormang3_foot_step_generator for realtime control
-  modified src in robotis_foot_step_generator.cpp and robotis_foot_step_generator.h
-  modified msg file
-  applied coding style
-* enable stop button : thormang3_demo, walking
-* ROS C++ coding style is applied.
-* Change name of thormang3_motion_script_player to thormang3_action_script_player.
-* Contributors: Jay Song, Kayman, Pyo
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_action_script_player/CMakeLists.txt b/ROBOTIS-THORMANG-OPC-for-git/thormang3_action_script_player/CMakeLists.txt
deleted file mode 100644
index 9925836..0000000
--- a/ROBOTIS-THORMANG-OPC-for-git/thormang3_action_script_player/CMakeLists.txt
+++ /dev/null
@@ -1,64 +0,0 @@
-################################################################################
-# CMake
-################################################################################
-cmake_minimum_required(VERSION 2.8.3)
-project(thormang3_action_script_player)
-
-################################################################################
-# Packages
-################################################################################
-find_package(catkin REQUIRED COMPONENTS
-  roscpp
-  roslib
-  std_msgs
-  robotis_controller_msgs
-  thormang3_action_module_msgs
-)
-
-################################################################################
-# Declare ROS messages, services and actions
-################################################################################
-
-################################################################################
-# Declare ROS dynamic reconfigure parameters
-################################################################################
-
-################################################################################
-# Catkin specific configuration
-################################################################################
-catkin_package()
-
-################################################################################
-# Build
-################################################################################
-include_directories(
-  ${catkin_INCLUDE_DIRS}
-)
-
-add_executable(thormang3_action_script_player
-   src/action_script_player.cpp
-)
-
-add_dependencies(thormang3_action_script_player ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})
-
-target_link_libraries(thormang3_action_script_player
-   yaml-cpp
-   ${catkin_LIBRARIES}
-)
-
-################################################################################
-# Install
-################################################################################
-install(TARGETS thormang3_action_script_player
-  ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
-  LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
-  RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
-)
-
-install(DIRECTORY script/
-        DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
-)
-
-################################################################################
-# Test
-################################################################################
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_action_script_player/package.xml b/ROBOTIS-THORMANG-OPC-for-git/thormang3_action_script_player/package.xml
deleted file mode 100644
index d1c42bf..0000000
--- a/ROBOTIS-THORMANG-OPC-for-git/thormang3_action_script_player/package.xml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0"?>
-<package>
-  <name>thormang3_action_script_player</name>
-  <version>0.2.0</version>
-  <description>
-    This package provides a action script playing for thormang3.
-    It can be used with thormang3_action_module and ros_mpg321_player.
-  </description>
-  <license>BSD</license>
-  <author email="hjsong@robotis.com">Jay Song</author>
-  <maintainer email="pyo@robotis.com">Pyo</maintainer>
-  <url type="bugtracker">https://github.com/ROBOTIS-GIT/ROBOTIS-THORMANG-OPC/issues</url>
-  <url type="repository">https://github.com/ROBOTIS-GIT/ROBOTIS-THORMANG-OPC</url>
-  <url type="website">http://wiki.ros.org/thormang3_action_script_player</url>
-  <buildtool_depend>catkin</buildtool_depend>
-  <build_depend>roscpp</build_depend>
-  <build_depend>std_msgs</build_depend>
-  <build_depend>robotis_controller_msgs</build_depend>
-  <build_depend>thormang3_action_module_msgs</build_depend>
-  <run_depend>roscpp</run_depend>
-  <run_depend>std_msgs</run_depend>
-  <build_depend>robotis_controller_msgs</build_depend>
-  <build_depend>thormang3_action_module_msgs</build_depend>
-</package>
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_action_script_player/script/action_script.yaml b/ROBOTIS-THORMANG-OPC-for-git/thormang3_action_script_player/script/action_script.yaml
deleted file mode 100644
index fb8faa0..0000000
--- a/ROBOTIS-THORMANG-OPC-for-git/thormang3_action_script_player/script/action_script.yaml
+++ /dev/null
@@ -1,66 +0,0 @@
-# thormang3 action script
-# the argument of "play" cmd is action file page number.
-# the unit for sleep is ms
-# the mp3 file is in the ppc
- 
-# Hello
-script2: 
-     cmd1: {cmd_name: play,  cmd_arg: 2}
-     cmd2: {cmd_name: sleep, cmd_arg: 1800}
-     cmd3: {cmd_name: mp3,   cmd_arg: "/home/robotis/Music/thormang_mp3/hello_kor.mp3"}
-     cmd4: {cmd_name: sleep, cmd_arg: 1100}
-     cmd5: {cmd_name: mp3,   cmd_arg: "/home/robotis/Music/thormang_mp3/i_am_thormang_kor.mp3"}
-
-# Thank You
-script3:
-     cmd1: {cmd_name: play,  cmd_arg: 3}
-     cmd2: {cmd_name: sleep, cmd_arg: 2100}
-     cmd3: {cmd_name: mp3,   cmd_arg: "/home/robotis/Music/thormang_mp3/thank_you_kor.mp3"}
-
-# Yes
-script4:
-     joint_name: [r_leg_hip_p, l_leg_hip_p, head_p]
-     cmd1: {cmd_name: play,  cmd_arg: 4}
-     cmd2: {cmd_name: sleep, cmd_arg: 500}
-     cmd3: {cmd_name: mp3,   cmd_arg: "/home/robotis/Music/thormang_mp3/yes_kor.mp3"}
-
-# No
-script5:
-     joint_name: [torso_y, head_y]
-     cmd1: {cmd_name: play,  cmd_arg: 5}     
-     cmd2: {cmd_name: sleep, cmd_arg: 500}
-     cmd3: {cmd_name: mp3,   cmd_arg: "/home/robotis/Music/thormang_mp3/no_kor.mp3"}
-
-# Cheer Up
-script6:
-     cmd1: {cmd_name: play,  cmd_arg: 6}
-     
-# Clap
-script7:
-     cmd1: {cmd_name: play,  cmd_arg: 7}
-     cmd2: {cmd_name: sleep, cmd_arg: 2000}
-     cmd3: {cmd_name: mp3,   cmd_arg: "/home/robotis/Music/thormang_mp3/clap_please_kor.mp3"}
-
-# Ready to Handshake
-script9:
-     cmd1: {cmd_name: play, cmd_arg: 9}
-     cmd2: {cmd_name: wait}
-     cmd3: {cmd_name: mp3,   cmd_arg: "/home/robotis/Music/thormang_mp3/handshake_please.mp3"}
-     
-# Start to Handshake
-script10:
-     cmd1: {cmd_name: play, cmd_arg: 10}
-     
-# Finish Handshake
-script11:
-     cmd1: {cmd_name: play, cmd_arg: 11}
-     
-# Scan
-script12:
-     joint_name: [head_y, head_p]
-     cmd1: {cmd_name: play, cmd_arg: 12}
-     
-# Ceremony
-script13:
-     cmd1: {cmd_name: play, cmd_arg: 13}
-     cmd2: {cmd_name: mp3,   cmd_arg: "/home/robotis/Music/thormang_mp3/eng/clap_please_eng.mp3"}
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_action_script_player/src/action_script_player.cpp b/ROBOTIS-THORMANG-OPC-for-git/thormang3_action_script_player/src/action_script_player.cpp
deleted file mode 100644
index ca254ee..0000000
--- a/ROBOTIS-THORMANG-OPC-for-git/thormang3_action_script_player/src/action_script_player.cpp
+++ /dev/null
@@ -1,371 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2016, ROBOTIS CO., LTD.
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- *
- * * Redistributions of source code must retain the above copyright notice, this
- *   list of conditions and the following disclaimer.
- *
- * * Redistributions in binary form must reproduce the above copyright notice,
- *   this list of conditions and the following disclaimer in the documentation
- *   and/or other materials provided with the distribution.
- *
- * * Neither the name of ROBOTIS nor the names of its
- *   contributors may be used to endorse or promote products derived from
- *   this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
- * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
- * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- *******************************************************************************/
-
-/*
- * thormang3_action_script_player.cpp
- *
- *  Created on: Mar 25, 2016
- *      Author: Jay Song
- */
-
-#include <ros/ros.h>
-#include <ros/package.h>
-#include <std_msgs/Int32.h>
-#include <std_msgs/String.h>
-#include <boost/thread.hpp>
-#include <yaml-cpp/yaml.h>
-#include "robotis_controller_msgs/StatusMsg.h"
-#include "thormang3_action_module_msgs/IsRunning.h"
-#include "thormang3_action_module_msgs/StartAction.h"
-
-#define JOINT_NAME_KEY                    "joint_name"
-#define ACTION_PLAY_CMD_NAME              "play"
-#define MP3_PLAY_CMD_NAME                 "mp3"
-#define WAIT_ACTION_PLAY_FINISH_CMD_NAME  "wait"
-#define SLEEP_CMD_NAME                    "sleep"
-
-ros::Subscriber    g_action_script_num_sub;
-ros::Publisher     g_action_page_num_pub;
-ros::Publisher     g_start_action_pub;
-ros::Publisher     g_sound_file_name_pub;
-ros::ServiceClient g_is_running_client;
-
-thormang3_action_module_msgs::IsRunning  g_is_running_srv;
-
-boost::thread     *g_action_script_play_thread;
-
-std::string        g_action_script_file_path;
-
-typedef struct
-{
-  std::string cmd_name;
-  std::string cmd_arg_str;
-  int         cmd_arg_int;
-} action_script_cmd;
-
-std::vector<std::string>       g_joint_name_list;
-std::vector<action_script_cmd> g_action_script_data;
-
-std::string convertIntToString(int n)
-{
-  std::ostringstream ostr;
-  ostr << n;
-  return ostr.str();
-}
-
-int convertStringToInt(std::string str)
-{
-  return atoi(str.c_str());
-}
-
-bool isActionRunning(void)
-{
-  if (g_is_running_client.call(g_is_running_srv) == false)
-  {
-    ROS_ERROR("Failed to get action status");
-    return true;
-  }
-  else
-  {
-    if (g_is_running_srv.response.is_running == true)
-    {
-      return true;
-    }
-  }
-
-  return false;
-}
-
-bool parseActionScript(int action_script_index)
-{
-  g_action_script_data.clear();
-
-  YAML::Node action_script_file_doc;
-  try
-  {
-    // load yaml
-    action_script_file_doc = YAML::LoadFile(g_action_script_file_path.c_str());
-  } catch (const std::exception& e)
-  {
-    ROS_ERROR("Failed to load action script file.");
-    return false;
-  }
-
-  //find action script
-  std::string script_index_key  = "script" + convertIntToString(action_script_index);
-  YAML::Node  action_script_doc = action_script_file_doc[script_index_key];
-  if (action_script_doc == NULL)
-  {
-    std::string status_msg = "Failed to find action script #" + convertIntToString(action_script_index);
-    ROS_ERROR_STREAM(status_msg);
-    return false;
-  }
-
-  int cmd_num = 1;
-  std::string cmd_key = "";
-  try
-  {
-    g_joint_name_list.clear();
-    YAML::Node joint_name_doc = action_script_doc[JOINT_NAME_KEY];
-    if (joint_name_doc != NULL)
-      g_joint_name_list = joint_name_doc.as< std::vector<std::string> >();
-
-    while (true)
-    {
-      //check cmd exist
-      cmd_key = "cmd" + convertIntToString(cmd_num);
-      YAML::Node action_script_cmd_doc = action_script_doc[cmd_key];
-      if (action_script_cmd_doc == NULL)
-      {
-        break;
-      }
-
-      //check validity of cmd_name
-      action_script_cmd temp_cmd;
-      if (action_script_cmd_doc["cmd_name"] == NULL)
-      {
-        std::string status_msg = "cmd#" + convertIntToString(cmd_num) + " of " + "script#" + convertIntToString(action_script_index) + " is invalid.";
-        ROS_ERROR_STREAM(status_msg);
-        return false;
-      }
-
-      //check  validity of cmd_arg
-      temp_cmd.cmd_name = action_script_cmd_doc["cmd_name"].as<std::string>();
-      if ((temp_cmd.cmd_name != "wait") && (action_script_cmd_doc["cmd_arg"] == NULL))
-      {
-        std::string status_msg = "cmd#" + convertIntToString(cmd_num) + " of " + "script#" + convertIntToString(action_script_index) + " is invalid.";
-        ROS_ERROR_STREAM(status_msg);
-        return false;
-      }
-
-      //get cmd_arg
-      if (temp_cmd.cmd_name == ACTION_PLAY_CMD_NAME)
-      {
-        temp_cmd.cmd_arg_int = action_script_cmd_doc["cmd_arg"].as<int>();
-      }
-      else if (temp_cmd.cmd_name == MP3_PLAY_CMD_NAME)
-      {
-        temp_cmd.cmd_arg_str = action_script_cmd_doc["cmd_arg"].as<std::string>();
-      }
-      else if (temp_cmd.cmd_name == WAIT_ACTION_PLAY_FINISH_CMD_NAME)
-      {
-        temp_cmd.cmd_arg_str = "";
-        temp_cmd.cmd_arg_int = 0;
-      }
-      else if (temp_cmd.cmd_name == SLEEP_CMD_NAME)
-      {
-        temp_cmd.cmd_arg_int = action_script_cmd_doc["cmd_arg"].as<int>();
-        if (temp_cmd.cmd_arg_int < 0)
-        {
-          std::string status_msg = "cmd#" + convertIntToString(cmd_num) + " of " + "script#" + convertIntToString(action_script_index) + " is invalid.";
-          ROS_ERROR_STREAM(status_msg);
-          g_action_script_data.clear();
-          return false;
-        }
-      }
-      else
-      {
-        std::string status_msg = "cmd#" + convertIntToString(cmd_num) + " of " + "script#" + convertIntToString(action_script_index) + " is invalid.";
-        ROS_ERROR_STREAM(status_msg);
-        g_action_script_data.clear();
-        return false;
-      }
-
-      g_action_script_data.push_back(temp_cmd);
-      cmd_num++;
-    }
-  } catch (const std::exception& e)
-  {
-    std::string status_msg = "cmd#" + convertIntToString(cmd_num) + " of " + "script#" + convertIntToString(action_script_index) + " is invalid.";
-    ROS_ERROR_STREAM(status_msg);
-    g_action_script_data.clear();
-    return false;
-  }
-
-  return true;
-}
-
-void actionScriptPlayThreadFunc(int action_script_index)
-{
-  try
-  {
-    if (action_script_index < 0)
-    {
-      std::string status_msg = "Invalid Action Script Index";
-      ROS_ERROR_STREAM(status_msg);
-      return;
-    }
-
-    if (isActionRunning() == true)
-    {
-      std::string status_msg = "Previous action playing is not finished.";
-      ROS_ERROR_STREAM(status_msg);
-      return;
-    }
-
-    if (parseActionScript(action_script_index) == false)
-      return;
-
-    std_msgs::Int32   action_page_num_msg;
-    std_msgs::String  sound_file_name_msg;
-    thormang3_action_module_msgs::StartAction start_action_msg;
-    if (g_joint_name_list.size() != 0)
-    {
-      for (unsigned int joint_name_idx = 0; joint_name_idx < g_joint_name_list.size(); joint_name_idx++)
-        start_action_msg.joint_name_array.push_back(g_joint_name_list[joint_name_idx]);
-    }
-
-    for(unsigned int action_script_data_idx = 0; action_script_data_idx < g_action_script_data.size(); action_script_data_idx++)
-    {
-      std::string cmd_name = g_action_script_data[action_script_data_idx].cmd_name;
-
-      boost::this_thread::interruption_point();
-      if (cmd_name == ACTION_PLAY_CMD_NAME)
-      {
-        if (g_joint_name_list.size() != 0)
-        {
-          start_action_msg.page_num = g_action_script_data[action_script_data_idx].cmd_arg_int;
-          g_start_action_pub.publish(start_action_msg);
-        }
-        else
-        {
-          action_page_num_msg.data  = g_action_script_data[action_script_data_idx].cmd_arg_int;
-          g_action_page_num_pub.publish(action_page_num_msg);
-        }
-      }
-      else if (cmd_name == MP3_PLAY_CMD_NAME)
-      {
-        sound_file_name_msg.data = g_action_script_data[action_script_data_idx].cmd_arg_str;
-        g_sound_file_name_pub.publish(sound_file_name_msg);
-      }
-      else if (cmd_name == WAIT_ACTION_PLAY_FINISH_CMD_NAME)
-      {
-        while (true)
-        {
-          if (isActionRunning() == false)
-            break;
-
-          boost::this_thread::sleep(boost::posix_time::milliseconds(32));
-        }
-      }
-      else if (cmd_name == SLEEP_CMD_NAME)
-      {
-        boost::this_thread::sleep(boost::posix_time::milliseconds(g_action_script_data[action_script_data_idx].cmd_arg_int));
-      }
-      else
-      {
-        boost::this_thread::interruption_point();
-        continue;
-      }
-    }
-
-  } catch (boost::thread_interrupted&)
-  {
-    ROS_INFO("Action Script Thread is Interrupted");
-    return;
-  }
-}
-
-void actionScriptNumberCallback(const std_msgs::Int32::ConstPtr& msg)
-{
-  if ((msg->data == -1) || (msg->data == -2))  //Stop or Break
-  {
-    std_msgs::Int32   action_page_num_msg;
-    action_page_num_msg.data = msg->data;
-    g_action_page_num_pub.publish(action_page_num_msg);
-
-//    if((g_action_script_play_thread != 0)	&& (g_action_script_play_thread->get_thread_info() != 0))
-//    {
-//      if(g_action_script_play_thread->get_thread_info()->done == false)
-//      {
-//        g_action_script_play_thread->interrupt();
-//        g_action_script_play_thread->join();
-//      }
-//    }
-    if ((g_action_script_play_thread != 0))
-    {
-      g_action_script_play_thread->interrupt();
-      g_action_script_play_thread->join();
-      delete g_action_script_play_thread;
-      g_action_script_play_thread = 0;
-    }
-  }
-  else
-  {
-    if ((g_action_script_play_thread == 0))
-    {
-      g_action_script_play_thread = new boost::thread(actionScriptPlayThreadFunc, msg->data);
-    }
-//    else if(g_action_script_play_thread->get_thread_info() == 0)
-//    {
-//      g_action_script_play_thread = new boost::thread(actionScriptPlayThreadFunc, msg->data);
-//    }
-    //else if(g_action_script_play_thread->get_thread_info()->done == true)
-    //else if(g_action_script_play_thread->get_id() == false)
-    else if (g_action_script_play_thread->timed_join(boost::posix_time::milliseconds(32)) == true)
-    {
-      delete g_action_script_play_thread;
-      g_action_script_play_thread = new boost::thread(actionScriptPlayThreadFunc, msg->data);
-    }
-    else
-    {
-      std::string status_msg = "Previous action script is not finished.";
-      ROS_ERROR_STREAM(status_msg);
-    }
-  }
-}
-
-int main(int argc, char **argv)
-{
-  ros::init(argc, argv, "thormang3_action_script_player");
-  ros::NodeHandle ros_node_handle;
-
-  g_action_script_play_thread = 0;
-
-  g_action_script_num_sub = ros_node_handle.subscribe("/robotis/demo/action_index", 0, &actionScriptNumberCallback);
-  g_action_page_num_pub   = ros_node_handle.advertise<std_msgs::Int32>("/robotis/action/page_num", 0);
-  g_start_action_pub      = ros_node_handle.advertise<thormang3_action_module_msgs::StartAction>("/robotis/action/start_action", 0);
-  g_sound_file_name_pub   = ros_node_handle.advertise<std_msgs::String>("/play_sound_file", 0);
-  g_is_running_client     = ros_node_handle.serviceClient<thormang3_action_module_msgs::IsRunning>("/robotis/action/is_running");
-
-  //Setting action script file path
-  std::string temp_action_script_file_path = ros::package::getPath("thormang3_action_script_player") + "/script/action_script.yaml";
-  if (ros_node_handle.getParam("action_script_file_path", g_action_script_file_path) == false)
-  {
-    g_action_script_file_path = temp_action_script_file_path;
-    ROS_WARN("Failed to get action script_file_path.");
-    ROS_WARN("The default action script file path will be used.");
-  }
-
-  ROS_INFO("Start ThorMang3 Action Script Player");
-
-  ros::spin();
-}
-
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_demo/CMakeLists.txt b/ROBOTIS-THORMANG-OPC-for-git/thormang3_demo/CMakeLists.txt
deleted file mode 100644
index e74a4f9..0000000
--- a/ROBOTIS-THORMANG-OPC-for-git/thormang3_demo/CMakeLists.txt
+++ /dev/null
@@ -1,86 +0,0 @@
-##############################################################################
-# CMake
-##############################################################################
-
-cmake_minimum_required(VERSION 2.8.0)
-project(thormang3_demo)
-
-##############################################################################
-# Catkin
-##############################################################################
-
-# qt_build provides the qt cmake glue, roscpp the comms for a default talker
-find_package(catkin REQUIRED COMPONENTS
-  qt_build
-  roscpp
-  roslib
-  cmake_modules
-  eigen_conversions
-  thormang3_foot_step_generator
-  robotis_controller_msgs
-  thormang3_walking_module_msgs
-  thormang3_manipulation_module_msgs
-  thormang3_feet_ft_module_msgs
-  humanoid_nav_msgs
-  visualization_msgs
-  interactive_markers
-)
-
-find_package(Eigen REQUIRED)
-
-include_directories(
-  ${catkin_INCLUDE_DIRS}
-  ${Eigen_INCLUDE_DIRS}
-)
-# Use this to define what the package will export (e.g. libs, headers).
-# Since the default here is to produce only a binary, we don't worry about
-# exporting anything. 
-catkin_package(
- INCLUDE_DIRS include
-)
-
-##############################################################################
-# Qt Environment
-##############################################################################
-
-# this comes from qt_build's qt-ros.cmake which is automatically 
-# included via the dependency call in package.xml
-rosbuild_prepare_qt4(QtCore QtGui) # Add the appropriate components to the component list here
-
-##############################################################################
-# Sections
-##############################################################################
-
-file(GLOB QT_FORMS RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} ui/*.ui)
-file(GLOB QT_RESOURCES RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} resources/*.qrc)
-file(GLOB_RECURSE QT_MOC RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} FOLLOW_SYMLINKS include/thormang3_demo/*.hpp)
-
-QT4_ADD_RESOURCES(QT_RESOURCES_CPP ${QT_RESOURCES})
-QT4_WRAP_UI(QT_FORMS_HPP ${QT_FORMS})
-QT4_WRAP_CPP(QT_MOC_HPP ${QT_MOC})
-
-##############################################################################
-# Sources
-##############################################################################
-
-file(GLOB_RECURSE QT_SOURCES RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} FOLLOW_SYMLINKS src/*.cpp)
-
-##############################################################################
-# Binaries
-##############################################################################
-
-add_executable(thormang3_demo ${QT_SOURCES} ${QT_RESOURCES_CPP} ${QT_FORMS_HPP} ${QT_MOC_HPP})
-add_dependencies(thormang3_demo ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})
-target_link_libraries(thormang3_demo
-  ${QT_LIBRARIES}
-  ${catkin_LIBRARIES}
-  yaml-cpp)
-
-################################################################################
-# Install
-################################################################################
-install(TARGETS thormang3_demo
-  RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
-)
-
-
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_demo/config/_balance_param.yaml b/ROBOTIS-THORMANG-OPC-for-git/thormang3_demo/config/_balance_param.yaml
deleted file mode 100644
index 10586bf..0000000
--- a/ROBOTIS-THORMANG-OPC-for-git/thormang3_demo/config/_balance_param.yaml
+++ /dev/null
@@ -1,53 +0,0 @@
-####### cob_offset #######
-cob_x_offset_m : -0.015
-cob_y_offset_m :  0.0
-
-####### FeedForward #####
-hip_roll_swap_angle_rad : 0.0
-
-########## Gain ########
-# by gyro
-foot_roll_gyro_p_gain : 0.0 #0.5
-foot_roll_gyro_d_gain : 0.0
-
-foot_pitch_gyro_p_gain : 0.0 #0.5
-foot_pitch_gyro_d_gain : 0.0
-
-# by imu
-foot_roll_angle_p_gain : 0.0 #1.0
-foot_roll_angle_d_gain : 0.0
-
-foot_pitch_angle_p_gain : 0.0 #1.0
-foot_pitch_angle_d_gain : 0.0
-
-# by ft sensor
-foot_x_force_p_gain : 0.0 #0.125
-foot_x_force_d_gain : 0.0
-
-foot_y_force_p_gain : 0.0 #0.125
-foot_y_force_d_gain : 0.0
-
-foot_z_force_p_gain : 0.0 #0.015
-foot_z_force_d_gain : 0.0
-
-foot_roll_torque_p_gain : 0.0 #0.001
-foot_roll_torque_d_gain : 0.0
-
-foot_pitch_torque_p_gain : 0.0 #0.001
-foot_pitch_torque_d_gain : 0.0
-
-########## CUT OFF FREQUENCY ##########
-# by gyro
-roll_gyro_cut_off_frequency  : 40.0
-pitch_gyro_cut_off_frequency : 40.0
-
-# by imu
-roll_angle_cut_off_frequency  : 40.0
-pitch_angle_cut_off_frequency : 40.0
-
-# by ft sensor
-foot_x_force_cut_off_frequency : 30.0
-foot_y_force_cut_off_frequency : 30.0
-foot_z_force_cut_off_frequency : 30.0
-foot_roll_torque_cut_off_frequency : 30.0
-foot_pitch_torque_cut_off_frequency : 30.0
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_demo/config/balance_param.yaml b/ROBOTIS-THORMANG-OPC-for-git/thormang3_demo/config/balance_param.yaml
deleted file mode 100644
index 10586bf..0000000
--- a/ROBOTIS-THORMANG-OPC-for-git/thormang3_demo/config/balance_param.yaml
+++ /dev/null
@@ -1,53 +0,0 @@
-####### cob_offset #######
-cob_x_offset_m : -0.015
-cob_y_offset_m :  0.0
-
-####### FeedForward #####
-hip_roll_swap_angle_rad : 0.0
-
-########## Gain ########
-# by gyro
-foot_roll_gyro_p_gain : 0.0 #0.5
-foot_roll_gyro_d_gain : 0.0
-
-foot_pitch_gyro_p_gain : 0.0 #0.5
-foot_pitch_gyro_d_gain : 0.0
-
-# by imu
-foot_roll_angle_p_gain : 0.0 #1.0
-foot_roll_angle_d_gain : 0.0
-
-foot_pitch_angle_p_gain : 0.0 #1.0
-foot_pitch_angle_d_gain : 0.0
-
-# by ft sensor
-foot_x_force_p_gain : 0.0 #0.125
-foot_x_force_d_gain : 0.0
-
-foot_y_force_p_gain : 0.0 #0.125
-foot_y_force_d_gain : 0.0
-
-foot_z_force_p_gain : 0.0 #0.015
-foot_z_force_d_gain : 0.0
-
-foot_roll_torque_p_gain : 0.0 #0.001
-foot_roll_torque_d_gain : 0.0
-
-foot_pitch_torque_p_gain : 0.0 #0.001
-foot_pitch_torque_d_gain : 0.0
-
-########## CUT OFF FREQUENCY ##########
-# by gyro
-roll_gyro_cut_off_frequency  : 40.0
-pitch_gyro_cut_off_frequency : 40.0
-
-# by imu
-roll_angle_cut_off_frequency  : 40.0
-pitch_angle_cut_off_frequency : 40.0
-
-# by ft sensor
-foot_x_force_cut_off_frequency : 30.0
-foot_y_force_cut_off_frequency : 30.0
-foot_z_force_cut_off_frequency : 30.0
-foot_roll_torque_cut_off_frequency : 30.0
-foot_pitch_torque_cut_off_frequency : 30.0
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_demo/config/demo_config.yaml b/ROBOTIS-THORMANG-OPC-for-git/thormang3_demo/config/demo_config.yaml
deleted file mode 100644
index 15643d7..0000000
--- a/ROBOTIS-THORMANG-OPC-for-git/thormang3_demo/config/demo_config.yaml
+++ /dev/null
@@ -1,40 +0,0 @@
-id_joint:
-  1  : r_arm_sh_p1
-  2  : l_arm_sh_p1
-  3  : r_arm_sh_r
-  4  : l_arm_sh_r
-  5  : r_arm_sh_p2
-  6  : l_arm_sh_p2
-  7  : r_arm_el_y
-  8  : l_arm_el_y
-  9  : r_arm_wr_r
-  10 : l_arm_wr_r
-  11 : r_arm_wr_y
-  12 : l_arm_wr_y
-  13 : r_arm_wr_p
-  14 : l_arm_wr_p
-  15 : r_leg_hip_y
-  16 : l_leg_hip_y
-  17 : r_leg_hip_r
-  18 : l_leg_hip_r
-  19 : r_leg_hip_p
-  20 : l_leg_hip_p
-  21 : r_leg_kn_p
-  22 : l_leg_kn_p
-  23 : r_leg_an_p
-  24 : l_leg_an_p
-  25 : r_leg_an_r
-  26 : l_leg_an_r
-  27 : torso_y
-  28 : head_y
-  29 : head_p
-  30 : l_arm_grip
-  31 : r_arm_grip
-module_list: [none, walking_module, manipulation_module, head_control_module, base_module, action_module, gripper_module]
-module_button:
-  1 : none
-  2 : manipulation_module
-  3 : walking_module
-  4 : head_control_module
-  5 : action_module
-  6 : gripper_module
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_demo/config/joint_feedback_gain.yaml b/ROBOTIS-THORMANG-OPC-for-git/thormang3_demo/config/joint_feedback_gain.yaml
deleted file mode 100644
index ba7ee88..0000000
--- a/ROBOTIS-THORMANG-OPC-for-git/thormang3_demo/config/joint_feedback_gain.yaml
+++ /dev/null
@@ -1,37 +0,0 @@
-r_leg_hip_y_p_gain : 1.0
-r_leg_hip_y_d_gain : 0.0
-
-r_leg_hip_r_p_gain : 1.5
-r_leg_hip_r_d_gain : 0.0
-
-r_leg_hip_p_p_gain : 0.15
-r_leg_hip_p_d_gain : 0.0
-
-r_leg_kn_p_p_gain  : 0.15
-r_leg_kn_p_d_gain  : 0.0
-
-r_leg_an_p_p_gain  : 0.05
-r_leg_an_p_d_gain  : 0.0
-
-r_leg_an_r_p_gain  : 0.05
-r_leg_an_r_d_gain  : 0.0
-
-
-l_leg_hip_y_p_gain : 1.0
-l_leg_hip_y_d_gain : 0.0
-
-l_leg_hip_r_p_gain : 1.5
-l_leg_hip_r_d_gain : 0.0
-
-l_leg_hip_p_p_gain : 0.15
-l_leg_hip_p_d_gain : 0.0
-
-l_leg_kn_p_p_gain  : 0.15
-l_leg_kn_p_d_gain  : 0.0
-
-l_leg_an_p_p_gain  : 0.05
-l_leg_an_p_d_gain  : 0.0
-
-l_leg_an_r_p_gain  : 0.05
-l_leg_an_r_d_gain  : 0.0
-
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_demo/config/motion.yaml b/ROBOTIS-THORMANG-OPC-for-git/thormang3_demo/config/motion.yaml
deleted file mode 100644
index 8c0a155..0000000
--- a/ROBOTIS-THORMANG-OPC-for-git/thormang3_demo/config/motion.yaml
+++ /dev/null
@@ -1,27 +0,0 @@
-motion:
-  -2 : BRAKE
-  -1 : STOP
-#  0 : .
-#  1 : .
-  2 : Hello 
-  3 : Thank you
-  4 : Yes
-  5 : No 
-  6 : Cheer up
-  7 : Clap
-#  8 : Looking around
-  9 : Ready to Handshake
-  10 : Start Handshake
-  11 : Finish Handshake
-  12 : Scan
-  13 : Ceremony
-  15 : .
-  16 : .
-  17 : .
-  18 : .
-  19 : .
-  20 : .
-  21 : .
-  22 : .
-  23 : .
-  24 : .
\ No newline at end of file
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_demo/include/thormang3_demo/main_window.hpp b/ROBOTIS-THORMANG-OPC-for-git/thormang3_demo/include/thormang3_demo/main_window.hpp
deleted file mode 100644
index e3fafd4..0000000
--- a/ROBOTIS-THORMANG-OPC-for-git/thormang3_demo/include/thormang3_demo/main_window.hpp
+++ /dev/null
@@ -1,234 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2016, ROBOTIS CO., LTD.
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- *
- * * Redistributions of source code must retain the above copyright notice, this
- *   list of conditions and the following disclaimer.
- *
- * * Redistributions in binary form must reproduce the above copyright notice,
- *   this list of conditions and the following disclaimer in the documentation
- *   and/or other materials provided with the distribution.
- *
- * * Neither the name of ROBOTIS nor the names of its
- *   contributors may be used to endorse or promote products derived from
- *   this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
- * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
- * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- *******************************************************************************/
-
-/* Author: Kayman Jung */
-
-#ifndef thormang3_demo_MAIN_WINDOW_H
-#define thormang3_demo_MAIN_WINDOW_H
-
-/*****************************************************************************
- ** Includes
- *****************************************************************************/
-
-#include <QtGui/QMainWindow>
-#include "ui_main_window.h"
-#include "qnode.hpp"
-
-/*****************************************************************************
- ** Namespace
- *****************************************************************************/
-
-namespace thormang3_demo
-{
-
-/*****************************************************************************
- ** Interface [MainWindow]
- *****************************************************************************/
-/**
- * @brief Qt central, all operations relating to the view part here.
- */
-class MainWindow : public QMainWindow
-{
-Q_OBJECT
-
- public:
-  MainWindow(int argc, char** argv, QWidget *parent = 0);
-  ~MainWindow();
-
-  void readSettings();  // Load up qt program settings at startup
-  void writeSettings();  // Save qt program settings when closing
-
-  void closeEvent(QCloseEvent *event);  // Overloaded function
-
- public Q_SLOTS:
-  /******************************************
-   ** Auto-connections (connectSlotsByName())
-   *******************************************/
-  void on_actionAbout_triggered();
-  void on_button_assemble_lidar_clicked(bool check);
-  void on_button_clear_log_clicked(bool check);
-
-  void on_button_init_pose_clicked(bool check);
-  void on_button_ft_air_clicked(bool check);
-  void on_button_ft_gnd_clicked(bool check);
-  void on_button_ft_calc_clicked(bool check);
-  void on_button_ft_save_clicked(bool check);
-
-  void on_tabWidget_control_currentChanged(int index);
-
-  // Manipulation
-  void on_inipose_button_clicked(bool check);
-  void on_currjoint_button_clicked(bool check);
-  void on_desjoint_button_clicked(bool check);
-  void on_get_despos_button_clicked(bool check);
-  void on_currpos_button_clicked(bool check);
-  void on_despos_button_clicked(bool check);
-  void on_button_grip_on_clicked(bool check);
-  void on_button_grip_off_clicked(bool check);
-
-  // Walking
-  void on_A0_button_fl_clicked(bool check);
-  void on_A1_button_f_clicked(bool check);
-  void on_A2_button_fr_clicked(bool check);
-
-  void on_B0_button_l_clicked(bool check);
-  void on_B1_button_stop_clicked(bool check);
-  void on_B2_button_r_clicked(bool check);
-
-  void on_C0_button_bl_clicked(bool check);
-  void on_C1_button_b_clicked(bool check);
-  void on_C2_button_br_clicked(bool check);
-
-  void on_button_balance_on_clicked(bool check);
-  void on_button_balance_off_clicked(bool check);
-  void on_button_feedback_gain_apply_clicked(bool check);
-
-  void on_A0_button_get_step_clicked(bool check);
-  void on_A1_button_clear_step_clicked(bool check);
-  void on_A2_button_go_walking_clicked(bool check);
-
-  // Head Control
-  void on_head_center_button_clicked(bool check);
-
-  // Interactive Marker
-  void on_dSpinBox_marker_pos_x_valueChanged(double value);
-  void on_dSpinBox_marker_pos_y_valueChanged(double value);
-  void on_dSpinBox_marker_pos_z_valueChanged(double value);
-
-  void on_dSpinBox_marker_ori_r_valueChanged(double value);
-  void on_dSpinBox_marker_ori_p_valueChanged(double value);
-  void on_dSpinBox_marker_ori_y_valueChanged(double value);
-
-  void on_button_marker_set_clicked();
-  void on_button_marker_clear_clicked();
-
-  // Demo
-  void on_button_manipulation_demo_0_clicked(bool check);
-  void on_button_manipulation_demo_1_clicked(bool check);
-  void on_button_manipulation_demo_2_clicked(bool check);
-  void on_button_manipulation_demo_3_clicked(bool check);
-  void on_button_manipulation_demo_4_clicked(bool check);
-  void on_button_manipulation_demo_5_clicked(bool check);
-  void on_button_manipulation_demo_6_clicked(bool check);
-  void on_button_manipulation_demo_7_clicked(bool check);
-
-  void on_button_walking_demo_0_clicked(bool check);
-  void on_button_walking_demo_1_clicked(bool check);
-  void on_button_walking_demo_2_clicked(bool check);
-  void on_button_walking_demo_3_clicked(bool check);
-  void on_button_walking_demo_4_clicked(bool check);
-  void on_button_walking_demo_5_clicked(bool check);
-  void on_button_walking_demo_6_clicked(bool check);
-  void on_button_walking_demo_7_clicked(bool check);
-
-  void on_button_motion_demo_0_clicked(bool check);
-  void on_button_motion_demo_1_clicked(bool check);
-
-  /******************************************
-   ** Manual connections
-   *******************************************/
-  void updateLoggingView();  // no idea why this can't connect automatically
-  void updatePresentJointModule(std::vector<int> mode);
-  void enableModule(QString mode_name);
-  void updateHeadJointsAngle(double pan, double tilt);
-
-  // Manipulation
-  void updateCurrJointSpinbox(double value);
-  void updateCurrPosSpinbox(double x, double y, double z);
-  void updateCurrOriSpinbox(double x, double y, double z, double w);
-  void updateCurrOriSpinbox(double r, double p, double y);
-
-  // demo
-  void updatePointPanel(const geometry_msgs::Point point);
-  void updatePosePanel(const geometry_msgs::Pose pose);
-
- protected Q_SLOTS:
-  void setHeadJointsAngle();
-  void playMotion(int motion_index);
-
- private:
-  static const double GRIPPER_ON_ANGLE = 60;
-  static const double GRIPPER_OFF_ANGLE = 5;
-  static const double GRIPPER_TORQUE_LIMIT = 250;
-
-  void setUserShortcut();
-  void initModeUnit();
-  void initMotionUnit();
-  void updateModuleUI();
-  void setHeadJointsAngle(double pan, double tilt);
-  void sendWalkingCommand(const std::string &command);
-  void setGripper(const double angle_deg, const double torque_limit, const std::string &arm_type);
-
-  void makeInteractiveMarker();
-  void updateInteractiveMarker();
-  void clearMarkerPanel();
-  void getPoseFromMarkerPanel(geometry_msgs::Pose &current);
-  void setPoseToMarkerPanel(const geometry_msgs::Pose &current);
-  void getPointFromMarkerPanel(geometry_msgs::Point &current);
-  void setPointToMarkerPanel(const geometry_msgs::Point &current);
-
-  /******************************************
-   ** Transformation
-   *******************************************/
-  Eigen::Vector3d rotation2rpy(const Eigen::MatrixXd &rotation);
-  Eigen::MatrixXd rpy2rotation(const double &roll, const double &pitch, const double &yaw);
-  Eigen::Quaterniond rpy2quaternion(const Eigen::Vector3d &euler);
-  Eigen::Quaterniond rpy2quaternion(const double &roll, const double &pitch, const double &yaw);
-  Eigen::Quaterniond rotation2quaternion(const Eigen::MatrixXd &rotation);
-  Eigen::Vector3d quaternion2rpy(const Eigen::Quaterniond &quaternion);
-  Eigen::Vector3d quaternion2rpy(const geometry_msgs::Quaternion &quaternion);
-  Eigen::MatrixXd quaternion2rotation(const Eigen::Quaterniond &quaternion);
-  Eigen::MatrixXd rotationX(const double &angle);
-  Eigen::MatrixXd rotationY(const double &angle);
-  Eigen::MatrixXd rotationZ(const double &angle);
-
-  Ui::MainWindowDesign ui_;
-  QNodeThor3 qnode_thor3_;
-  bool debug_print_;
-  bool demo_mode_;
-  bool is_updating_;
-  std::map<std::string, QList<QWidget *> > module_ui_table_;
-};
-
-template<typename T>
-T deg2rad(T deg)
-{
-  return deg * M_PI / 180;
-}
-
-template<typename T>
-T rad2deg(T rad)
-{
-  return rad * 180 / M_PI;
-}
-
-}  // namespace thormang3_demo
-
-#endif // thormang3_demo_MAIN_WINDOW_H
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_demo/include/thormang3_demo/qnode.hpp b/ROBOTIS-THORMANG-OPC-for-git/thormang3_demo/include/thormang3_demo/qnode.hpp
deleted file mode 100644
index 28e6224..0000000
--- a/ROBOTIS-THORMANG-OPC-for-git/thormang3_demo/include/thormang3_demo/qnode.hpp
+++ /dev/null
@@ -1,307 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2016, ROBOTIS CO., LTD.
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- *
- * * Redistributions of source code must retain the above copyright notice, this
- *   list of conditions and the following disclaimer.
- *
- * * Redistributions in binary form must reproduce the above copyright notice,
- *   this list of conditions and the following disclaimer in the documentation
- *   and/or other materials provided with the distribution.
- *
- * * Neither the name of ROBOTIS nor the names of its
- *   contributors may be used to endorse or promote products derived from
- *   this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
- * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
- * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- *******************************************************************************/
-
-/* Author: Kayman Jung */
-
-/*****************************************************************************
- ** Ifdefs
- *****************************************************************************/
-
-#ifndef thormang3_demo_QNODE_HPP_
-#define thormang3_demo_QNODE_HPP_
-
-/*****************************************************************************
- ** Includes
- *****************************************************************************/
-#ifndef Q_MOC_RUN
-
-#include <string>
-#include <sstream>
-#include <yaml-cpp/yaml.h>
-#include <Eigen/Dense>
-
-#include <QThread>
-#include <QStringListModel>
-
-#include <ros/ros.h>
-#include <ros/package.h>
-#include <std_msgs/Bool.h>
-#include <std_msgs/Int32.h>
-#include <std_msgs/String.h>
-#include <sensor_msgs/JointState.h>
-#include <geometry_msgs/Pose2D.h>
-#include <geometry_msgs/Pose.h>
-#include <geometry_msgs/PointStamped.h>
-#include <visualization_msgs/MarkerArray.h>
-#include <interactive_markers/interactive_marker_server.h>
-#include <visualization_msgs/InteractiveMarker.h>
-#include <eigen_conversions/eigen_msg.h>
-
-#include "humanoid_nav_msgs/PlanFootsteps.h"
-
-#include "robotis_controller_msgs/JointCtrlModule.h"
-#include "robotis_controller_msgs/GetJointModule.h"
-#include "robotis_controller_msgs/StatusMsg.h"
-
-#include "thormang3_feet_ft_module_msgs/BothWrench.h"
-
-#include "thormang3_manipulation_module_msgs/JointPose.h"
-#include "thormang3_manipulation_module_msgs/KinematicsPose.h"
-#include "thormang3_manipulation_module_msgs/GetJointPose.h"
-#include "thormang3_manipulation_module_msgs/GetKinematicsPose.h"
-
-#include "thormang3_walking_module_msgs/SetBalanceParam.h"
-#include "thormang3_walking_module_msgs/SetJointFeedBackGain.h"
-
-#include "thormang3_foot_step_generator/FootStepCommand.h"
-#include "thormang3_foot_step_generator/Step2DArray.h"
-
-#endif // Q_MOC_RUN
-/*****************************************************************************
- ** Namespaces
- *****************************************************************************/
-
-namespace thormang3_demo
-{
-
-/*****************************************************************************
- ** Class
- *****************************************************************************/
-
-class QNodeThor3 : public QThread
-{
-Q_OBJECT
-
- public:
-  enum LogLevel
-  {
-    Debug = 0,
-    Info = 1,
-    Warn = 2,
-    Error = 3,
-    Fatal = 4
-  };
-
-  //  enum ModuleIndex
-  //  {
-  //    Control_None = 0,
-  //    Control_Walking = 1,
-  //    Control_Manipulation = 2,
-  //    Control_Head = 3,
-  //  };
-
-  QNodeThor3(int argc, char** argv);
-  virtual ~QNodeThor3();
-
-  bool init();
-  void run();
-  QStringListModel* loggingModel()
-  {
-    return &logging_model_;
-  }
-  void log(const LogLevel& level, const std::string& msg, std::string sender = "Demo");
-  void clearLog();
-  void assembleLidar();
-  void enableControlModule(const std::string& mode);
-  bool getJointNameFromID(const int& id, std::string& joint_name);
-  bool getIDFromJointName(const std::string& joint_name, int& id);
-  bool getIDJointNameFromIndex(const int& index, int& id, std::string& joint_name);
-  std::string getModuleName(const int& index);
-  int getModuleIndex(const std::string& mode_name);
-  int getModuleTableSize();
-  int getJointTableSize();
-  void clearUsingModule();
-  bool isUsingModule(const std::string& module_name);
-  void moveInitPose();
-  void initFTCommand(std::string command);
-
-  // Head control
-  void setHeadJoint(double pan, double tilt);
-
-  // Manipulation
-  void sendInitPoseMsg(std_msgs::String msg);
-  void sendDestJointMsg(thormang3_manipulation_module_msgs::JointPose msg);
-  void sendIkMsg(thormang3_manipulation_module_msgs::KinematicsPose msg);
-  void sendGripperPosition(sensor_msgs::JointState msg);
-
-  // Walking
-  void setWalkingCommand(thormang3_foot_step_generator::FootStepCommand msg);
-  void setWalkingBalance(bool on_command);
-  void setWalkingBalanceParam(const double& gyro_gain, const double& ft_gain_ratio, const double& imu_time_const,
-                              const double& ft_time_const);
-  bool setFeedBackGain(); 
-
-  void setWalkingFootsteps();
-  void clearFootsteps();
-  void makeFootstepUsingPlanner();
-  void makeFootstepUsingPlanner(const geometry_msgs::Pose& target_foot_pose);
-  void visualizePreviewFootsteps(bool clear);
-
-  // motion
-  void playMotion(int motion_index, bool to_action_script = true);
-
-  // demo
-  void makeInteractiveMarker(const geometry_msgs::Pose& marker_pose);
-  void updateInteractiveMarker(const geometry_msgs::Pose& pose);
-  void getInteractiveMarkerPose();
-  void clearInteractiveMarker();
-  void manipulationDemo(const int& index);
-  void kickDemo(const std::string& kick_foot);
-
-  std::map<int, std::string> module_table_;
-  std::map<int, std::string> motion_table_;
-
-  std::string package_name_;
-
- public Q_SLOTS:
-  void getJointControlModule();
-  void getJointPose(std::string joint_name);
-  void getKinematicsPose(std::string group_name);
-  void getKinematicsPoseCallback(const geometry_msgs::Pose::ConstPtr& msg);
-  void setCurrentControlUI(int mode);
-
-Q_SIGNALS:
-  void loggingUpdated();
-  void rosShutdown();
-  void updatePresentJointControlModules(std::vector<int> mode);
-
-  // Manipulation
-  void updateCurrJoint(double value);
-  void updateCurrPos(double x, double y, double z);
-  void updateCurrOri(double x, double y, double z, double w);
-
-  // Head control
-  void updateHeadJointsAngle(double pan, double tilt);
-
-  // Interactive marker
-  void updateDemoPoint(const geometry_msgs::Point point);
-  void updateDemoPose(const geometry_msgs::Pose pose);
-
- private:
-  enum Control_Index
-  {
-    MODE_UI = 0,
-    WALKING_UI = 1,
-    MANIPULATION_UI = 2,
-    HEAD_CONTROL_UI = 3,
-    MOTION_UI = 4,
-    DEMO_UI = 5,
-  };
-
-  static const double DEGREE2RADIAN = M_PI / 180.0;
-  static const double RADIAN2DEGREE = 180.0 / M_PI;
-
-  void parseJointNameFromYaml(const std::string& path);
-  void parseMotionMapFromYaml(const std::string& path);
-  void refreshCurrentJointControlCallback(const robotis_controller_msgs::JointCtrlModule::ConstPtr& msg);
-  void
-  updateHeadJointStatesCallback(const sensor_msgs::JointState::ConstPtr& msg);
-  void initFTFootCallback(const thormang3_feet_ft_module_msgs::BothWrench::ConstPtr& msg);
-  void
-  statusMsgCallback(const robotis_controller_msgs::StatusMsg::ConstPtr& msg);
-  void poseCallback(const geometry_msgs::Pose::ConstPtr& msg);
-  void interactiveMarkerFeedback(const visualization_msgs::InteractiveMarkerFeedbackConstPtr& feedback);
-  void pointStampedCallback(const geometry_msgs::PointStamped::ConstPtr& msg);
-  void setBalanceParameter();
-  bool loadBalanceParameterFromYaml();
-  void turnOnBalance();
-  void turnOffBalance();
-  bool loadFeedbackGainFromYaml();
-
-  int init_argc_;
-  char** init_argv_;
-  bool debug_print_;
-  int current_control_ui_;
-
-  // demo : interactive marker
-  ros::Subscriber rviz_clicked_point_sub_;
-  std::string frame_id_;
-  std::string marker_name_;
-  geometry_msgs::Pose pose_from_ui_;
-  geometry_msgs::Pose current_pose_;
-  boost::shared_ptr<interactive_markers::InteractiveMarkerServer> interactive_marker_server_;
-  thormang3_walking_module_msgs::SetBalanceParam set_balance_param_srv_;
-  thormang3_walking_module_msgs::SetJointFeedBackGain set_joint_feedback_gain_srv_;
-
-  ros::Publisher init_pose_pub_;
-  ros::Publisher init_ft_pub_;
-  ros::Publisher module_control_pub_;
-  ros::Publisher module_control_preset_pub_;
-  ros::Subscriber status_msg_sub_;
-  ros::Subscriber init_ft_foot_sub_;
-  ros::Subscriber both_ft_foot_sub_;
-  ros::Subscriber current_module_control_sub_;
-  ros::ServiceClient get_module_control_client_;
-
-  ros::Publisher marker_pub_;
-  ros::Subscriber pose_sub_;
-
-  // Head
-  ros::Publisher move_lidar_pub_;
-  ros::Publisher set_head_joint_angle_pub_;
-  ros::Subscriber current_joint_states_sub_;
-
-  // Manipulation
-  ros::Publisher send_ini_pose_msg_pub_;
-  ros::Publisher send_des_joint_msg_pub_;
-  ros::Publisher send_ik_msg_pub_;
-  ros::Subscriber kenematics_pose_sub_;
-  ros::ServiceClient get_joint_pose_client_;
-  ros::ServiceClient get_kinematics_pose_client_;
-
-  ros::Publisher send_gripper_pub_;
-
-  // Walking
-  ros::ServiceClient humanoid_footstep_client_;
-  ros::ServiceClient set_balance_param_client_;
-  ros::ServiceClient set_joint_feedback_gain_client_;
-  ros::Publisher set_walking_command_pub_;
-  ros::Publisher set_walking_footsteps_pub_;
-  ros::Publisher set_walking_balance_pub_;
-
-  std::vector<geometry_msgs::Pose2D> preview_foot_steps_;
-  std::vector<int> preview_foot_types_;
-
-  // Action
-  ros::Publisher motion_index_pub_;
-  ros::Publisher motion_page_pub_;
-
-  ros::Time start_time_;
-  QStringListModel logging_model_;
-  std::map<int, std::string> id_joint_table_;
-  std::map<std::string, int> joint_id_table_;
-  std::map<int, std::string> index_mode_table_;
-  std::map<std::string, int> mode_index_table_;
-  std::map<std::string, bool> using_mode_table_;
-};
-
-}  // namespace thormang3_demo
-
-#endif /* thormang3_demo_QNODE_HPP_ */
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_demo/launch/thormang3_demo.launch b/ROBOTIS-THORMANG-OPC-for-git/thormang3_demo/launch/thormang3_demo.launch
deleted file mode 100644
index fa49704..0000000
--- a/ROBOTIS-THORMANG-OPC-for-git/thormang3_demo/launch/thormang3_demo.launch
+++ /dev/null
@@ -1,18 +0,0 @@
-<?xml version="1.0"?>
-
-<launch>
-  <arg name="args" default=""/>
-  <arg name="footstep_planner" default="true" />
-  <param name="demo_config" value="$(find thormang3_demo)/config/demo_config.yaml"/>
-  <param name="action_script_file_path"  value="$(find thormang3_action_script_player)/script/action_script.yaml"/> 
-  
-  <node name="thormang3_demo_opc" pkg="thormang3_demo" type="thormang3_demo" output="screen" args="$(arg args)">
-    <remap from="/robotis/demo/pose" to="/pose_panel/pose" />
-  </node>
-  
-  <node name="thormang3_foot_step_generator"  pkg="thormang3_foot_step_generator"  type="thormang3_foot_step_generator_node" output="screen"/>
-  <node name="thormang3_action_script_player" pkg="thormang3_action_script_player" type="thormang3_action_script_player"     output="screen"/>
-  
-  <include file="$(find thormang3_navigation)/launch/thormang3_footstep_planner.launch" if="$(arg footstep_planner)"/> 
-  
-</launch>
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_demo/package.xml b/ROBOTIS-THORMANG-OPC-for-git/thormang3_demo/package.xml
deleted file mode 100644
index 9c21719..0000000
--- a/ROBOTIS-THORMANG-OPC-for-git/thormang3_demo/package.xml
+++ /dev/null
@@ -1,49 +0,0 @@
-<?xml version="1.0"?>
-<package>
-  <name>thormang3_demo</name>
-  <version>0.2.0</version>
-  <description>
-
-     A GUI program for controlling a THORMANG3.
-     Initial posture, walking, manipulation, head control are available with this package.
-
-  </description>
-
-  <license>BSD</license>
-  <author email="kmjung@robotis.com">kayman</author>
-  <maintainer email="pyo@robotis.com">Pyo</maintainer>
-  <url type="bugtracker">https://github.com/ROBOTIS-GIT/ROBOTIS-THORMANG-OPC/issues</url>
-  <url type="repository">https://github.com/ROBOTIS-GIT/ROBOTIS-THORMANG-OPC</url>
-  <url type="website">http://wiki.ros.org/thormang3_demo</url>
-
-  <buildtool_depend>catkin</buildtool_depend>
-
-  <build_depend>qt_build</build_depend>
-  <build_depend>roscpp</build_depend>
-  <build_depend>libqt4-dev</build_depend>
-  <build_depend>eigen_conversions</build_depend>
-  <build_depend>thormang3_foot_step_generator</build_depend>
-  <build_depend>robotis_controller_msgs</build_depend>
-  <build_depend>thormang3_walking_module_msgs</build_depend>
-  <build_depend>thormang3_manipulation_module_msgs</build_depend>
-  <build_depend>thormang3_feet_ft_module_msgs</build_depend>
-  <build_depend>humanoid_nav_msgs</build_depend>
-  <build_depend>footstep_planner</build_depend>
-  <build_depend>interactive_markers</build_depend>
-  <build_depend>visualization_msgs</build_depend>
-
-  <run_depend>qt_build</run_depend>
-  <run_depend>roscpp</run_depend>
-  <run_depend>libqt4-dev</run_depend>
-  <run_depend>eigen_conversions</run_depend>
-  <run_depend>thormang3_foot_step_generator</run_depend>
-  <run_depend>robotis_controller_msgs</run_depend>
-  <run_depend>thormang3_walking_module_msgs</run_depend>
-  <run_depend>thormang3_manipulation_module_msgs</run_depend>
-  <run_depend>thormang3_feet_ft_module_msgs</run_depend>
-  <run_depend>humanoid_nav_msgs</run_depend>
-  <run_depend>footstep_planner</run_depend>
-  <run_depend>interactive_markers</run_depend>
-  <run_depend>visualization_msgs</run_depend>
-
-</package>
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_demo/resources/images.qrc b/ROBOTIS-THORMANG-OPC-for-git/thormang3_demo/resources/images.qrc
deleted file mode 100644
index e91e9dc..0000000
--- a/ROBOTIS-THORMANG-OPC-for-git/thormang3_demo/resources/images.qrc
+++ /dev/null
@@ -1,5 +0,0 @@
-<RCC>
-    <qresource prefix="/" >
-        <file>images/icon.png</file>
-    </qresource>
-</RCC>
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_demo/resources/images/icon.png b/ROBOTIS-THORMANG-OPC-for-git/thormang3_demo/resources/images/icon.png
deleted file mode 100644
index 541934e..0000000
Binary files a/ROBOTIS-THORMANG-OPC-for-git/thormang3_demo/resources/images/icon.png and /dev/null differ
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_demo/src/main.cpp b/ROBOTIS-THORMANG-OPC-for-git/thormang3_demo/src/main.cpp
deleted file mode 100644
index 00eea30..0000000
--- a/ROBOTIS-THORMANG-OPC-for-git/thormang3_demo/src/main.cpp
+++ /dev/null
@@ -1,58 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2016, ROBOTIS CO., LTD.
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- *
- * * Redistributions of source code must retain the above copyright notice, this
- *   list of conditions and the following disclaimer.
- *
- * * Redistributions in binary form must reproduce the above copyright notice,
- *   this list of conditions and the following disclaimer in the documentation
- *   and/or other materials provided with the distribution.
- *
- * * Neither the name of ROBOTIS nor the names of its
- *   contributors may be used to endorse or promote products derived from
- *   this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
- * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
- * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- *******************************************************************************/
-
-/* Author: Kayman Jung */
-
-/*****************************************************************************
- ** Includes
- *****************************************************************************/
-
-#include <QtGui>
-#include <QApplication>
-#include "../include/thormang3_demo/main_window.hpp"
-
-/*****************************************************************************
- ** Main
- *****************************************************************************/
-
-int main(int argc, char **argv)
-{
-
-  /*********************
-   ** Qt
-   **********************/
-  QApplication app(argc, argv);
-  thormang3_demo::MainWindow w(argc, argv);
-  w.show();
-  app.connect(&app, SIGNAL(lastWindowClosed()), &app, SLOT(quit()));
-  int result = app.exec();
-
-  return result;
-}
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_demo/src/main_window.cpp b/ROBOTIS-THORMANG-OPC-for-git/thormang3_demo/src/main_window.cpp
deleted file mode 100644
index 18908ef..0000000
--- a/ROBOTIS-THORMANG-OPC-for-git/thormang3_demo/src/main_window.cpp
+++ /dev/null
@@ -1,1189 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2016, ROBOTIS CO., LTD.
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- *
- * * Redistributions of source code must retain the above copyright notice, this
- *   list of conditions and the following disclaimer.
- *
- * * Redistributions in binary form must reproduce the above copyright notice,
- *   this list of conditions and the following disclaimer in the documentation
- *   and/or other materials provided with the distribution.
- *
- * * Neither the name of ROBOTIS nor the names of its
- *   contributors may be used to endorse or promote products derived from
- *   this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
- * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
- * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- *******************************************************************************/
-
-/* Author: Kayman Jung */
-
-/*****************************************************************************
- ** Includes
- *****************************************************************************/
-
-#include <QtGui>
-#include <QMessageBox>
-#include <iostream>
-#include "../include/thormang3_demo/main_window.hpp"
-
-/*****************************************************************************
- ** Namespaces
- *****************************************************************************/
-
-namespace thormang3_demo
-{
-
-using namespace Qt;
-
-/*****************************************************************************
- ** Implementation [MainWindow]
- *****************************************************************************/
-
-MainWindow::MainWindow(int argc, char** argv, QWidget *parent)
-    : QMainWindow(parent),
-      qnode_thor3_(argc, argv),
-      is_updating_(false)
-{
-  // code to DEBUG
-  debug_print_ = false;
-  demo_mode_ = false;
-
-  if (argc >= 2)
-  {
-    std::string args_code(argv[1]);
-    if (args_code == "debug")
-      debug_print_ = true;
-    else
-      debug_print_ = false;
-
-    if (args_code == "demo")
-      demo_mode_ = true;
-    else
-      demo_mode_ = false;
-  }
-
-  ui_.setupUi(this);  // Calling this incidentally connects all ui's triggers to on_...() callbacks in this class.
-  QObject::connect(ui_.actionAbout_Qt, SIGNAL(triggered(bool)), qApp, SLOT(aboutQt()));  // qApp is a global variable for the application
-
-  readSettings();
-  setWindowIcon(QIcon(":/images/icon.png"));
-
-  ui_.tab_manager->setCurrentIndex(0);  // ensure the first tab is showing - qt-designer should have this already hardwired, but often loses it (settings?).
-  QObject::connect(&qnode_thor3_, SIGNAL(rosShutdown()), this, SLOT(close()));
-
-  qRegisterMetaType<std::vector<int> >("std::vector<int>");
-  QObject::connect(&qnode_thor3_, SIGNAL(updatePresentJointControlModules(std::vector<int>)), this,
-                   SLOT(updatePresentJointModule(std::vector<int>)));
-  QObject::connect(&qnode_thor3_, SIGNAL(updateHeadJointsAngle(double,double)), this,
-                   SLOT(updateHeadJointsAngle(double,double)));
-
-  QObject::connect(ui_.head_pan_slider, SIGNAL(valueChanged(int)), this, SLOT(setHeadJointsAngle()));
-  QObject::connect(ui_.head_tilt_slider, SIGNAL(valueChanged(int)), this, SLOT(setHeadJointsAngle()));
-
-  QObject::connect(&qnode_thor3_, SIGNAL(updateCurrJoint(double)), this, SLOT(updateCurrJointSpinbox(double)));
-  QObject::connect(&qnode_thor3_, SIGNAL(updateCurrPos(double , double , double)), this,
-                   SLOT(updateCurrPosSpinbox(double , double , double)));
-  QObject::connect(&qnode_thor3_, SIGNAL(updateCurrOri(double , double , double, double)), this,
-                   SLOT(updateCurrOriSpinbox(double , double , double , double)));
-
-  QObject::connect(ui_.tabWidget_control, SIGNAL(currentChanged(int)), &qnode_thor3_, SLOT(setCurrentControlUI(int)));
-
-  qRegisterMetaType<geometry_msgs::Point>("geometry_msgs::Point");
-  qRegisterMetaType<geometry_msgs::Pose>("geometry_msgs::Pose");
-  connect(&qnode_thor3_, SIGNAL(updateDemoPoint(geometry_msgs::Point)), this,
-          SLOT(updatePointPanel(geometry_msgs::Point)));
-  connect(&qnode_thor3_, SIGNAL(updateDemoPose(geometry_msgs::Pose)), this, SLOT(updatePosePanel(geometry_msgs::Pose)));
-
-  /*********************
-   ** Logging
-   **********************/
-  ui_.view_logging->setModel(qnode_thor3_.loggingModel());
-  QObject::connect(&qnode_thor3_, SIGNAL(loggingUpdated()), this, SLOT(updateLoggingView()));
-
-  /*********************
-   ** Init
-   **********************/
-  qnode_thor3_.init();
-  initModeUnit();
-  setUserShortcut();
-  updateModuleUI();
-}
-
-MainWindow::~MainWindow()
-{
-}
-
-/*****************************************************************************
- ** Implementation [Slots]
- *****************************************************************************/
-
-void MainWindow::on_button_assemble_lidar_clicked(bool check)
-{
-  qnode_thor3_.assembleLidar();
-}
-void MainWindow::on_button_clear_log_clicked(bool check)
-{
-  qnode_thor3_.clearLog();
-}
-void MainWindow::on_button_init_pose_clicked(bool check)
-{
-  qnode_thor3_.moveInitPose();
-}
-
-void MainWindow::on_button_ft_air_clicked(bool check)
-{
-  qnode_thor3_.initFTCommand("ft_air");
-}
-void MainWindow::on_button_ft_gnd_clicked(bool check)
-{
-  qnode_thor3_.initFTCommand("ft_gnd");
-}
-void MainWindow::on_button_ft_calc_clicked(bool check)
-{
-  qnode_thor3_.initFTCommand("ft_send");
-  qnode_thor3_.log(QNodeThor3::Info, "Apply new FT config");
-}
-void MainWindow::on_button_ft_save_clicked(bool check)
-{
-  qnode_thor3_.initFTCommand("ft_save");
-  qnode_thor3_.log(QNodeThor3::Info, "Save FT config data.");
-}
-
-void MainWindow::on_tabWidget_control_currentChanged(int index)
-{
-  if (demo_mode_ == false)
-    return;
-
-  std::string tab_name = ui_.tabWidget_control->tabText(ui_.tabWidget_control->currentIndex()).toStdString();
-  if (tab_name != "Demo")
-    ui_.tabWidget_control->currentWidget()->setEnabled(false);
-}
-
-// Manipulation
-void MainWindow::on_inipose_button_clicked(bool check)
-{
-  std_msgs::String msg;
-  msg.data = "ini_pose";
-
-  qnode_thor3_.sendInitPoseMsg(msg);
-}
-
-void MainWindow::on_currjoint_button_clicked(bool check)
-{
-  qnode_thor3_.getJointPose(ui_.joint_combobox->currentText().toStdString());
-}
-
-void MainWindow::on_desjoint_button_clicked(bool check)
-{
-  thormang3_manipulation_module_msgs::JointPose msg;
-
-  msg.name = ui_.joint_combobox->currentText().toStdString();
-  msg.value = deg2rad<double>(ui_.joint_spinbox->value());
-
-  qnode_thor3_.sendDestJointMsg(msg);
-}
-
-void MainWindow::on_get_despos_button_clicked(bool check)
-{
-  double z_offset = 0.723;
-
-  updateCurrPosSpinbox(ui_.dSpinBox_marker_pos_x->value(), ui_.dSpinBox_marker_pos_y->value(),
-                       ui_.dSpinBox_marker_pos_z->value() + z_offset);
-
-  updateCurrOriSpinbox(ui_.dSpinBox_marker_ori_r->value(), ui_.dSpinBox_marker_ori_p->value(),
-                       ui_.dSpinBox_marker_ori_y->value());
-}
-
-void MainWindow::on_currpos_button_clicked(bool check)
-{
-  qnode_thor3_.getKinematicsPose(ui_.group_combobox->currentText().toStdString());
-}
-
-void MainWindow::on_despos_button_clicked(bool check)
-{
-  thormang3_manipulation_module_msgs::KinematicsPose msg;
-
-  msg.name = ui_.group_combobox->currentText().toStdString();
-
-  msg.pose.position.x = ui_.pos_x_spinbox->value();
-  msg.pose.position.y = ui_.pos_y_spinbox->value();
-  msg.pose.position.z = ui_.pos_z_spinbox->value();
-
-  // deg -> rad
-  double roll = deg2rad<double>(ui_.ori_roll_spinbox->value());
-  double pitch = deg2rad<double>(ui_.ori_pitch_spinbox->value());
-  double yaw = deg2rad<double>(ui_.ori_yaw_spinbox->value());
-
-  Eigen::Quaterniond orientation = rpy2quaternion(roll, pitch, yaw);
-
-  msg.pose.orientation.x = orientation.x();
-  msg.pose.orientation.y = orientation.y();
-  msg.pose.orientation.z = orientation.z();
-  msg.pose.orientation.w = orientation.w();
-
-  qnode_thor3_.sendIkMsg(msg);
-}
-
-void MainWindow::on_button_grip_on_clicked(bool check)
-{
-  setGripper(GRIPPER_ON_ANGLE, GRIPPER_TORQUE_LIMIT, ui_.gripper_comboBox->currentText().toStdString());
-}
-
-void MainWindow::on_button_grip_off_clicked(bool check)
-{
-  setGripper(GRIPPER_OFF_ANGLE, GRIPPER_TORQUE_LIMIT, ui_.gripper_comboBox->currentText().toStdString());
-}
-
-void MainWindow::on_A0_button_fl_clicked(bool check)
-{
-  sendWalkingCommand("turn left");
-}
-
-void MainWindow::on_A1_button_f_clicked(bool check)
-{
-  sendWalkingCommand("forward");
-}
-
-void MainWindow::on_A2_button_fr_clicked(bool check)
-{
-  sendWalkingCommand("turn right");
-}
-
-void MainWindow::on_B0_button_l_clicked(bool check)
-{
-  sendWalkingCommand("left");
-}
-
-void MainWindow::on_B1_button_stop_clicked(bool check)
-{
-  sendWalkingCommand("stop");
-}
-
-void MainWindow::on_B2_button_r_clicked(bool check)
-{
-  sendWalkingCommand("right");
-}
-
-void MainWindow::on_C0_button_bl_clicked(bool check)
-{
-}    // disable
-
-void MainWindow::on_C1_button_b_clicked(bool check)
-{
-  sendWalkingCommand("backward");
-}
-
-void MainWindow::on_C2_button_br_clicked(bool check)
-{
-}    // disable
-
-void MainWindow::on_button_balance_on_clicked(bool check)
-{
-  qnode_thor3_.setWalkingBalance(true);
-}
-
-void MainWindow::on_button_balance_off_clicked(bool check)
-{
-  qnode_thor3_.setWalkingBalance(false);
-}
-
-void MainWindow::on_button_feedback_gain_apply_clicked(bool check)
-{
-  qnode_thor3_.setFeedBackGain();
-}
-
-void MainWindow::on_A0_button_get_step_clicked(bool check)
-{
-  geometry_msgs::Pose target_pose;
-  target_pose.position.x = ui_.dSpinBox_marker_pos_x->value();
-  target_pose.position.y = ui_.dSpinBox_marker_pos_y->value();
-  target_pose.position.z = ui_.dSpinBox_marker_pos_z->value();
-
-  double roll = deg2rad<double>(ui_.dSpinBox_marker_ori_r->value());
-  double pitch = deg2rad<double>(ui_.dSpinBox_marker_ori_p->value());
-  double yaw = deg2rad<double>(ui_.dSpinBox_marker_ori_y->value());
-
-  Eigen::Quaterniond orientation = rpy2quaternion(roll, pitch, yaw);
-
-  target_pose.orientation.x = orientation.x();
-  target_pose.orientation.y = orientation.y();
-  target_pose.orientation.z = orientation.z();
-  target_pose.orientation.w = orientation.w();
-
-  // generate foot steps
-  qnode_thor3_.makeFootstepUsingPlanner(target_pose);
-
-  ui_.A1_button_clear_step->setEnabled(true);
-  ui_.A2_button_go_walking->setEnabled(true);
-}
-
-void MainWindow::on_A1_button_clear_step_clicked(bool check)
-{
-  qnode_thor3_.clearFootsteps();
-
-  ui_.A1_button_clear_step->setEnabled(false);
-  ui_.A2_button_go_walking->setEnabled(false);
-}
-
-void MainWindow::on_A2_button_go_walking_clicked(bool check)
-{
-  qnode_thor3_.setWalkingFootsteps();
-
-  ui_.A1_button_clear_step->setEnabled(false);
-  ui_.A2_button_go_walking->setEnabled(false);
-}
-
-void MainWindow::on_head_center_button_clicked(bool check)
-{
-  qnode_thor3_.log(QNodeThor3::Info, "Go Head init position");
-  setHeadJointsAngle(0.0, 0.0);
-}
-
-void MainWindow::on_dSpinBox_marker_pos_x_valueChanged(double value)
-{
-  updateInteractiveMarker();
-}
-
-void MainWindow::on_dSpinBox_marker_pos_y_valueChanged(double value)
-{
-  updateInteractiveMarker();
-}
-
-void MainWindow::on_dSpinBox_marker_pos_z_valueChanged(double value)
-{
-  updateInteractiveMarker();
-}
-
-void MainWindow::on_dSpinBox_marker_ori_r_valueChanged(double value)
-{
-  updateInteractiveMarker();
-}
-
-void MainWindow::on_dSpinBox_marker_ori_p_valueChanged(double value)
-{
-  updateInteractiveMarker();
-}
-
-void MainWindow::on_dSpinBox_marker_ori_y_valueChanged(double value)
-{
-  updateInteractiveMarker();
-}
-
-void MainWindow::on_button_marker_set_clicked()
-{
-  makeInteractiveMarker();
-}
-
-void MainWindow::on_button_marker_clear_clicked()
-{
-  clearMarkerPanel();
-}
-
-/////////////////////////////////////////////////
-//             Manupulation Demo
-/////////////////////////////////////////////////
-void MainWindow::on_button_manipulation_demo_0_clicked(bool check)
-{
-  // init pose : base
-  qnode_thor3_.moveInitPose();
-}
-
-void MainWindow::on_button_manipulation_demo_1_clicked(bool check)
-{
-  // manipulation mode
-  qnode_thor3_.enableControlModule("manipulation_module");
-  qnode_thor3_.enableControlModule("gripper_module");
-}
-
-void MainWindow::on_button_manipulation_demo_2_clicked(bool check)
-{
-  // manipulation init pose
-  on_inipose_button_clicked(false);
-}
-
-void MainWindow::on_button_manipulation_demo_3_clicked(bool check)
-{
-  // head control mode
-  qnode_thor3_.enableControlModule("head_control_module");
-
-  // wait for setting the module
-  usleep(10 * 1000);
-
-  // scan
-  qnode_thor3_.assembleLidar();
-}
-
-void MainWindow::on_button_manipulation_demo_4_clicked(bool check)
-{
-  // set interactive marker
-  geometry_msgs::Pose current_pose;
-  getPoseFromMarkerPanel(current_pose);
-
-  // set default value
-  if (current_pose.position.x == 0 && current_pose.position.y == 0 && current_pose.position.z == 0)
-  {
-    current_pose.position.x = 0.305;
-    current_pose.position.y = (ui_.comboBox_arm_group->currentText().toStdString() == "Right Arm") ? -0.3 : 0.3;
-    current_pose.position.z = 0.108;
-
-    updatePosePanel(current_pose);
-  }
-
-  qnode_thor3_.makeInteractiveMarker(current_pose);
-}
-
-void MainWindow::on_button_manipulation_demo_5_clicked(bool check)
-{
-  // send pose
-  thormang3_manipulation_module_msgs::KinematicsPose msg;
-  double z_offset = 0.723;
-
-  // arm group : left_arm_with_torso / right_arm_with_torso
-  std::string selected_arm = ui_.comboBox_arm_group->currentText().toStdString();
-  std::string arm_group = (selected_arm == "Right Arm") ? "right_arm_with_torso" : "left_arm_with_torso";
-  msg.name = arm_group;
-
-  msg.pose.position.x = ui_.dSpinBox_marker_pos_x->value() + ui_.dSpinBox_offset_x->value();
-  msg.pose.position.y = ui_.dSpinBox_marker_pos_y->value() + ui_.dSpinBox_offset_y->value();
-  msg.pose.position.z = ui_.dSpinBox_marker_pos_z->value() + ui_.dSpinBox_offset_z->value() + z_offset;
-
-  double roll = deg2rad<double>(ui_.dSpinBox_marker_ori_r->value());
-  double pitch = deg2rad<double>(ui_.dSpinBox_marker_ori_p->value());
-  double yaw = deg2rad<double>(ui_.dSpinBox_marker_ori_y->value());
-
-  Eigen::Quaterniond orientation = rpy2quaternion(roll, pitch, yaw);
-
-  msg.pose.orientation.x = orientation.x();
-  msg.pose.orientation.y = orientation.y();
-  msg.pose.orientation.z = orientation.z();
-  msg.pose.orientation.w = orientation.w();
-
-  qnode_thor3_.sendIkMsg(msg);
-
-  // clear marker and foot steps
-  qnode_thor3_.clearInteractiveMarker();
-  qnode_thor3_.clearFootsteps();
-}
-
-void MainWindow::on_button_manipulation_demo_6_clicked(bool check)
-{
-  // grip on : l_arm_grip / r_arm_grip
-  std::string arm_group =
-      (ui_.comboBox_arm_group->currentText().toStdString() == "Right Arm") ? "r_arm_grip" : "l_arm_grip";
-  setGripper(GRIPPER_ON_ANGLE, GRIPPER_TORQUE_LIMIT, arm_group);
-}
-
-void MainWindow::on_button_manipulation_demo_7_clicked(bool check)
-{
-  // grip off : l_arm_grip / r_arm_grip
-  std::string arm_group =
-      (ui_.comboBox_arm_group->currentText().toStdString() == "Right Arm") ? "r_arm_grip" : "l_arm_grip";
-  setGripper(GRIPPER_OFF_ANGLE, GRIPPER_TORQUE_LIMIT, arm_group);
-}
-
-/////////////////////////////////////////////////
-//                 Walking Demo
-/////////////////////////////////////////////////
-void MainWindow::on_button_walking_demo_0_clicked(bool check)
-{
-  // init pose : base
-  qnode_thor3_.moveInitPose();
-}
-
-void MainWindow::on_button_walking_demo_1_clicked(bool check)
-{
-  // head control mode
-  qnode_thor3_.enableControlModule("head_control_module");
-
-  // wait for setting the module
-  usleep(10 * 1000);
-
-  // scan
-  qnode_thor3_.assembleLidar();
-}
-
-void MainWindow::on_button_walking_demo_2_clicked(bool check)
-{
-  // walking mode
-  qnode_thor3_.enableControlModule("walking_module");
-
-  // wait for setting module
-  usleep(10 * 1000);
-
-  // balance on
-  qnode_thor3_.setWalkingBalance(true);
-}
-
-void MainWindow::on_button_walking_demo_3_clicked(bool check)
-{
-  // set interactive marker
-  makeInteractiveMarker();
-}
-
-void MainWindow::on_button_walking_demo_4_clicked(bool check)
-{
-  double y_offset = (ui_.comboBox_kick_foot->currentText().toStdString() == "Right Foot") ? 0.093 : -0.093;
-
-  geometry_msgs::Pose target_pose;
-  target_pose.position.x = ui_.dSpinBox_marker_pos_x->value();
-  target_pose.position.y = ui_.dSpinBox_marker_pos_y->value() + y_offset;
-  target_pose.position.z = ui_.dSpinBox_marker_pos_z->value();
-
-  double roll = deg2rad<double>(ui_.dSpinBox_marker_ori_r->value());
-  double pitch = deg2rad<double>(ui_.dSpinBox_marker_ori_p->value());
-  double yaw = deg2rad<double>(ui_.dSpinBox_marker_ori_y->value());
-
-  Eigen::Quaterniond orientation = rpy2quaternion(roll, pitch, yaw);
-
-  target_pose.orientation.x = orientation.x();
-  target_pose.orientation.y = orientation.y();
-  target_pose.orientation.z = orientation.z();
-  target_pose.orientation.w = orientation.w();
-
-  // generate foot steps
-  qnode_thor3_.makeFootstepUsingPlanner(target_pose);
-}
-
-void MainWindow::on_button_walking_demo_5_clicked(bool check)
-{
-  // start walking
-  qnode_thor3_.setWalkingFootsteps();
-
-  // clear marker and foot steps
-  qnode_thor3_.clearInteractiveMarker();
-  qnode_thor3_.clearFootsteps();
-}
-
-void MainWindow::on_button_walking_demo_6_clicked(bool check)
-{
-  // head control mode
-  qnode_thor3_.enableControlModule("head_control_module");
-
-  // wait for setting the module
-  usleep(10 * 1000);
-
-  // scan
-  qnode_thor3_.assembleLidar();
-}
-
-void MainWindow::on_button_walking_demo_7_clicked(bool check)
-{
-  // foot : right kick / left kick
-  std::string kick_command =
-      (ui_.comboBox_kick_foot->currentText().toStdString() == "Right Foot") ? "right kick" : "left kick";
-  qnode_thor3_.kickDemo(kick_command);
-}
-
-/////////////////////////////////////////////////
-//                Action Demo
-/////////////////////////////////////////////////
-void MainWindow::on_button_motion_demo_0_clicked(bool check)
-{
-  // init pose : base
-  qnode_thor3_.moveInitPose();
-}
-
-void MainWindow::on_button_motion_demo_1_clicked(bool check)
-{
-  // action mode
-  qnode_thor3_.enableControlModule("action_module");
-}
-
-/*****************************************************************************
- ** Implemenation [Slots][manually connected]
- *****************************************************************************/
-
-void MainWindow::updateLoggingView()
-{
-  ui_.view_logging->scrollToBottom();
-}
-
-// user shortcut
-void MainWindow::setUserShortcut()
-{
-  // Setup a signal mapper to avoid creating custom slots for each tab
-  QSignalMapper *sig_map = new QSignalMapper(this);
-
-  // Setup the shortcut for the first tab : Mode
-  QShortcut *short_tab1 = new QShortcut(QKeySequence("F1"), this);
-  connect(short_tab1, SIGNAL(activated()), sig_map, SLOT(map()));
-  sig_map->setMapping(short_tab1, 0);
-
-  // Setup the shortcut for the second tab : Manipulation
-  QShortcut *short_tab2 = new QShortcut(QKeySequence("F2"), this);
-  connect(short_tab2, SIGNAL(activated()), sig_map, SLOT(map()));
-  sig_map->setMapping(short_tab2, 1);
-
-  // Setup the shortcut for the third tab : Walking
-  QShortcut *short_tab3 = new QShortcut(QKeySequence("F3"), this);
-  connect(short_tab3, SIGNAL(activated()), sig_map, SLOT(map()));
-  sig_map->setMapping(short_tab3, 2);
-
-  // Setup the shortcut for the fouth tab : Head control
-  QShortcut *short_tab4 = new QShortcut(QKeySequence("F4"), this);
-  connect(short_tab4, SIGNAL(activated()), sig_map, SLOT(map()));
-  sig_map->setMapping(short_tab4, 3);
-
-  // Setup the shortcut for the fifth tab : Motion
-  QShortcut *short_tab5 = new QShortcut(QKeySequence("F5"), this);
-  connect(short_tab5, SIGNAL(activated()), sig_map, SLOT(map()));
-  sig_map->setMapping(short_tab5, 4);
-
-  // Demo tab
-  QShortcut *short_tab6 = new QShortcut(QKeySequence("F6"), this);
-  connect(short_tab6, SIGNAL(activated()), sig_map, SLOT(map()));
-  sig_map->setMapping(short_tab6, 5);
-
-  // Wire the signal mapper to the tab widget index change slot
-  connect(sig_map, SIGNAL(mapped(int)), ui_.tabWidget_control, SLOT(setCurrentIndex(int)));
-}
-
-void MainWindow::updatePresentJointModule(std::vector<int> mode)
-{
-  QList<QComboBox *> combo_children = ui_.widget_mode->findChildren<QComboBox *>();
-
-  for (int ix = 0; ix < combo_children.length(); ix++)
-  {
-    int control_index = mode.at(ix);
-    combo_children.at(ix)->setCurrentIndex(control_index);
-
-    if (debug_print_)
-    {
-      std::stringstream log_stream;
-      std::string joint_name;
-      int id;
-
-      std::string control_mode = combo_children.at(ix)->currentText().toStdString();
-
-      bool result = qnode_thor3_.getIDJointNameFromIndex(ix, id, joint_name);
-      if (result == true)
-        log_stream << "[" << (id < 10 ? "0" : "") << id << "] " << joint_name << " : " << control_mode;
-      else
-        log_stream << "id " << ix << " : " << control_mode;
-
-      qnode_thor3_.log(QNodeThor3::Info, log_stream.str());
-    }
-  }
-
-  // set module UI
-  updateModuleUI();
-}
-
-void MainWindow::updateModuleUI()
-{
-  if (debug_print_)
-    return;
-
-  for (int index = 0; index < qnode_thor3_.getModuleTableSize(); index++)
-  {
-    std::string mode = qnode_thor3_.getModuleName(index);
-    if (mode == "")
-      continue;
-
-    std::map<std::string, QList<QWidget *> >::iterator module_iter = module_ui_table_.find(mode);
-    if (module_iter == module_ui_table_.end())
-      continue;
-
-    QList<QWidget *> list = module_iter->second;
-    for (int ix = 0; ix < list.size(); ix++)
-    {
-      bool is_enable = qnode_thor3_.isUsingModule(mode);
-      list.at(ix)->setEnabled(is_enable);
-    }
-  }
-}
-
-// head control
-void MainWindow::updateHeadJointsAngle(double pan, double tilt)
-{
-  if (ui_.head_pan_slider->underMouse() == true)
-    return;
-  if (ui_.head_pan_spinbox->underMouse() == true)
-    return;
-  if (ui_.head_tilt_slider->underMouse() == true)
-    return;
-  if (ui_.head_tilt_spinbox->underMouse() == true)
-    return;
-
-  is_updating_ = true;
-
-  ui_.head_pan_slider->setValue(rad2deg<double>(pan));
-  ui_.head_tilt_slider->setValue(rad2deg<double>(tilt));
-
-  is_updating_ = false;
-}
-
-void MainWindow::setHeadJointsAngle()
-{
-  if (is_updating_ == true)
-    return;
-  qnode_thor3_.setHeadJoint(deg2rad<double>(ui_.head_pan_slider->value()),
-                            deg2rad<double>(ui_.head_tilt_slider->value()));
-}
-
-void MainWindow::setHeadJointsAngle(double pan, double tilt)
-{
-  qnode_thor3_.setHeadJoint(deg2rad<double>(pan), deg2rad<double>(tilt));
-}
-
-void MainWindow::playMotion(int motion_index)
-{
-  bool to_action_script = ui_.checkBox_action_script->isChecked();
-
-  qnode_thor3_.playMotion(motion_index, to_action_script);
-}
-
-// manipulation
-void MainWindow::updateCurrJointSpinbox(double value)
-{
-  ui_.joint_spinbox->setValue(rad2deg<double>(value));
-}
-
-void MainWindow::updateCurrPosSpinbox(double x, double y, double z)
-{
-  ui_.pos_x_spinbox->setValue(x);
-  ui_.pos_y_spinbox->setValue(y);
-  ui_.pos_z_spinbox->setValue(z);
-}
-
-void MainWindow::updateCurrOriSpinbox(double x, double y, double z, double w)
-{
-  Eigen::Quaterniond orientation(w, x, y, z);
-  Eigen::Vector3d euler = rad2deg<Eigen::Vector3d>(quaternion2rpy(orientation));
-
-  ui_.ori_roll_spinbox->setValue(euler[0]);
-  ui_.ori_pitch_spinbox->setValue(euler[1]);
-  ui_.ori_yaw_spinbox->setValue(euler[2]);
-}
-
-void MainWindow::updateCurrOriSpinbox(double r, double p, double y)
-{
-  ui_.ori_roll_spinbox->setValue(r);
-  ui_.ori_pitch_spinbox->setValue(p);
-  ui_.ori_yaw_spinbox->setValue(y);
-}
-
-void MainWindow::setGripper(const double angle_deg, const double torque_limit, const std::string &arm_type)
-{
-  sensor_msgs::JointState gripper_joint;
-  gripper_joint.name.push_back(arm_type);
-  gripper_joint.position.push_back(deg2rad<double>(angle_deg));
-  gripper_joint.effort.push_back(torque_limit);
-
-  qnode_thor3_.sendGripperPosition(gripper_joint);
-}
-
-// walking
-void MainWindow::sendWalkingCommand(const std::string &command)
-{
-  thormang3_foot_step_generator::FootStepCommand msg;
-
-  msg.command = command;
-  msg.step_num = ui_.A1_spinbox_step_num->value();
-  msg.step_time = ui_.AB1_spinbox_step_time->value();
-  msg.step_length = ui_.B1_spinbox_f_step_length->value();
-  msg.side_step_length = ui_.C1_spinbox_s_step_length->value();
-  msg.step_angle_rad = deg2rad<double>(ui_.D1_spinbox_r_angle->value());
-
-  qnode_thor3_.setWalkingCommand(msg);
-}
-
-// Update UI - position
-void MainWindow::updatePointPanel(const geometry_msgs::Point point)
-{
-  is_updating_ = true;
-
-  setPointToMarkerPanel(point);
-
-  ROS_INFO("Update Position Panel");
-  is_updating_ = false;
-}
-
-// Update UI - pose
-void MainWindow::updatePosePanel(const geometry_msgs::Pose pose)
-{
-  is_updating_ = true;
-
-  setPoseToMarkerPanel(pose);
-
-  ROS_INFO("Update Pose Panel");
-  is_updating_ = false;
-}
-
-void MainWindow::getPoseFromMarkerPanel(geometry_msgs::Pose &current)
-{
-  // position
-  current.position.x = ui_.dSpinBox_marker_pos_x->value();
-  current.position.y = ui_.dSpinBox_marker_pos_y->value();
-  current.position.z = ui_.dSpinBox_marker_pos_z->value();
-
-  // orientation
-  Eigen::Vector3d euler(ui_.dSpinBox_marker_ori_r->value(), ui_.dSpinBox_marker_ori_p->value(),
-                        ui_.dSpinBox_marker_ori_y->value());
-  Eigen::Quaterniond orientation = rpy2quaternion(deg2rad<Eigen::Vector3d>(euler));
-
-  tf::quaternionEigenToMsg(orientation, current.orientation);
-}
-
-void MainWindow::setPoseToMarkerPanel(const geometry_msgs::Pose &current)
-{
-  // position
-  ui_.dSpinBox_marker_pos_x->setValue(current.position.x);
-  ui_.dSpinBox_marker_pos_y->setValue(current.position.y);
-  ui_.dSpinBox_marker_pos_z->setValue(current.position.z);
-
-  // orientation
-  Eigen::Vector3d euler = rad2deg<Eigen::Vector3d>(quaternion2rpy(current.orientation));
-
-  ui_.dSpinBox_marker_ori_r->setValue(euler[0]);
-  ui_.dSpinBox_marker_ori_p->setValue(euler[1]);
-  ui_.dSpinBox_marker_ori_y->setValue(euler[2]);
-}
-
-void MainWindow::getPointFromMarkerPanel(geometry_msgs::Point &current)
-{
-  // position
-  current.x = ui_.dSpinBox_marker_pos_x->value();
-  current.y = ui_.dSpinBox_marker_pos_y->value();
-  current.z = ui_.dSpinBox_marker_pos_z->value();
-}
-
-void MainWindow::setPointToMarkerPanel(const geometry_msgs::Point &current)
-{
-  // position
-  ui_.dSpinBox_marker_pos_x->setValue(current.x);
-  ui_.dSpinBox_marker_pos_y->setValue(current.y);
-  ui_.dSpinBox_marker_pos_z->setValue(current.z);
-
-  // orientation
-  ui_.dSpinBox_marker_ori_r->setValue(0.0);
-  ui_.dSpinBox_marker_ori_p->setValue(0.0);
-  ui_.dSpinBox_marker_ori_y->setValue(0.0);
-}
-
-// make interactive marker
-void MainWindow::makeInteractiveMarker()
-{
-  geometry_msgs::Pose current_pose;
-  getPoseFromMarkerPanel(current_pose);
-
-  qnode_thor3_.makeInteractiveMarker(current_pose);
-}
-
-// update interactive marker pose from ui
-void MainWindow::updateInteractiveMarker()
-{
-  if (is_updating_ == true)
-    return;
-
-  geometry_msgs::Pose current_pose;
-  getPoseFromMarkerPanel(current_pose);
-
-  qnode_thor3_.updateInteractiveMarker(current_pose);
-}
-
-void MainWindow::clearMarkerPanel()
-{
-  geometry_msgs::Pose init_pose;
-  updatePosePanel(init_pose);
-
-  ROS_INFO("Clear Panel");
-
-  qnode_thor3_.clearInteractiveMarker();
-}
-
-/*****************************************************************************
- ** Implementation [Menu]
- *****************************************************************************/
-
-void MainWindow::on_actionAbout_triggered()
-{
-  QMessageBox::about(this, tr("About ..."), tr("<h2>THORMANG3 Demo</h2><p>Copyright Robotis</p>"));
-}
-
-/*****************************************************************************
- ** Implementation [Configuration]
- *****************************************************************************/
-
-void MainWindow::initModeUnit()
-{
-  int number_joint = qnode_thor3_.getJointTableSize();
-
-  // preset module button
-  QHBoxLayout *preset_layout = new QHBoxLayout;
-  QSignalMapper *signalMapper = new QSignalMapper(this);
-
-  // parse yaml : preset modules
-  for (std::map<int, std::string>::iterator iter = qnode_thor3_.module_table_.begin();
-      iter != qnode_thor3_.module_table_.end(); ++iter)
-  {
-    std::string preset_name = iter->second;
-    QPushButton *preset_button = new QPushButton(tr(preset_name.c_str()));
-    if (debug_print_)
-      std::cout << "name : " << preset_name << std::endl;
-
-    preset_layout->addWidget(preset_button);
-
-    signalMapper->setMapping(preset_button, preset_button->text());
-    QObject::connect(preset_button, SIGNAL(clicked()), signalMapper, SLOT(map()));
-  }
-
-  QObject::connect(signalMapper, SIGNAL(mapped(QString)), this, SLOT(enableModule(QString)));
-
-  ui_.widget_mode_preset->setLayout(preset_layout);
-
-  // joints
-  QGridLayout *grid_mod = new QGridLayout;
-  for (int ix = 0; ix < number_joint; ix++)
-  {
-    std::stringstream stream;
-    std::string joint;
-    int id;
-
-    bool result = false;
-    result = qnode_thor3_.getIDJointNameFromIndex(ix, id, joint);
-
-    if (result == false)
-      continue;
-
-    stream << "[" << (id < 10 ? "0" : "") << id << "] " << joint;
-    QLabel *label = new QLabel(tr(stream.str().c_str()));
-
-    QStringList list;
-    for (int index = 0; index < qnode_thor3_.getModuleTableSize(); index++)
-    {
-      std::string mode = qnode_thor3_.getModuleName(index);
-      if (mode != "")
-        list << mode.c_str();
-    }
-
-    QComboBox *combo = new QComboBox();
-    combo->setObjectName(tr(joint.c_str()));
-    combo->addItems(list);
-    combo->setEnabled(false);      // not changable
-    int row = ix / 2 + 1;
-    int col = (ix % 2) * 3;
-    grid_mod->addWidget(label, row, col, 1, 1);
-    grid_mod->addWidget(combo, row, col + 1, 1, 2);
-  }
-
-  // get buttons
-  QPushButton *get_mode_button = new QPushButton(tr("Get Mode"));
-  grid_mod->addWidget(get_mode_button, (number_joint / 2) + 2, 0, 1, 3);
-  QObject::connect(get_mode_button, SIGNAL(clicked(bool)), &qnode_thor3_, SLOT(getJointControlModule()));
-
-  ui_.widget_mode->setLayout(grid_mod);
-
-  // make module widget table
-  for (int index = 0; index < qnode_thor3_.getModuleTableSize(); index++)
-  {
-    std::string mode = qnode_thor3_.getModuleName(index);
-    if (mode == "")
-      continue;
-    std::string mode_reg = "*" + mode;
-
-    QRegExp rx(QRegExp(tr(mode_reg.c_str())));
-    rx.setPatternSyntax(QRegExp::Wildcard);
-
-    QList<QWidget *> list = ui_.centralwidget->findChildren<QWidget *>(rx);
-    module_ui_table_[mode] = list;
-
-    if (debug_print_)
-      std::cout << "Module widget : " << mode << " [" << list.size() << "]" << std::endl;
-  }
-
-  // make motion tab
-  if (qnode_thor3_.getModuleIndex("action_module") != -1)
-    initMotionUnit();
-}
-
-void MainWindow::initMotionUnit()
-{
-  // preset button
-  QGridLayout *motion_layout = new QGridLayout;
-  QGridLayout *demo_motion_layout = new QGridLayout;
-  QSignalMapper *signalMapper = new QSignalMapper(this);
-  QSignalMapper *demo_signalMapper = new QSignalMapper(this);
-
-  // yaml preset
-  int index = 0;
-  for (std::map<int, std::string>::iterator iter = qnode_thor3_.motion_table_.begin();
-      iter != qnode_thor3_.motion_table_.end(); ++iter)
-  {
-    int motion_index = iter->first;
-    std::string motion_name = iter->second;
-    QString q_motion_name = QString::fromStdString(motion_name);
-    QPushButton *motion_button = new QPushButton(q_motion_name);
-    QPushButton *demo_motion_button = new QPushButton(q_motion_name);
-
-    int size = (motion_index < 0) ? 2 : 1;
-    int row = index / 4;
-    int col = index % 4;
-    motion_layout->addWidget(motion_button, row, col, 1, size);
-    demo_motion_layout->addWidget(demo_motion_button, row, col, 1, size);
-
-    signalMapper->setMapping(motion_button, motion_index);
-    QObject::connect(motion_button, SIGNAL(clicked()), signalMapper, SLOT(map()));
-    demo_signalMapper->setMapping(demo_motion_button, motion_index);
-    QObject::connect(demo_motion_button, SIGNAL(clicked()), demo_signalMapper, SLOT(map()));
-
-    index += size;
-  }
-
-  int row = index / 4;
-  row = (index % 4 == 0) ? row : row + 1;
-  QSpacerItem *verticalSpacer = new QSpacerItem(20, 400, QSizePolicy::Minimum, QSizePolicy::Expanding);
-  motion_layout->addItem(verticalSpacer, row, 0, 1, 4);
-  QSpacerItem *demo_verticalSpacer = new QSpacerItem(20, 400, QSizePolicy::Minimum, QSizePolicy::Expanding);
-  demo_motion_layout->addItem(demo_verticalSpacer, row, 0, 1, 4);
-
-  QObject::connect(signalMapper, SIGNAL(mapped(int)), this, SLOT(playMotion(int)));
-  QObject::connect(demo_signalMapper, SIGNAL(mapped(int)), this, SLOT(playMotion(int)));
-
-  ui_.scroll_widget_motion->setLayout(motion_layout);
-  ui_.scroll_widget_demo_motion->setLayout(demo_motion_layout);
-}
-
-void MainWindow::enableModule(QString mode_name)
-{
-  qnode_thor3_.enableControlModule(mode_name.toStdString());
-}
-
-void MainWindow::readSettings()
-{
-  QSettings settings("Qt-Ros Package", "thormang3_demo");
-  restoreGeometry(settings.value("geometry").toByteArray());
-  restoreState(settings.value("windowState").toByteArray());
-}
-
-void MainWindow::writeSettings()
-{
-  QSettings settings("Qt-Ros Package", "thormang3_demo");
-  settings.setValue("geometry", saveGeometry());
-  settings.setValue("windowState", saveState());
-}
-
-void MainWindow::closeEvent(QCloseEvent *event)
-{
-  writeSettings();
-  QMainWindow::closeEvent(event);
-}
-
-/*****************************************************************************
- ** Implementation [Util]
- *****************************************************************************/
-// math : euler & quaternion & rotation mat
-Eigen::Vector3d MainWindow::rotation2rpy(const Eigen::MatrixXd &rotation)
-{
-  Eigen::Vector3d rpy;
-
-  rpy[0] = atan2(rotation.coeff(2, 1), rotation.coeff(2, 2));
-  rpy[1] = atan2(-rotation.coeff(2, 0), sqrt(pow(rotation.coeff(2, 1), 2) + pow(rotation.coeff(2, 2), 2)));
-  rpy[2] = atan2(rotation.coeff(1, 0), rotation.coeff(0, 0));
-
-  return rpy;
-}
-
-Eigen::MatrixXd MainWindow::rpy2rotation(const double &roll, const double &pitch, const double &yaw)
-{
-  Eigen::MatrixXd rotation = rotationZ(yaw) * rotationY(pitch) * rotationX(roll);
-
-  return rotation;
-}
-
-Eigen::Quaterniond MainWindow::rpy2quaternion(const Eigen::Vector3d &euler)
-{
-  return rpy2quaternion(euler[0], euler[1], euler[2]);
-}
-
-Eigen::Quaterniond MainWindow::rpy2quaternion(const double &roll, const double &pitch, const double &yaw)
-{
-  Eigen::MatrixXd rotation = rpy2rotation(roll, pitch, yaw);
-
-  Eigen::Matrix3d rotation3d;
-  rotation3d = rotation.block(0, 0, 3, 3);
-
-  Eigen::Quaterniond quaternion;
-
-  quaternion = rotation3d;
-
-  return quaternion;
-}
-
-Eigen::Quaterniond MainWindow::rotation2quaternion(const Eigen::MatrixXd &rotation)
-{
-  Eigen::Matrix3d rotation3d;
-
-  rotation3d = rotation.block(0, 0, 3, 3);
-
-  Eigen::Quaterniond quaternion;
-  quaternion = rotation3d;
-
-  return quaternion;
-}
-
-Eigen::Vector3d MainWindow::quaternion2rpy(const Eigen::Quaterniond &quaternion)
-{
-  Eigen::Vector3d rpy = rotation2rpy(quaternion.toRotationMatrix());
-
-  return rpy;
-}
-
-Eigen::Vector3d MainWindow::quaternion2rpy(const geometry_msgs::Quaternion &quaternion)
-{
-  Eigen::Quaterniond eigen_quaternion;
-  tf::quaternionMsgToEigen(quaternion, eigen_quaternion);
-
-  Eigen::Vector3d rpy = rotation2rpy(eigen_quaternion.toRotationMatrix());
-
-  return rpy;
-}
-
-Eigen::MatrixXd MainWindow::quaternion2rotation(const Eigen::Quaterniond &quaternion)
-{
-  Eigen::MatrixXd rotation = quaternion.toRotationMatrix();
-
-  return rotation;
-}
-
-Eigen::MatrixXd MainWindow::rotationX(const double &angle)
-{
-  Eigen::MatrixXd rotation(3, 3);
-
-  rotation << 1.0, 0.0, 0.0, 0.0, cos(angle), -sin(angle), 0.0, sin(angle), cos(angle);
-
-  return rotation;
-}
-
-Eigen::MatrixXd MainWindow::rotationY(const double &angle)
-{
-  Eigen::MatrixXd rotation(3, 3);
-
-  rotation << cos(angle), 0.0, sin(angle), 0.0, 1.0, 0.0, -sin(angle), 0.0, cos(angle);
-
-  return rotation;
-}
-
-Eigen::MatrixXd MainWindow::rotationZ(const double &angle)
-{
-  Eigen::MatrixXd rotation(3, 3);
-
-  rotation << cos(angle), -sin(angle), 0.0, sin(angle), cos(angle), 0.0, 0.0, 0.0, 1.0;
-
-  return rotation;
-}
-
-}  // namespace thormang3_demo
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_demo/src/qnode.cpp b/ROBOTIS-THORMANG-OPC-for-git/thormang3_demo/src/qnode.cpp
deleted file mode 100644
index 0cfb842..0000000
--- a/ROBOTIS-THORMANG-OPC-for-git/thormang3_demo/src/qnode.cpp
+++ /dev/null
@@ -1,1643 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2016, ROBOTIS CO., LTD.
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- *
- * * Redistributions of source code must retain the above copyright notice, this
- *   list of conditions and the following disclaimer.
- *
- * * Redistributions in binary form must reproduce the above copyright notice,
- *   this list of conditions and the following disclaimer in the documentation
- *   and/or other materials provided with the distribution.
- *
- * * Neither the name of ROBOTIS nor the names of its
- *   contributors may be used to endorse or promote products derived from
- *   this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
- * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
- * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- *******************************************************************************/
-
-/* Author: Kayman Jung */
-
-/*****************************************************************************
- ** Includes
- *****************************************************************************/
-
-#include "../include/thormang3_demo/qnode.hpp"
-
-/*****************************************************************************
- ** Namespaces
- *****************************************************************************/
-
-namespace thormang3_demo
-{
-
-/*****************************************************************************
- ** Implementation
- *****************************************************************************/
-
-QNodeThor3::QNodeThor3(int argc, char** argv)
-    : init_argc_(argc),
-      init_argv_(argv),
-      marker_name_("THORMANG3_demo_marker"),
-      frame_id_("pelvis_link")
-{
-  // code to DEBUG
-  debug_print_ = false;
-
-  if (argc >= 2)
-  {
-    std::string debug_code(argv[1]);
-    if (debug_code == "debug")
-      debug_print_ = true;
-    else
-      debug_print_ = false;
-  }
-}
-
-QNodeThor3::~QNodeThor3()
-{
-  if (ros::isStarted())
-  {
-    ros::shutdown();  // explicitly needed since we use ros::start();
-    ros::waitForShutdown();
-  }
-
-  wait();
-}
-
-bool QNodeThor3::init()
-{
-  ros::init(init_argc_, init_argv_, "thormang3_demo");
-
-  if (ros::master::check() == false)
-  {
-    return false;
-  }
-
-  ros::start();  // explicitly needed since our nodehandle is going out of scope.
-
-  ros::NodeHandle nh;
-
-  package_name_ = ros::package::getPath("thormang3_demo");
-
-  // Add your ros communications here.
-  status_msg_sub_ = nh.subscribe("/robotis/status", 10, &QNodeThor3::statusMsgCallback, this);
-  current_module_control_sub_ = nh.subscribe("/robotis/present_joint_ctrl_modules", 10,
-                                             &QNodeThor3::refreshCurrentJointControlCallback, this);
-  current_joint_states_sub_ = nh.subscribe("/robotis/present_joint_states", 10,
-                                           &QNodeThor3::updateHeadJointStatesCallback, this);
-
-  get_module_control_client_ = nh.serviceClient<robotis_controller_msgs::GetJointModule>(
-      "/robotis/get_present_joint_ctrl_modules");
-
-  move_lidar_pub_ = nh.advertise<std_msgs::String>("/robotis/head_control/move_lidar", 0);
-  module_control_pub_ = nh.advertise<robotis_controller_msgs::JointCtrlModule>("/robotis/set_joint_ctrl_modules", 0);
-  module_control_preset_pub_ = nh.advertise<std_msgs::String>("/robotis/enable_ctrl_module", 0);
-  init_pose_pub_ = nh.advertise<std_msgs::String>("/robotis/base/ini_pose", 0);
-  init_ft_pub_ = nh.advertise<std_msgs::String>("/robotis/feet_ft/ft_calib_command", 0);
-
-  init_ft_foot_sub_ = nh.subscribe("/robotis/feet_ft/both_ft_value", 10, &QNodeThor3::initFTFootCallback, this);
-
-  // demo
-  rviz_clicked_point_sub_ = nh.subscribe("clicked_point", 0, &QNodeThor3::pointStampedCallback, this);
-  interactive_marker_server_.reset(new interactive_markers::InteractiveMarkerServer("THORMANG_Pose", "", false));
-
-  // Manipulation
-  kenematics_pose_sub_ = nh.subscribe("/thormang3_demo/ik_target_pose", 10, &QNodeThor3::getKinematicsPoseCallback,
-                                      this);
-
-  send_ini_pose_msg_pub_ = nh.advertise<std_msgs::String>("/robotis/manipulation/ini_pose_msg", 0);
-  send_des_joint_msg_pub_ = nh.advertise<thormang3_manipulation_module_msgs::JointPose>(
-      "/robotis/manipulation/joint_pose_msg", 0);
-  send_ik_msg_pub_ = nh.advertise<thormang3_manipulation_module_msgs::KinematicsPose>(
-      "/robotis/manipulation/kinematics_pose_msg", 0);
-
-  get_joint_pose_client_ = nh.serviceClient<thormang3_manipulation_module_msgs::GetJointPose>(
-      "/robotis/manipulation/get_joint_pose");
-  get_kinematics_pose_client_ = nh.serviceClient<thormang3_manipulation_module_msgs::GetKinematicsPose>(
-      "/robotis/manipulation/get_kinematics_pose");
-  send_gripper_pub_ = nh.advertise<sensor_msgs::JointState>("/robotis/gripper/joint_pose_msg", 0);
-
-  // Walking
-  set_balance_param_client_ = nh.serviceClient<thormang3_walking_module_msgs::SetBalanceParam>(
-      "/robotis/walking/set_balance_param");
-  set_joint_feedback_gain_client_ = nh.serviceClient<thormang3_walking_module_msgs::SetJointFeedBackGain>("/robotis/walking/joint_feedback_gain");
-  set_walking_command_pub_ = nh.advertise<thormang3_foot_step_generator::FootStepCommand>(
-      "/robotis/thormang3_foot_step_generator/walking_command", 0);
-  set_walking_footsteps_pub_ = nh.advertise<thormang3_foot_step_generator::Step2DArray>(
-      "/robotis/thormang3_foot_step_generator/footsteps_2d", 0);
-  set_walking_balance_pub_ = nh.advertise<std_msgs::Bool>("/robotis/thormang3_foot_step_generator/balance_command", 0);
-
-  humanoid_footstep_client_ = nh.serviceClient<humanoid_nav_msgs::PlanFootsteps>("plan_footsteps");
-  marker_pub_ = nh.advertise<visualization_msgs::MarkerArray>("/robotis/demo/foot_step_marker", 0);
-  pose_sub_ = nh.subscribe("/robotis/demo/pose", 10, &QNodeThor3::poseCallback, this);
-
-  // Head control
-  set_head_joint_angle_pub_ = nh.advertise<sensor_msgs::JointState>("/robotis/head_control/set_joint_states", 0);
-
-  // Action
-  motion_index_pub_ = nh.advertise<std_msgs::Int32>("/robotis/demo/action_index", 0);
-  motion_page_pub_ = nh.advertise<std_msgs::Int32>("/robotis/action/page_num", 0);
-
-  // Config
-  std::string default_config_path = ros::package::getPath("thormang3_demo") + "/config/demo_config.yaml";
-  std::string config_path = nh.param<std::string>("demo_config", default_config_path);
-  parseJointNameFromYaml(config_path);
-
-  std::string motion_path = ros::package::getPath("thormang3_demo") + "/config/motion.yaml";
-  parseMotionMapFromYaml(motion_path);
-
-  // set start time
-  start_time_ = ros::Time::now();
-
-  // start qthread
-  start();
-
-  return true;
-}
-
-void QNodeThor3::run()
-{
-  ros::Rate loop_rate(100);
-
-  while (ros::ok())
-  {
-    ros::spinOnce();
-    loop_rate.sleep();
-  }
-
-  interactive_marker_server_.reset();
-
-  std::cout << "Ros shutdown, proceeding to close the gui." << std::endl;
-  Q_EMIT rosShutdown();  // used to signal the gui for a shutdown (useful to roslaunch)
-}
-
-void QNodeThor3::parseJointNameFromYaml(const std::string &path)
-{
-  YAML::Node doc;
-  try
-  {
-    // load yaml
-    doc = YAML::LoadFile(path.c_str());
-  } catch (const std::exception& e)
-  {
-    ROS_ERROR("Fail to load id_joint table yaml.");
-    return;
-  }
-
-  // parse id_joint table
-  YAML::Node id_sub_node = doc["id_joint"];
-  for (YAML::iterator yaml_it = id_sub_node.begin(); yaml_it != id_sub_node.end(); ++yaml_it)
-  {
-    int id;
-    std::string joint_name;
-
-    id = yaml_it->first.as<int>();
-    joint_name = yaml_it->second.as<std::string>();
-
-    id_joint_table_[id] = joint_name;
-    joint_id_table_[joint_name] = id;
-
-    ROS_DEBUG_STREAM_COND(debug_print_, "Joint ID : " << id << " - " << joint_name);
-  }
-
-  // parse module
-  std::vector<std::string> modules = doc["module_list"].as<std::vector<std::string> >();
-
-  int module_index = 0;
-  for (std::vector<std::string>::iterator module_it = modules.begin(); module_it != modules.end(); ++module_it)
-  {
-    std::string module_name = *module_it;
-
-    index_mode_table_[module_index] = module_name;
-    mode_index_table_[module_name] = module_index++;
-
-    using_mode_table_[module_name] = false;
-  }
-
-  // parse module_joint preset
-  YAML::Node sub_node = doc["module_button"];
-  for (YAML::iterator button_it = sub_node.begin(); button_it != sub_node.end(); ++button_it)
-  {
-    int key;
-    std::string module_name;
-
-    key = button_it->first.as<int>();
-    module_name = button_it->second.as<std::string>();
-
-    module_table_[key] = module_name;
-
-    ROS_DEBUG_STREAM_COND(debug_print_, "Preset : " << module_name);
-  }
-}
-
-void QNodeThor3::parseMotionMapFromYaml(const std::string &path)
-{
-  YAML::Node doc;
-  try
-  {
-    // load yaml
-    doc = YAML::LoadFile(path.c_str());
-  } catch (const std::exception& e)
-  {
-    ROS_ERROR("Fail to load motion yaml.");
-    return;
-  }
-
-  // parse motion_table
-  YAML::Node motion_sub_node = doc["motion"];
-  for (YAML::iterator motion_it = motion_sub_node.begin(); motion_it != motion_sub_node.end(); ++motion_it)
-  {
-    int motion_index;
-    std::string motion_name;
-
-    motion_index = motion_it->first.as<int>();
-    motion_name = motion_it->second.as<std::string>();
-
-    motion_table_[motion_index] = motion_name;
-
-    ROS_DEBUG_STREAM_COND(debug_print_, "Motion Index : " << motion_index << " - " << motion_name);
-  }
-}
-
-// joint id -> joint name
-bool QNodeThor3::getJointNameFromID(const int &id, std::string &joint_name)
-{
-  std::map<int, std::string>::iterator map_it;
-
-  map_it = id_joint_table_.find(id);
-  if (map_it == id_joint_table_.end())
-    return false;
-
-  joint_name = map_it->second;
-  return true;
-}
-
-// joint name -> joint id
-bool QNodeThor3::getIDFromJointName(const std::string &joint_name, int &id)
-{
-  std::map<std::string, int>::iterator map_it;
-
-  map_it = joint_id_table_.find(joint_name);
-  if (map_it == joint_id_table_.end())
-    return false;
-
-  id = map_it->second;
-  return true;
-}
-
-// map index -> joint id & joint name
-bool QNodeThor3::getIDJointNameFromIndex(const int &index, int &id, std::string &joint_name)
-{
-  std::map<int, std::string>::iterator map_it;
-
-  int count = 0;
-  for (map_it = id_joint_table_.begin(); map_it != id_joint_table_.end(); ++map_it, count++)
-  {
-    if (index == count)
-    {
-      id = map_it->first;
-      joint_name = map_it->second;
-      return true;
-    }
-  }
-
-  return false;
-}
-
-// mode(module) index -> mode(module) name
-std::string QNodeThor3::getModuleName(const int &index)
-{
-  std::string mode = "";
-  std::map<int, std::string>::iterator map_it = index_mode_table_.find(index);
-
-  if (map_it != index_mode_table_.end())
-    mode = map_it->second;
-
-  return mode;
-}
-
-// mode(module) name -> mode(module) index, fail to find out :-1
-int QNodeThor3::getModuleIndex(const std::string &mode_name)
-{
-  int mode_index = -1;
-  std::map<std::string, int>::iterator map_it = mode_index_table_.find(mode_name);
-
-  if (map_it != mode_index_table_.end())
-    mode_index = map_it->second;
-
-  return mode_index;
-}
-
-// number of mode(module)s
-int QNodeThor3::getModuleTableSize()
-{
-  return index_mode_table_.size();
-}
-
-// number of joints
-int QNodeThor3::getJointTableSize()
-{
-  return id_joint_table_.size();
-}
-
-void QNodeThor3::clearUsingModule()
-{
-  for (std::map<std::string, bool>::iterator map_it = using_mode_table_.begin(); map_it != using_mode_table_.end();
-      ++map_it)
-    map_it->second = false;
-}
-
-bool QNodeThor3::isUsingModule(const std::string &module_name)
-{
-  std::map<std::string, bool>::iterator map_it = using_mode_table_.find(module_name);
-
-  if (map_it == using_mode_table_.end())
-    return false;
-
-  return map_it->second;
-}
-
-void QNodeThor3::setCurrentControlUI(int mode)
-{
-  current_control_ui_ = mode;
-
-  ROS_INFO("Current UI : %d", mode);
-}
-
-// move to init pose : base module
-void QNodeThor3::moveInitPose()
-{
-  std_msgs::String init_msg;
-  init_msg.data = "ini_pose";
-
-  init_pose_pub_.publish(init_msg);
-
-  log(Info, "Go to robot initial pose.");
-}
-
-void QNodeThor3::initFTCommand(std::string command)
-{
-  std_msgs::String ft_msg;
-  ft_msg.data = command;
-
-  init_ft_pub_.publish(ft_msg);
-}
-
-// move head to assemble 3d lidar(pointcloud)
-void QNodeThor3::assembleLidar()
-{
-  std_msgs::String lidar_msg;
-  lidar_msg.data = "start";
-
-  move_lidar_pub_.publish(lidar_msg);
-  log(Info, "Publish move_lidar topic");
-}
-
-// enable mode(module)
-void QNodeThor3::enableControlModule(const std::string &mode)
-{
-  std_msgs::String msg;
-  msg.data = mode;
-
-  module_control_preset_pub_.publish(msg);
-
-  std::stringstream ss;
-  ss << "Set Mode : " << mode;
-  log(Info, ss.str());
-}
-
-// get current mode(module) of joints
-void QNodeThor3::getJointControlModule()
-{
-  robotis_controller_msgs::GetJointModule get_joint;
-  std::map<std::string, int> service_map;
-
-  // get_joint.request
-  std::map<int, std::string>::iterator map_it;
-  int index = 0;
-  for (map_it = id_joint_table_.begin(); map_it != id_joint_table_.end(); ++map_it, index++)
-  {
-    get_joint.request.joint_name.push_back(map_it->second);
-    service_map[map_it->second] = index;
-  }
-
-  if (get_module_control_client_.call(get_joint))
-  {
-    // get_joint.response
-    std::vector<int> modules;
-    modules.resize(getJointTableSize());
-
-    // clear current using modules
-    clearUsingModule();
-
-    for (int ix = 0; ix < get_joint.response.joint_name.size(); ix++)
-    {
-      std::string joint_name = get_joint.response.joint_name[ix];
-      std::string module_name = get_joint.response.module_name[ix];
-
-      std::map<std::string, int>::iterator service_iter = service_map.find(joint_name);
-      if (service_iter == service_map.end())
-        continue;
-
-      index = service_iter->second;
-
-      service_iter = mode_index_table_.find(module_name);
-      if (service_iter == mode_index_table_.end())
-        continue;
-
-      ROS_DEBUG_STREAM_COND(debug_print_, "joint[" << ix << "] : " << service_iter->second);
-
-      modules.at(index) = service_iter->second;
-
-      std::map<std::string, bool>::iterator module_iter = using_mode_table_.find(module_name);
-      if (module_iter != using_mode_table_.end())
-        module_iter->second = true;
-    }
-
-    // update ui
-    Q_EMIT updatePresentJointControlModules(modules);
-    log(Info, "Get current Mode");
-  }
-  else
-    log(Error, "Fail to get current joint control module.");
-}
-
-void QNodeThor3::refreshCurrentJointControlCallback(const robotis_controller_msgs::JointCtrlModule::ConstPtr &msg)
-{
-  ROS_INFO("set current joint module");
-
-  std::vector<int> modules;
-  modules.resize(getJointTableSize());
-
-  std::map<std::string, int> joint_module;
-
-  // clear current using modules
-  clearUsingModule();
-
-  for (int ix = 0; ix < msg->joint_name.size(); ix++)
-  {
-    std::string joint_name = msg->joint_name[ix];
-    std::string module_name = msg->module_name[ix];
-
-    joint_module[joint_name] = getModuleIndex(module_name);
-
-    std::map<std::string, bool>::iterator module_iter = using_mode_table_.find(module_name);
-    if (module_iter != using_mode_table_.end())
-      module_iter->second = true;
-  }
-
-  for (int ix = 0; ix < getJointTableSize(); ix++)
-  {
-    int id = 0;
-    std::string joint_name = "";
-
-    if (getIDJointNameFromIndex(ix, id, joint_name) == false)
-      continue;
-
-    std::map<std::string, int>::iterator module_iter = joint_module.find(joint_name);
-    if (module_iter == joint_module.end())
-      continue;
-
-    ROS_DEBUG_STREAM_COND(debug_print_, "joint[" << ix << "] : " << module_iter->second);
-    modules.at(ix) = module_iter->second;
-  }
-
-  // update ui
-  Q_EMIT updatePresentJointControlModules(modules);
-
-  log(Info, "Applied Mode", "Manager");
-}
-
-void QNodeThor3::updateHeadJointStatesCallback(const sensor_msgs::JointState::ConstPtr &msg)
-{
-  double head_pan, head_tilt;
-  int count_getting_joint = 0;
-
-  for (int ix = 0; ix < msg->name.size(); ix++)
-  {
-    if (msg->name[ix] == "head_y")
-    {
-      head_pan = -msg->position[ix];
-      count_getting_joint += 1;
-    }
-    else if (msg->name[ix] == "head_p")
-    {
-      head_tilt = -msg->position[ix];
-      count_getting_joint += 1;
-    }
-
-    if (count_getting_joint == 2)
-      break;
-  }
-
-  if (count_getting_joint > 0)
-    Q_EMIT updateHeadJointsAngle(head_pan, head_tilt);
-}
-
-void QNodeThor3::initFTFootCallback(const thormang3_feet_ft_module_msgs::BothWrench::ConstPtr &msg)
-{
-  std::stringstream ss;
-  ss << "Type : " << msg->name << std::endl;
-  ss << " - Right - " << std::endl << msg->right << std::endl;
-  ss << " - Left - " << std::endl << msg->left;
-
-  log(Info, ss.str());
-}
-
-void QNodeThor3::setHeadJoint(double pan, double tilt)
-{
-  sensor_msgs::JointState head_angle_msg;
-
-  head_angle_msg.name.push_back("head_y");
-  head_angle_msg.name.push_back("head_p");
-
-  head_angle_msg.position.push_back(-pan);
-  head_angle_msg.position.push_back(-tilt);
-
-  set_head_joint_angle_pub_.publish(head_angle_msg);
-}
-
-// Manipulation
-void QNodeThor3::sendInitPoseMsg(std_msgs::String msg)
-{
-  send_ini_pose_msg_pub_.publish(msg);
-
-  log(Info, "Send Ini. Pose");
-}
-
-void QNodeThor3::sendDestJointMsg(thormang3_manipulation_module_msgs::JointPose msg)
-{
-  send_des_joint_msg_pub_.publish(msg);
-
-  log(Info, "Set Des. Joint Vale");
-
-  std::stringstream log_msg;
-
-  log_msg << " \n " << "joint name : " << msg.name << " \n " << "joint value : " << msg.value * RADIAN2DEGREE << " \n ";
-
-  log(Info, log_msg.str());
-}
-
-void QNodeThor3::sendIkMsg(thormang3_manipulation_module_msgs::KinematicsPose msg)
-{
-  send_ik_msg_pub_.publish(msg);
-
-  log(Info, "Solve Inverse Kinematics");
-  log(Info, "Set Des. End Effector's Pose : ");
-
-  std::stringstream log_msgs;
-
-  log_msgs << " \n " << "group name : " << msg.name << " \n " << "des. pos. x : " << msg.pose.position.x << " \n "
-           << "des. pos. y : " << msg.pose.position.y << " \n " << "des. pos. z : " << msg.pose.position.z << " \n "
-           << "des. ori. x : " << msg.pose.orientation.x << " \n " << "des. ori. y : " << msg.pose.orientation.y
-           << " \n " << "des. ori. z : " << msg.pose.orientation.z << " \n " << "des. ori. w : "
-           << msg.pose.orientation.w << " \n ";
-
-  log(Info, log_msgs.str());
-}
-
-void QNodeThor3::sendGripperPosition(sensor_msgs::JointState msg)
-{
-  // publish gripper angle
-  send_gripper_pub_.publish(msg);
-}
-
-void QNodeThor3::getJointPose(std::string joint_name)
-{
-  thormang3_manipulation_module_msgs::GetJointPose get_joint_pose;
-
-  // requeset
-  get_joint_pose.request.joint_name = joint_name;
-
-  log(Info, "Get Curr. Joint Value");
-
-  std::stringstream log_msg;
-
-  log_msg << " \n " << "joint name : " << joint_name << " \n ";
-
-  log(Info, log_msg.str());
-
-  //response
-  if (get_joint_pose_client_.call(get_joint_pose))
-  {
-    double joint_value = get_joint_pose.response.joint_value;
-
-    log(Info, "Joint Curr. Value");
-
-    std::stringstream log_msg;
-
-    log_msg << " \n " << "curr. value : " << joint_value << " \n ";
-
-    log(Info, log_msg.str());
-
-    Q_EMIT updateCurrJoint(joint_value);
-  }
-  else
-    log(Error, "fail to get joint pose.");
-}
-
-void QNodeThor3::getKinematicsPose(std::string group_name)
-{
-  thormang3_manipulation_module_msgs::GetKinematicsPose get_kinematics_pose;
-
-  //request
-  get_kinematics_pose.request.group_name = group_name;
-
-  log(Info, "Solve Forward Kinematics");
-
-  log(Info, "Get Curr. End Effector's Pose");
-
-  std::stringstream log_msg;
-
-  log_msg << " \n " << "group name : " << group_name << " \n ";
-
-  log(Info, log_msg.str());
-
-  //response
-  if (get_kinematics_pose_client_.call(get_kinematics_pose))
-  {
-    double pos_x = get_kinematics_pose.response.group_pose.position.x;
-    double pos_y = get_kinematics_pose.response.group_pose.position.y;
-    double pos_z = get_kinematics_pose.response.group_pose.position.z;
-
-    double ori_x = get_kinematics_pose.response.group_pose.orientation.x;
-    double ori_y = get_kinematics_pose.response.group_pose.orientation.y;
-    double ori_z = get_kinematics_pose.response.group_pose.orientation.z;
-    double ori_w = get_kinematics_pose.response.group_pose.orientation.w;
-
-    log(Info, "End Effector Curr. Pose : ");
-
-    std::stringstream log_msg;
-
-    log_msg << " \n " << "curr. pos. x : " << pos_x << " \n " << "curr. pos. y : " << pos_y << " \n "
-            << "curr. pos. z : " << pos_z << " \n " << "curr. ori. w : " << ori_w << " \n " << "curr. ori. x : "
-            << ori_x << " \n " << "curr. ori. y : " << ori_y << " \n " << "curr. ori. z : " << ori_z << " \n ";
-
-    log(Info, log_msg.str());
-
-    Q_EMIT updateCurrPos(pos_x, pos_y, pos_z);
-    Q_EMIT updateCurrOri(ori_x, ori_y, ori_z, ori_w);
-  }
-  else
-    log(Error, "fail to get kinematics pose.");
-}
-
-void QNodeThor3::getKinematicsPoseCallback(const geometry_msgs::Pose::ConstPtr &msg)
-{
-  double z_offset = 0.801;
-  Q_EMIT updateCurrPos(msg->position.x, msg->position.y, msg->position.z + z_offset);
-  Q_EMIT updateCurrOri(msg->orientation.x, msg->orientation.y, msg->orientation.z, msg->orientation.w);
-}
-
-// Walking
-void QNodeThor3::setWalkingCommand(thormang3_foot_step_generator::FootStepCommand msg)
-{
-  set_walking_command_pub_.publish(msg);
-
-  std::stringstream ss;
-  ss << "Set Walking Command : " << msg.command << std::endl;
-  ss << "- Number of Step : " << msg.step_num << std::endl;
-  ss << "- Step Length : " << msg.step_length << std::endl;
-  ss << "- Side Step Length : " << msg.side_step_length << std::endl;
-  ss << "- Rotation Angle : " << msg.step_angle_rad << std::endl;
-
-  log(Info, ss.str());
-}
-
-void QNodeThor3::setWalkingBalance(bool on_command)
-{
-  if (on_command == true)
-    turnOnBalance();
-  else
-    turnOffBalance();
-}
-
-void QNodeThor3::setWalkingBalanceParam(const double &gyro_gain, const double &ft_gain_ratio,
-                                        const double &imu_time_const, const double &ft_time_const)
-{
-  // todo : make the walking balance param msg and fill it, sent to the mpc of thormange3
-  if (loadBalanceParameterFromYaml() == false)
-  {
-    return;
-  }
-
-  //  set_balance_param_srv_.request.updating_duration = 2.0;
-
-  //  set_balance_param_srv_.request.balance_param.gyro_gain = gyro_gain;
-  //  set_balance_param_srv_.request.balance_param.foot_x_force_gain *= ft_gain_ratio;
-  //  set_balance_param_srv_.request.balance_param.foot_y_force_gain *= ft_gain_ratio;
-  //  set_balance_param_srv_.request.balance_param.foot_z_force_gain *= ft_gain_ratio;
-  //  set_balance_param_srv_.request.balance_param.foot_roll_torque_gain *= ft_gain_ratio;
-  //  set_balance_param_srv_.request.balance_param.foot_pitch_torque_gain *= ft_gain_ratio;
-
-  //  set_balance_param_srv_.request.balance_param.foot_roll_angle_time_constant = imu_time_const;
-  //  set_balance_param_srv_.request.balance_param.foot_pitch_angle_time_constant = imu_time_const;
-
-  //  set_balance_param_srv_.request.balance_param.foot_x_force_time_constant = ft_time_const;
-  //  set_balance_param_srv_.request.balance_param.foot_y_force_time_constant = ft_time_const;
-  //  set_balance_param_srv_.request.balance_param.foot_z_force_time_constant = ft_time_const;
-  //  set_balance_param_srv_.request.balance_param.foot_roll_torque_time_constant = ft_time_const;
-  //  set_balance_param_srv_.request.balance_param.foot_pitch_torque_time_constant = ft_time_const;
-
-  //  setBalanceParameter();
-}
-
-void QNodeThor3::setWalkingFootsteps()
-{
-  if (preview_foot_steps_.size() != preview_foot_types_.size())
-  {
-    log(Error, "Footsteps are corrupted.");
-    return;
-  }
-  else if (preview_foot_steps_.size() == 0)
-  {
-    log(Warn, "No Footsteps");
-    return;
-  }
-
-  thormang3_foot_step_generator::Step2DArray footsteps;
-
-  for (int ix = 0; ix < preview_foot_steps_.size(); ix++)
-  {
-    thormang3_foot_step_generator::Step2D step;
-
-    int type = preview_foot_types_[ix];
-    if (type == humanoid_nav_msgs::StepTarget::right)
-      step.moving_foot = thormang3_foot_step_generator::Step2D::RIGHT_FOOT_SWING;
-    else if (type == humanoid_nav_msgs::StepTarget::left)
-      step.moving_foot = thormang3_foot_step_generator::Step2D::LEFT_FOOT_SWING;
-    else
-      step.moving_foot = thormang3_foot_step_generator::Step2D::STANDING;
-
-    step.step2d = preview_foot_steps_[ix];
-
-    footsteps.footsteps_2d.push_back(step);
-  }
-
-  set_walking_footsteps_pub_.publish(footsteps);
-
-  log(Info, "Set command to walk using footsteps");
-
-  clearFootsteps();
-}
-
-void QNodeThor3::clearFootsteps()
-{
-  // clear foot step marker array
-  visualizePreviewFootsteps(true);
-
-  preview_foot_steps_.clear();
-  preview_foot_types_.clear();
-}
-
-void QNodeThor3::makeFootstepUsingPlanner()
-{
-  makeFootstepUsingPlanner(pose_from_ui_);
-}
-
-void QNodeThor3::makeFootstepUsingPlanner(const geometry_msgs::Pose &target_foot_pose)
-{
-  //foot step service
-  humanoid_nav_msgs::PlanFootsteps get_step;
-
-  geometry_msgs::Pose2D start;
-  geometry_msgs::Pose2D goal;
-  goal.x = target_foot_pose.position.x;
-  goal.y = target_foot_pose.position.y;
-
-  Eigen::Quaterniond goal_orientation;
-  tf::quaternionMsgToEigen(target_foot_pose.orientation, goal_orientation);
-
-  Eigen::Vector3d forward, f_x(1, 0, 0);
-  forward = goal_orientation.toRotationMatrix() * f_x;
-  double theta = forward.y() > 0 ? acos(forward.x()) : -acos(forward.x());
-  goal.theta = theta;
-
-  get_step.request.start = start;
-  get_step.request.goal = goal;
-
-  std::stringstream call_msg;
-  call_msg << "Start [" << start.x << ", " << start.y << " | " << start.theta << "]" << " , Goal [" << goal.x << ", "
-           << goal.y << " | " << goal.theta << "]";
-  log(Info, call_msg.str());
-
-  // clear visualization
-  visualizePreviewFootsteps(true);
-
-  // init foot steps
-  preview_foot_steps_.clear();
-  preview_foot_types_.clear();
-
-  if (humanoid_footstep_client_.call(get_step))
-  {
-    if (get_step.response.result)
-    {
-      for (int ix = 0; ix < get_step.response.footsteps.size(); ix++)
-      {
-        // foot step log
-        std::stringstream msg_stream;
-        int foot_type = get_step.response.footsteps[ix].leg;
-        std::string foot = (foot_type == humanoid_nav_msgs::StepTarget::right) ? "right" : "left";
-        geometry_msgs::Pose2D foot_pose = get_step.response.footsteps[ix].pose;
-
-        // log footsteps
-        msg_stream << "Foot Step #" << ix + 1 << " [ " << foot << "] - [" << foot_pose.x << ", " << foot_pose.y << " | "
-                   << (foot_pose.theta * RADIAN2DEGREE) << "]";
-        log(Info, msg_stream.str());
-
-        preview_foot_steps_.push_back(foot_pose);
-        preview_foot_types_.push_back(foot_type);
-      }
-
-      // visualize foot steps
-      visualizePreviewFootsteps(false);
-    }
-    else
-    {
-      log(Info, "fail to get foot step from planner");
-      return;
-    }
-  }
-  else
-  {
-    log(Error, "cannot call service");
-    return;
-  }
-
-  return;
-}
-
-void QNodeThor3::visualizePreviewFootsteps(bool clear)
-{
-  if (clear && preview_foot_steps_.size() == 0)
-    return;
-
-  visualization_msgs::MarkerArray marker_array;
-  ros::Time now = ros::Time::now();
-  visualization_msgs::Marker rviz_marker;
-
-  rviz_marker.header.frame_id = "pelvis_link";
-  rviz_marker.header.stamp = now;
-  rviz_marker.ns = "foot_step_marker";
-
-  rviz_marker.id = 1;
-  rviz_marker.type = visualization_msgs::Marker::CUBE;
-  rviz_marker.action = (clear == false) ? visualization_msgs::Marker::ADD : visualization_msgs::Marker::DELETE;
-
-  rviz_marker.scale.x = 0.216;
-  rviz_marker.scale.y = 0.144;
-  rviz_marker.scale.z = 0.01;
-
-  double alpha = 0.7;
-  double height = -0.723;
-
-  for (int ix = preview_foot_types_.size() - 1; ix >= 0; ix--)
-  {
-    // foot step marker array
-    rviz_marker.id += 10;
-
-    if (!clear)
-    {
-      Eigen::Vector3d marker_position(preview_foot_steps_[ix].x, preview_foot_steps_[ix].y, height);
-      Eigen::Vector3d marker_position_offset;
-
-      Eigen::Vector3d toward(1, 0, 0), direction(cos(preview_foot_steps_[ix].theta), sin(preview_foot_steps_[ix].theta),
-                                                 0);
-      Eigen::Quaterniond marker_orientation(Eigen::Quaterniond::FromTwoVectors(toward, direction));
-
-      if (debug_print_)
-      {
-        std::stringstream msg;
-        msg << "Foot Step #" << ix << " [ " << preview_foot_types_[ix] << "] - [" << rviz_marker.pose.position.x << ", "
-            << rviz_marker.pose.position.y << "]";
-        log(Info, msg.str());
-      }
-      alpha *= 0.9;
-
-      // set foot step color
-      if (preview_foot_types_[ix] == humanoid_nav_msgs::StepTarget::left)  // left
-      {
-        rviz_marker.color.r = 0.0;
-        rviz_marker.color.g = 0.0;
-        rviz_marker.color.b = 1.0;
-        rviz_marker.color.a = alpha + 0.3;
-
-        Eigen::Vector3d offset_y(0, 0.015, 0);
-        marker_position_offset = marker_orientation.toRotationMatrix() * offset_y;
-
-      }
-      else if (preview_foot_types_[ix] == humanoid_nav_msgs::StepTarget::right)  //right
-      {
-        rviz_marker.color.r = 1.0;
-        rviz_marker.color.g = 0.0;
-        rviz_marker.color.b = 0.0;
-        rviz_marker.color.a = alpha + 0.3;
-
-        Eigen::Vector3d offset_y(0, -0.015, 0);
-        marker_position_offset = marker_orientation.toRotationMatrix() * offset_y;
-      }
-
-      marker_position = marker_position_offset + marker_position;
-
-      tf::pointEigenToMsg(marker_position, rviz_marker.pose.position);
-      tf::quaternionEigenToMsg(marker_orientation, rviz_marker.pose.orientation);
-
-      // apply foot x offset
-    }
-
-    marker_array.markers.push_back(rviz_marker);
-  }
-
-  // publish foot step marker array
-  if (clear == false)
-    log(Info, "Visualize Preview Footstep Marker Array");
-  else
-    log(Info, "Clear Visualize Preview Footstep Marker Array");
-
-  marker_pub_.publish(marker_array);
-}
-
-void QNodeThor3::setBalanceParameter()
-{
-  bool service_result = false;
-
-  // call service
-  service_result = set_balance_param_client_.call(set_balance_param_srv_);
-  if (service_result == true)
-  {
-    int _result = set_balance_param_srv_.response.result;
-    if (_result == thormang3_walking_module_msgs::SetBalanceParam::Response::NO_ERROR)
-    {
-      ROS_INFO("[Demo]  : Succeed to set balance param");
-      ROS_INFO("[Demo]  : Please wait 2 sec for turning on balance");
-      log(Info, "Set Walking Balance parameters");
-    }
-    else
-    {
-      if (_result & thormang3_walking_module_msgs::SetBalanceParam::Response::NOT_ENABLED_WALKING_MODULE)
-        ROS_ERROR("[Demo]  : BALANCE_PARAM_ERR::NOT_ENABLED_WALKING_MODULE");
-      if (_result & thormang3_walking_module_msgs::SetBalanceParam::Response::PREV_REQUEST_IS_NOT_FINISHED)
-        ROS_ERROR("[Demo]  : BALANCE_PARAM_ERR::PREV_REQUEST_IS_NOT_FINISHED");
-    }
-  }
-  else
-    ROS_ERROR("[Demo]  : Failed to set balance param ");
-
-  setFeedBackGain();
-}
-
-bool QNodeThor3::loadBalanceParameterFromYaml()
-{
-  std::string balance_yaml_path = "";
-  balance_yaml_path = package_name_ + "/config/balance_param.yaml";
-
-  YAML::Node doc;
-  try
-  {
-    // load yaml
-    doc = YAML::LoadFile(balance_yaml_path.c_str());
-
-    double cob_x_offset_m                      = doc["cob_x_offset_m"].as<double>();
-    double cob_y_offset_m                      = doc["cob_y_offset_m"].as<double>();
-    double hip_roll_swap_angle_rad             = doc["hip_roll_swap_angle_rad"].as<double>();
-    double foot_roll_gyro_p_gain               = doc["foot_roll_gyro_p_gain"].as<double>();
-    double foot_roll_gyro_d_gain               = doc["foot_roll_gyro_d_gain"].as<double>();
-    double foot_pitch_gyro_p_gain              = doc["foot_pitch_gyro_p_gain"].as<double>();
-    double foot_pitch_gyro_d_gain              = doc["foot_pitch_gyro_d_gain"].as<double>();
-    double foot_roll_angle_p_gain              = doc["foot_roll_angle_p_gain"].as<double>();
-    double foot_roll_angle_d_gain              = doc["foot_roll_angle_d_gain"].as<double>();
-    double foot_pitch_angle_p_gain             = doc["foot_pitch_angle_p_gain"].as<double>();
-    double foot_pitch_angle_d_gain             = doc["foot_pitch_angle_d_gain"].as<double>();
-    double foot_x_force_p_gain                 = doc["foot_x_force_p_gain"].as<double>();
-    double foot_x_force_d_gain                 = doc["foot_x_force_d_gain"].as<double>();
-    double foot_y_force_p_gain                 = doc["foot_y_force_p_gain"].as<double>();
-    double foot_y_force_d_gain                 = doc["foot_y_force_d_gain"].as<double>();
-    double foot_z_force_p_gain                 = doc["foot_z_force_p_gain"].as<double>();
-    double foot_z_force_d_gain                 = doc["foot_z_force_d_gain"].as<double>();
-    double foot_roll_torque_p_gain             = doc["foot_roll_torque_p_gain"].as<double>();
-    double foot_roll_torque_d_gain             = doc["foot_roll_torque_d_gain"].as<double>();
-    double foot_pitch_torque_p_gain            = doc["foot_pitch_torque_p_gain"].as<double>();
-    double foot_pitch_torque_d_gain            = doc["foot_pitch_torque_d_gain"].as<double>();
-    double roll_gyro_cut_off_frequency         = doc["roll_gyro_cut_off_frequency"].as<double>();
-    double pitch_gyro_cut_off_frequency        = doc["pitch_gyro_cut_off_frequency"].as<double>();
-    double roll_angle_cut_off_frequency        = doc["roll_angle_cut_off_frequency"].as<double>();
-    double pitch_angle_cut_off_frequency       = doc["pitch_angle_cut_off_frequency"].as<double>();
-    double foot_x_force_cut_off_frequency      = doc["foot_x_force_cut_off_frequency"].as<double>();
-    double foot_y_force_cut_off_frequency      = doc["foot_y_force_cut_off_frequency"].as<double>();
-    double foot_z_force_cut_off_frequency      = doc["foot_z_force_cut_off_frequency"].as<double>();
-    double foot_roll_torque_cut_off_frequency  = doc["foot_roll_torque_cut_off_frequency"].as<double>();
-    double foot_pitch_torque_cut_off_frequency = doc["foot_pitch_torque_cut_off_frequency"].as<double>();
-
-    set_balance_param_srv_.request.updating_duration                                 = 2.0;
-    set_balance_param_srv_.request.balance_param.cob_x_offset_m                      =  cob_x_offset_m                     ;
-    set_balance_param_srv_.request.balance_param.cob_y_offset_m                      =  cob_y_offset_m                     ;
-    set_balance_param_srv_.request.balance_param.hip_roll_swap_angle_rad             =  hip_roll_swap_angle_rad            ;
-    set_balance_param_srv_.request.balance_param.foot_roll_gyro_p_gain               =  foot_roll_gyro_p_gain              ;
-    set_balance_param_srv_.request.balance_param.foot_roll_gyro_d_gain               =  foot_roll_gyro_d_gain              ;
-    set_balance_param_srv_.request.balance_param.foot_pitch_gyro_p_gain              =  foot_pitch_gyro_p_gain             ;
-    set_balance_param_srv_.request.balance_param.foot_pitch_gyro_d_gain              =  foot_pitch_gyro_d_gain             ;
-    set_balance_param_srv_.request.balance_param.foot_roll_angle_p_gain              =  foot_roll_angle_p_gain             ;
-    set_balance_param_srv_.request.balance_param.foot_roll_angle_d_gain              =  foot_roll_angle_d_gain             ;
-    set_balance_param_srv_.request.balance_param.foot_pitch_angle_p_gain             =  foot_pitch_angle_p_gain            ;
-    set_balance_param_srv_.request.balance_param.foot_pitch_angle_d_gain             =  foot_pitch_angle_d_gain            ;
-    set_balance_param_srv_.request.balance_param.foot_x_force_p_gain                 =  foot_x_force_p_gain                ;
-    set_balance_param_srv_.request.balance_param.foot_x_force_d_gain                 =  foot_x_force_d_gain                ;
-    set_balance_param_srv_.request.balance_param.foot_y_force_p_gain                 =  foot_y_force_p_gain                ;
-    set_balance_param_srv_.request.balance_param.foot_y_force_d_gain                 =  foot_y_force_d_gain                ;
-    set_balance_param_srv_.request.balance_param.foot_z_force_p_gain                 =  foot_z_force_p_gain                ;
-    set_balance_param_srv_.request.balance_param.foot_z_force_d_gain                 =  foot_z_force_d_gain                ;
-    set_balance_param_srv_.request.balance_param.foot_roll_torque_p_gain             =  foot_roll_torque_p_gain            ;
-    set_balance_param_srv_.request.balance_param.foot_roll_torque_d_gain             =  foot_roll_torque_d_gain            ;
-    set_balance_param_srv_.request.balance_param.foot_pitch_torque_p_gain            =  foot_pitch_torque_p_gain           ;
-    set_balance_param_srv_.request.balance_param.foot_pitch_torque_d_gain            =  foot_pitch_torque_d_gain           ;
-    set_balance_param_srv_.request.balance_param.roll_gyro_cut_off_frequency         =  roll_gyro_cut_off_frequency        ;
-    set_balance_param_srv_.request.balance_param.pitch_gyro_cut_off_frequency        =  pitch_gyro_cut_off_frequency       ;
-    set_balance_param_srv_.request.balance_param.roll_angle_cut_off_frequency        =  roll_angle_cut_off_frequency       ;
-    set_balance_param_srv_.request.balance_param.pitch_angle_cut_off_frequency       =  pitch_angle_cut_off_frequency      ;
-    set_balance_param_srv_.request.balance_param.foot_x_force_cut_off_frequency      =  foot_x_force_cut_off_frequency     ;
-    set_balance_param_srv_.request.balance_param.foot_y_force_cut_off_frequency      =  foot_y_force_cut_off_frequency     ;
-    set_balance_param_srv_.request.balance_param.foot_z_force_cut_off_frequency      =  foot_z_force_cut_off_frequency     ;
-    set_balance_param_srv_.request.balance_param.foot_roll_torque_cut_off_frequency  =  foot_roll_torque_cut_off_frequency ;
-    set_balance_param_srv_.request.balance_param.foot_pitch_torque_cut_off_frequency =  foot_pitch_torque_cut_off_frequency;
-
-    return true;
-  }
-  catch (const std::exception& e)
-  {
-    ROS_ERROR("Failed to load balance param yaml file.");
-    return false;
-  }
-
-  return true;
-}
-
-bool QNodeThor3::setFeedBackGain()
-{
-  // load joint feedback gain from yaml file
-  bool result_load = loadFeedbackGainFromYaml();
-
-  if (result_load == false)
-    return false;
-
-  bool service_result = false;
-
-  // call service
-  service_result = set_joint_feedback_gain_client_.call(set_joint_feedback_gain_srv_);
-  if (service_result == true)
-  {
-    int _result = set_joint_feedback_gain_srv_.response.result;
-
-    if (_result == thormang3_walking_module_msgs::SetJointFeedBackGain::Response::NO_ERROR)
-    {
-      ROS_INFO("[Demo]  : Succeed to set joint feedback gain");
-      log(Info, "Set Walking Joint FeedBack gain");
-    }
-    else
-    {
-      if (_result & thormang3_walking_module_msgs::SetJointFeedBackGain::Response::NOT_ENABLED_WALKING_MODULE)
-        ROS_ERROR("[Demo]  : FRRDBACK_GAIN_ERR::NOT_ENABLED_WALKING_MODULE");
-      if (_result & thormang3_walking_module_msgs::SetJointFeedBackGain::Response::PREV_REQUEST_IS_NOT_FINISHED)
-        ROS_ERROR("[Demo]  : FRRDBACK_GAIN_ERR::PREV_REQUEST_IS_NOT_FINISHED");
-    }
-  }
-  else
-  {
-    ROS_ERROR("[Demo]  : Failed to set Joint Feedback Gain");
-    log(Error, "Fain to set Walking Joint FeedBack gain");
-  }
-    return true;
-}
-
-bool QNodeThor3::loadFeedbackGainFromYaml()
-{
-  std::string balance_yaml_path = "";
-  balance_yaml_path = package_name_ + "/config/joint_feedback_gain.yaml";
-
-  YAML::Node doc;
-  try
-  {
-    // load yaml
-    doc = YAML::LoadFile(balance_yaml_path.c_str());
-
-    set_joint_feedback_gain_srv_.request.updating_duration                 = 2.0;
-    set_joint_feedback_gain_srv_.request.feedback_gain.r_leg_hip_y_p_gain  = doc["r_leg_hip_y_p_gain"].as<double>();
-    set_joint_feedback_gain_srv_.request.feedback_gain.r_leg_hip_y_d_gain  = doc["r_leg_hip_y_d_gain"].as<double>();
-    set_joint_feedback_gain_srv_.request.feedback_gain.r_leg_hip_r_p_gain  = doc["r_leg_hip_r_p_gain"].as<double>();
-    set_joint_feedback_gain_srv_.request.feedback_gain.r_leg_hip_r_d_gain  = doc["r_leg_hip_r_d_gain"].as<double>();
-    set_joint_feedback_gain_srv_.request.feedback_gain.r_leg_hip_p_p_gain  = doc["r_leg_hip_p_p_gain"].as<double>();
-    set_joint_feedback_gain_srv_.request.feedback_gain.r_leg_hip_p_d_gain  = doc["r_leg_hip_p_d_gain"].as<double>();
-    set_joint_feedback_gain_srv_.request.feedback_gain.r_leg_kn_p_p_gain   = doc["r_leg_kn_p_p_gain"].as<double>();
-    set_joint_feedback_gain_srv_.request.feedback_gain.r_leg_kn_p_d_gain   = doc["r_leg_kn_p_d_gain"].as<double>();
-    set_joint_feedback_gain_srv_.request.feedback_gain.r_leg_an_p_p_gain   = doc["r_leg_an_p_p_gain"].as<double>();
-    set_joint_feedback_gain_srv_.request.feedback_gain.r_leg_an_p_d_gain   = doc["r_leg_an_p_d_gain"].as<double>();
-    set_joint_feedback_gain_srv_.request.feedback_gain.r_leg_an_r_p_gain   = doc["r_leg_an_r_p_gain"].as<double>();
-    set_joint_feedback_gain_srv_.request.feedback_gain.r_leg_an_r_d_gain   = doc["r_leg_an_r_d_gain"].as<double>();
-
-    set_joint_feedback_gain_srv_.request.feedback_gain.l_leg_hip_y_p_gain  = doc["l_leg_hip_y_p_gain"].as<double>();
-    set_joint_feedback_gain_srv_.request.feedback_gain.l_leg_hip_y_d_gain  = doc["l_leg_hip_y_d_gain"].as<double>();
-    set_joint_feedback_gain_srv_.request.feedback_gain.l_leg_hip_r_p_gain  = doc["l_leg_hip_r_p_gain"].as<double>();
-    set_joint_feedback_gain_srv_.request.feedback_gain.l_leg_hip_r_d_gain  = doc["l_leg_hip_r_d_gain"].as<double>();
-    set_joint_feedback_gain_srv_.request.feedback_gain.l_leg_hip_p_p_gain  = doc["l_leg_hip_p_p_gain"].as<double>();
-    set_joint_feedback_gain_srv_.request.feedback_gain.l_leg_hip_p_d_gain  = doc["l_leg_hip_p_d_gain"].as<double>();
-    set_joint_feedback_gain_srv_.request.feedback_gain.l_leg_kn_p_p_gain   = doc["l_leg_kn_p_p_gain"].as<double>();
-    set_joint_feedback_gain_srv_.request.feedback_gain.l_leg_kn_p_d_gain   = doc["l_leg_kn_p_d_gain"].as<double>();
-    set_joint_feedback_gain_srv_.request.feedback_gain.l_leg_an_p_p_gain   = doc["l_leg_an_p_p_gain"].as<double>();
-    set_joint_feedback_gain_srv_.request.feedback_gain.l_leg_an_p_d_gain   = doc["l_leg_an_p_d_gain"].as<double>();
-    set_joint_feedback_gain_srv_.request.feedback_gain.l_leg_an_r_p_gain   = doc["l_leg_an_r_p_gain"].as<double>();
-    set_joint_feedback_gain_srv_.request.feedback_gain.l_leg_an_r_d_gain   = doc["l_leg_an_r_d_gain"].as<double>();
-  }
-  catch (const std::exception& e)
-  {
-    ROS_ERROR("Failed to load joint feedback gain yaml file.");
-    return false;
-  }
-
-  return true;
-}
-
-void QNodeThor3::turnOnBalance()
-{
-  // load param from yaml file
-  bool result_load = loadBalanceParameterFromYaml();
-
-  if (result_load == false)
-    return;
-
-  setBalanceParameter();
-
-  log(Info, "Turn On Walking Balance");
-}
-
-void QNodeThor3::turnOffBalance()
-{
-  // load param from yaml file
-  bool result_load = loadBalanceParameterFromYaml();
-
-  if (result_load == false)
-    return;
-
-  set_balance_param_srv_.request.updating_duration = 2.0;
-  set_balance_param_srv_.request.balance_param.foot_roll_gyro_p_gain               =  0.0;
-  set_balance_param_srv_.request.balance_param.foot_roll_gyro_d_gain               =  0.0;
-  set_balance_param_srv_.request.balance_param.foot_pitch_gyro_p_gain              =  0.0;
-  set_balance_param_srv_.request.balance_param.foot_pitch_gyro_d_gain              =  0.0;
-  set_balance_param_srv_.request.balance_param.foot_roll_angle_p_gain              =  0.0;
-  set_balance_param_srv_.request.balance_param.foot_roll_angle_d_gain              =  0.0;
-  set_balance_param_srv_.request.balance_param.foot_pitch_angle_p_gain             =  0.0;
-  set_balance_param_srv_.request.balance_param.foot_pitch_angle_d_gain             =  0.0;
-  set_balance_param_srv_.request.balance_param.foot_x_force_p_gain                 =  0.0;
-  set_balance_param_srv_.request.balance_param.foot_x_force_d_gain                 =  0.0;
-  set_balance_param_srv_.request.balance_param.foot_y_force_p_gain                 =  0.0;
-  set_balance_param_srv_.request.balance_param.foot_y_force_d_gain                 =  0.0;
-  set_balance_param_srv_.request.balance_param.foot_z_force_p_gain                 =  0.0;
-  set_balance_param_srv_.request.balance_param.foot_z_force_d_gain                 =  0.0;
-  set_balance_param_srv_.request.balance_param.foot_roll_torque_p_gain             =  0.0;
-  set_balance_param_srv_.request.balance_param.foot_roll_torque_d_gain             =  0.0;
-  set_balance_param_srv_.request.balance_param.foot_pitch_torque_p_gain            =  0.0;
-  set_balance_param_srv_.request.balance_param.foot_pitch_torque_d_gain            =  0.0;
-
-  setBalanceParameter();
-
-  log(Info, "Turn Off Walking Balance");
-}
-
-// Motion
-void QNodeThor3::playMotion(int motion_index, bool to_action_script)
-{
-  if (motion_table_.find(motion_index) == motion_table_.end())
-  {
-    log(Error, "Motion index is not valid.");
-    return;
-  }
-
-  std::stringstream log_stream;
-  switch (motion_index)
-  {
-    case -2:
-      log_stream << "BRAKE Motion";
-      break;
-
-    case -1:
-      log_stream << "STOP Motion";
-      break;
-
-    default:
-      std::string motion_name = motion_table_[motion_index];
-      log_stream << "Play Motion : [" << motion_index << "] " << motion_name;
-  }
-
-  // publish motion index
-  std_msgs::Int32 motion_msg;
-  motion_msg.data = motion_index;
-
-  if (to_action_script == true)
-    motion_index_pub_.publish(motion_msg);
-  else
-    motion_page_pub_.publish(motion_msg);
-
-  log(Info, log_stream.str());
-}
-
-void QNodeThor3::poseCallback(const geometry_msgs::Pose::ConstPtr &msg)
-{
-  switch (current_control_ui_)
-  {
-    case WALKING_UI:
-    {
-      pose_from_ui_ = *msg;
-      log(Info, "Get Pose For Step");
-      break;
-    }
-
-    case MANIPULATION_UI:
-    {
-      double z_offset = 0.723;
-      Q_EMIT updateCurrPos(msg->position.x, msg->position.y, msg->position.z + z_offset);
-      Q_EMIT updateCurrOri(msg->orientation.x, msg->orientation.y, msg->orientation.z, msg->orientation.w);
-      log(Info, "Get Pose For IK");
-      break;
-    }
-
-    default:
-      break;
-  }
-}
-
-// demo
-void QNodeThor3::pointStampedCallback(const geometry_msgs::PointStamped::ConstPtr &msg)
-{
-  ROS_INFO("get position from rviz");
-
-  frame_id_ = msg->header.frame_id;
-
-  // update point ui
-  Q_EMIT updateDemoPoint(msg->point);
-}
-
-void QNodeThor3::interactiveMarkerFeedback(const visualization_msgs::InteractiveMarkerFeedbackConstPtr &feedback)
-{
-  // event
-  switch (feedback->event_type)
-  {
-    case visualization_msgs::InteractiveMarkerFeedback::BUTTON_CLICK:
-      break;
-
-    case visualization_msgs::InteractiveMarkerFeedback::MENU_SELECT:
-      break;
-
-    case visualization_msgs::InteractiveMarkerFeedback::POSE_UPDATE:
-    {
-      current_pose_ = feedback->pose;
-
-      // update pose ui
-      Q_EMIT updateDemoPose(feedback->pose);
-
-      break;
-    }
-    case visualization_msgs::InteractiveMarkerFeedback::MOUSE_DOWN:
-      break;
-
-    case visualization_msgs::InteractiveMarkerFeedback::MOUSE_UP:
-      break;
-
-    default:
-      break;
-  }
-
-  interactive_marker_server_->applyChanges();
-}
-
-void QNodeThor3::makeInteractiveMarker(const geometry_msgs::Pose &marker_pose)
-{
-  if (frame_id_ == "")
-  {
-    ROS_ERROR("No frame id!!!");
-    // return;
-
-    frame_id_ = "pelvis_link";
-  }
-
-  ROS_INFO_STREAM(
-      "Make Interactive Marker! - " << marker_pose.position.x << ", " << marker_pose.position.y << ", " << marker_pose.position.z << " [" << marker_pose.orientation.x << ", " << marker_pose.orientation.y << ", " << marker_pose.orientation.z << " | " << marker_pose.orientation.w << "]");
-
-  interactive_marker_server_->clear();
-
-  visualization_msgs::InteractiveMarker interactive_marker;
-  interactive_marker.pose = marker_pose;    // set pose
-
-  // Visualize Interactive Marker
-  interactive_marker.header.frame_id = frame_id_;
-  interactive_marker.scale = 0.3;
-
-  interactive_marker.name = marker_name_;  //"pose_marker";
-  interactive_marker.description = "3D Pose Control";
-
-  // ----- center marker
-  visualization_msgs::InteractiveMarkerControl center_marker_control;
-
-  center_marker_control.always_visible = true;
-  center_marker_control.interaction_mode = visualization_msgs::InteractiveMarkerControl::NONE;
-
-  visualization_msgs::Marker marker;
-
-  marker.type = visualization_msgs::Marker::CUBE;
-
-  // center cube
-  marker.scale.x = 0.03;
-  marker.scale.y = 0.03;
-  marker.scale.z = 0.03;
-
-  marker.color.r = 1.0;
-  marker.color.g = 0.5;
-  marker.color.b = 0.5;
-  marker.color.a = 1.0;
-
-  center_marker_control.markers.push_back(marker);
-
-  // axis x
-  marker.pose.position.x = 0.05;
-  marker.pose.position.y = 0.0;
-  marker.pose.position.z = 0.0;
-
-  marker.scale.x = 0.1;
-  marker.scale.y = 0.01;
-  marker.scale.z = 0.01;
-
-  marker.color.r = 1.0;
-  marker.color.g = 0.0;
-  marker.color.b = 0.0;
-  marker.color.a = 1.0;
-
-  center_marker_control.markers.push_back(marker);
-
-  // axis y
-  marker.pose.position.x = 0.0;
-  marker.pose.position.y = 0.05;
-  marker.pose.position.z = 0.0;
-
-  marker.scale.x = 0.01;
-  marker.scale.y = 0.1;
-  marker.scale.z = 0.01;
-
-  marker.color.r = 0.0;
-  marker.color.g = 1.0;
-  marker.color.b = 0.0;
-  marker.color.a = 1.0;
-
-  center_marker_control.markers.push_back(marker);
-
-  // axis z
-  marker.pose.position.x = 0.0;
-  marker.pose.position.y = 0.0;
-  marker.pose.position.z = 0.05;
-
-  marker.scale.x = 0.01;
-  marker.scale.y = 0.01;
-  marker.scale.z = 0.1;
-
-  marker.color.r = 0.0;
-  marker.color.g = 0.0;
-  marker.color.b = 1.0;
-  marker.color.a = 1.0;
-
-  center_marker_control.markers.push_back(marker);
-
-  interactive_marker.controls.push_back(center_marker_control);
-
-  // ----- controller
-  visualization_msgs::InteractiveMarkerControl interactive_control;
-
-  // move and rotate along axis x : default
-  interactive_control.orientation.x = 1;
-  interactive_control.orientation.y = 0;
-  interactive_control.orientation.z = 0;
-  interactive_control.orientation.w = 1;
-  interactive_control.name = "rotate";
-  interactive_control.interaction_mode = visualization_msgs::InteractiveMarkerControl::ROTATE_AXIS;
-  interactive_marker.controls.push_back(interactive_control);
-  interactive_control.name = "move";
-  interactive_control.interaction_mode = visualization_msgs::InteractiveMarkerControl::MOVE_AXIS;
-  interactive_marker.controls.push_back(interactive_control);
-
-  // move and rotate along axis y
-  interactive_control.orientation.x = 0;
-  interactive_control.orientation.y = 1;
-  interactive_control.orientation.z = 0;
-  interactive_control.orientation.w = 1;
-  interactive_control.name = "rotate";
-  interactive_control.interaction_mode = visualization_msgs::InteractiveMarkerControl::ROTATE_AXIS;
-  interactive_marker.controls.push_back(interactive_control);
-  interactive_control.name = "move";
-  interactive_control.interaction_mode = visualization_msgs::InteractiveMarkerControl::MOVE_AXIS;
-  interactive_marker.controls.push_back(interactive_control);
-
-  // move and rotate along axis z
-  interactive_control.orientation.x = 0;
-  interactive_control.orientation.y = 0;
-  interactive_control.orientation.z = 1;
-  interactive_control.orientation.w = 1;
-  interactive_control.name = "rotate";
-  interactive_control.interaction_mode = visualization_msgs::InteractiveMarkerControl::ROTATE_AXIS;
-  interactive_marker.controls.push_back(interactive_control);
-  interactive_control.name = "move";
-  interactive_control.interaction_mode = visualization_msgs::InteractiveMarkerControl::MOVE_AXIS;
-  interactive_marker.controls.push_back(interactive_control);
-
-  interactive_marker_server_->insert(interactive_marker);
-  interactive_marker_server_->setCallback(interactive_marker.name,
-                                          boost::bind(&QNodeThor3::interactiveMarkerFeedback, this, _1));
-
-  interactive_marker_server_->applyChanges();
-}
-
-void QNodeThor3::updateInteractiveMarker(const geometry_msgs::Pose &pose)
-{
-  ROS_INFO("Update Interactive Marker Pose");
-
-  visualization_msgs::InteractiveMarker interactive_marker;
-  bool result_getting = false;
-
-  result_getting = interactive_marker_server_->get(marker_name_, interactive_marker);
-  if (result_getting == false)
-  {
-    ROS_ERROR("No Interactive marker to set pose");
-    return;
-  }
-
-  interactive_marker_server_->setPose(interactive_marker.name, pose);
-  interactive_marker_server_->applyChanges();
-}
-
-void QNodeThor3::getInteractiveMarkerPose()
-{
-  ROS_INFO("Get Interactive Marker Pose");
-
-  visualization_msgs::InteractiveMarker _interactive_marker;
-  if (!(interactive_marker_server_->get(marker_name_, _interactive_marker)))
-  {
-    ROS_ERROR("No Interactive marker to get pose");
-    return;
-  }
-
-  // update pose ui
-  Q_EMIT updateDemoPose(_interactive_marker.pose);
-
-  clearInteractiveMarker();
-}
-
-void QNodeThor3::clearInteractiveMarker()
-{
-  ROS_INFO("Clear Interactive Marker");
-
-  // clear and apply
-  interactive_marker_server_->clear();
-  interactive_marker_server_->applyChanges();
-}
-
-void QNodeThor3::kickDemo(const std::string &kick_foot)
-{
-  if (kick_foot == "right kick")
-  {
-    bool result = loadBalanceParameterFromYaml();
-    if (result == false)
-      return;
-
-    double old_hip_swap = set_balance_param_srv_.request.balance_param.hip_roll_swap_angle_rad;
-    set_balance_param_srv_.request.balance_param.hip_roll_swap_angle_rad = 0;
-    set_balance_param_srv_.request.balance_param.cob_x_offset_m -= 0.03;
-    set_balance_param_srv_.request.balance_param.cob_y_offset_m += 0.02;
-    setBalanceParameter();
-
-    thormang3_foot_step_generator::FootStepCommand msg;
-    msg.command = kick_foot;
-    setWalkingCommand(msg);
-
-    // wait for kick
-    usleep(7.2 * 1000 * 1000);
-
-    set_balance_param_srv_.request.balance_param.hip_roll_swap_angle_rad = old_hip_swap;
-    set_balance_param_srv_.request.balance_param.cob_x_offset_m += 0.03;
-    set_balance_param_srv_.request.balance_param.cob_y_offset_m -= 0.02;
-    setBalanceParameter();
-
-    // wait for recovering balance
-    usleep(2 * 1000 * 1000);
-  }
-  else if (kick_foot == "left kick")
-  {
-    bool result = loadBalanceParameterFromYaml();
-    if (result == false)
-      return;
-
-    double old_hip_swap = set_balance_param_srv_.request.balance_param.hip_roll_swap_angle_rad;
-    set_balance_param_srv_.request.balance_param.cob_x_offset_m -= 0.03;
-    set_balance_param_srv_.request.balance_param.cob_y_offset_m -= 0.02;
-    setBalanceParameter();
-
-    thormang3_foot_step_generator::FootStepCommand msg;
-    msg.command = kick_foot;
-    setWalkingCommand(msg);
-
-    // wait for kick
-    usleep(7.2 * 1000 * 1000);
-
-    set_balance_param_srv_.request.balance_param.hip_roll_swap_angle_rad = old_hip_swap;
-    set_balance_param_srv_.request.balance_param.cob_x_offset_m += 0.03;
-    set_balance_param_srv_.request.balance_param.cob_y_offset_m += 0.02;
-    setBalanceParameter();
-
-    // wait for recovering balance
-    usleep(2 * 1000 * 1000);
-  }
-}
-
-// LOG
-void QNodeThor3::statusMsgCallback(const robotis_controller_msgs::StatusMsg::ConstPtr &msg)
-{
-  log((LogLevel) msg->type, msg->status_msg, msg->module_name);
-}
-
-void QNodeThor3::log(const LogLevel &level, const std::string &msg, std::string sender)
-{
-  logging_model_.insertRows(logging_model_.rowCount(), 1);
-  std::stringstream logging_model_msg;
-
-  ros::Duration duration_time = ros::Time::now() - start_time_;
-  int current_time = duration_time.sec;
-  int min_time = 0, sec_time = 0;
-  min_time = (int) (current_time / 60);
-  sec_time = (int) (current_time % 60);
-
-  std::stringstream min_str, sec_str;
-  if (min_time < 10)
-    min_str << "0";
-  if (sec_time < 10)
-    sec_str << "0";
-  min_str << min_time;
-  sec_str << sec_time;
-
-  std::stringstream stream_sender;
-  stream_sender << "[" << sender << "] ";
-
-  switch (level)
-  {
-    case (Debug):
-    {
-      ROS_DEBUG_STREAM(msg);
-      logging_model_msg << "[DEBUG] [" << min_str.str() << ":" << sec_str.str() << "]: " << stream_sender.str() << msg;
-      break;
-    }
-    case (Info):
-    {
-      ROS_INFO_STREAM(msg);
-      logging_model_msg << "[INFO] [" << min_str.str() << ":" << sec_str.str() << "]: " << stream_sender.str() << msg;
-      break;
-    }
-    case (Warn):
-    {
-      ROS_WARN_STREAM(msg);
-      logging_model_msg << "[WARN] [" << min_str.str() << ":" << sec_str.str() << "]: " << stream_sender.str() << msg;
-      break;
-    }
-    case (Error):
-    {
-      ROS_ERROR_STREAM(msg);
-      logging_model_msg << "<ERROR> [" << min_str.str() << ":" << sec_str.str() << "]: " << stream_sender.str() << msg;
-      break;
-    }
-    case (Fatal):
-    {
-      ROS_FATAL_STREAM(msg);
-      logging_model_msg << "[FATAL] [" << min_str.str() << ":" << sec_str.str() << "]: " << stream_sender.str() << msg;
-      break;
-    }
-  }
-
-  QVariant new_row(QString(logging_model_msg.str().c_str()));
-  logging_model_.setData(logging_model_.index(logging_model_.rowCount() - 1), new_row);
-
-  Q_EMIT loggingUpdated();  // used to readjust the scrollbar
-}
-
-void QNodeThor3::clearLog()
-{
-  if (logging_model_.rowCount() == 0)
-    return;
-
-  logging_model_.removeRows(0, logging_model_.rowCount());
-}
-
-}  // namespace thormang3_demo
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_demo/ui/main_window.ui b/ROBOTIS-THORMANG-OPC-for-git/thormang3_demo/ui/main_window.ui
deleted file mode 100644
index 5fb1117..0000000
--- a/ROBOTIS-THORMANG-OPC-for-git/thormang3_demo/ui/main_window.ui
+++ /dev/null
@@ -1,2130 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<ui version="4.0">
- <class>MainWindowDesign</class>
- <widget class="QMainWindow" name="MainWindowDesign">
-  <property name="geometry">
-   <rect>
-    <x>0</x>
-    <y>0</y>
-    <width>1700</width>
-    <height>1006</height>
-   </rect>
-  </property>
-  <property name="windowTitle">
-   <string>Thormang3 Demo GUI</string>
-  </property>
-  <property name="windowIcon">
-   <iconset resource="../../thormang3_offset_tuner_client/resources/images.qrc">
-    <normaloff>:/images/icon.png</normaloff>:/images/icon.png</iconset>
-  </property>
-  <property name="locale">
-   <locale language="English" country="Australia"/>
-  </property>
-  <widget class="QWidget" name="centralwidget">
-   <layout class="QHBoxLayout">
-    <item>
-     <widget class="QTabWidget" name="tab_manager">
-      <property name="minimumSize">
-       <size>
-        <width>100</width>
-        <height>0</height>
-       </size>
-      </property>
-      <property name="locale">
-       <locale language="English" country="Australia"/>
-      </property>
-      <property name="currentIndex">
-       <number>0</number>
-      </property>
-      <widget class="QWidget" name="tab_status">
-       <attribute name="title">
-        <string>Ros Communications</string>
-       </attribute>
-       <layout class="QVBoxLayout" name="verticalLayout_2">
-        <item>
-         <widget class="QGroupBox" name="groupBox_log">
-          <property name="sizePolicy">
-           <sizepolicy hsizetype="MinimumExpanding" vsizetype="Preferred">
-            <horstretch>0</horstretch>
-            <verstretch>0</verstretch>
-           </sizepolicy>
-          </property>
-          <property name="title">
-           <string>Logging</string>
-          </property>
-          <layout class="QGridLayout" name="gridLayout_3">
-           <item row="1" column="0">
-            <widget class="QPushButton" name="button_clear_log">
-             <property name="minimumSize">
-              <size>
-               <width>300</width>
-               <height>0</height>
-              </size>
-             </property>
-             <property name="text">
-              <string>Clear</string>
-             </property>
-            </widget>
-           </item>
-           <item row="0" column="0">
-            <widget class="QListView" name="view_logging"/>
-           </item>
-          </layout>
-         </widget>
-        </item>
-       </layout>
-      </widget>
-     </widget>
-    </item>
-    <item>
-     <widget class="QWidget" name="widget_control" native="true">
-      <layout class="QVBoxLayout" name="verticalLayout_3">
-       <item>
-        <widget class="QGroupBox" name="groupBox_lidar">
-         <property name="title">
-          <string>Basic Control</string>
-         </property>
-         <layout class="QGridLayout" name="gridLayout_5">
-          <item row="2" column="1" colspan="4">
-           <widget class="QWidget" name="widget_ft_base_module" native="true">
-            <property name="enabled">
-             <bool>false</bool>
-            </property>
-            <layout class="QGridLayout" name="gridLayout_7">
-             <property name="leftMargin">
-              <number>0</number>
-             </property>
-             <property name="topMargin">
-              <number>0</number>
-             </property>
-             <property name="rightMargin">
-              <number>0</number>
-             </property>
-             <property name="bottomMargin">
-              <number>0</number>
-             </property>
-             <item row="0" column="2">
-              <widget class="QPushButton" name="button_ft_calc">
-               <property name="toolTip">
-                <string>Enable - After moving to init pose</string>
-               </property>
-               <property name="text">
-                <string>Apply Init FT</string>
-               </property>
-              </widget>
-             </item>
-             <item row="0" column="1">
-              <widget class="QPushButton" name="button_ft_gnd">
-               <property name="toolTip">
-                <string>Enable - After moving to init pose</string>
-               </property>
-               <property name="text">
-                <string>FT Ground</string>
-               </property>
-              </widget>
-             </item>
-             <item row="0" column="0">
-              <widget class="QPushButton" name="button_ft_air">
-               <property name="toolTip">
-                <string>Enable - After moving to init pose</string>
-               </property>
-               <property name="text">
-                <string>FT Air</string>
-               </property>
-              </widget>
-             </item>
-             <item row="0" column="3">
-              <widget class="QPushButton" name="button_ft_save">
-               <property name="toolTip">
-                <string>Enable - After moving to init pose</string>
-               </property>
-               <property name="text">
-                <string>Save FT calibration</string>
-               </property>
-              </widget>
-             </item>
-            </layout>
-           </widget>
-          </item>
-          <item row="1" column="3" colspan="2">
-           <widget class="QWidget" name="widget_lidar_head_control_module" native="true">
-            <property name="enabled">
-             <bool>false</bool>
-            </property>
-            <layout class="QHBoxLayout" name="horizontalLayout_4">
-             <property name="leftMargin">
-              <number>0</number>
-             </property>
-             <property name="topMargin">
-              <number>0</number>
-             </property>
-             <property name="rightMargin">
-              <number>0</number>
-             </property>
-             <property name="bottomMargin">
-              <number>0</number>
-             </property>
-             <item>
-              <widget class="QPushButton" name="button_assemble_lidar">
-               <property name="toolTip">
-                <string>Enable - After setting of head_control module</string>
-               </property>
-               <property name="text">
-                <string>Make PointCloud</string>
-               </property>
-              </widget>
-             </item>
-            </layout>
-           </widget>
-          </item>
-          <item row="1" column="1" colspan="2">
-           <widget class="QPushButton" name="button_init_pose">
-            <property name="text">
-             <string>Robot Init Pose</string>
-            </property>
-           </widget>
-          </item>
-         </layout>
-        </widget>
-       </item>
-       <item>
-        <widget class="Line" name="line">
-         <property name="orientation">
-          <enum>Qt::Horizontal</enum>
-         </property>
-        </widget>
-       </item>
-       <item>
-        <widget class="QGroupBox" name="groupBox_6">
-         <property name="title">
-          <string>Interactive Marker</string>
-         </property>
-         <layout class="QGridLayout" name="gridLayout_10">
-          <item row="0" column="5">
-           <widget class="QLabel" name="label_18">
-            <property name="text">
-             <string>p</string>
-            </property>
-            <property name="alignment">
-             <set>Qt::AlignCenter</set>
-            </property>
-           </widget>
-          </item>
-          <item row="0" column="1">
-           <widget class="QLabel" name="label_15">
-            <property name="text">
-             <string>y</string>
-            </property>
-            <property name="alignment">
-             <set>Qt::AlignCenter</set>
-            </property>
-           </widget>
-          </item>
-          <item row="0" column="2">
-           <widget class="QLabel" name="label_16">
-            <property name="text">
-             <string>z</string>
-            </property>
-            <property name="alignment">
-             <set>Qt::AlignCenter</set>
-            </property>
-           </widget>
-          </item>
-          <item row="0" column="0">
-           <widget class="QLabel" name="label_14">
-            <property name="text">
-             <string>x</string>
-            </property>
-            <property name="alignment">
-             <set>Qt::AlignCenter</set>
-            </property>
-           </widget>
-          </item>
-          <item row="0" column="6">
-           <widget class="QLabel" name="label_19">
-            <property name="text">
-             <string>y</string>
-            </property>
-            <property name="alignment">
-             <set>Qt::AlignCenter</set>
-            </property>
-           </widget>
-          </item>
-          <item row="1" column="8">
-           <widget class="QPushButton" name="button_marker_clear">
-            <property name="text">
-             <string>Clear</string>
-            </property>
-           </widget>
-          </item>
-          <item row="0" column="8">
-           <widget class="QPushButton" name="button_marker_set">
-            <property name="text">
-             <string>Set</string>
-            </property>
-           </widget>
-          </item>
-          <item row="1" column="0">
-           <widget class="QDoubleSpinBox" name="dSpinBox_marker_pos_x">
-            <property name="suffix">
-             <string> m</string>
-            </property>
-            <property name="decimals">
-             <number>3</number>
-            </property>
-            <property name="minimum">
-             <double>-10.000000000000000</double>
-            </property>
-            <property name="maximum">
-             <double>10.000000000000000</double>
-            </property>
-            <property name="singleStep">
-             <double>0.005000000000000</double>
-            </property>
-           </widget>
-          </item>
-          <item row="0" column="3" rowspan="2">
-           <widget class="Line" name="line_6">
-            <property name="orientation">
-             <enum>Qt::Vertical</enum>
-            </property>
-           </widget>
-          </item>
-          <item row="0" column="4">
-           <widget class="QLabel" name="label_17">
-            <property name="text">
-             <string>r</string>
-            </property>
-            <property name="alignment">
-             <set>Qt::AlignCenter</set>
-            </property>
-           </widget>
-          </item>
-          <item row="0" column="7" rowspan="2">
-           <widget class="Line" name="line_7">
-            <property name="orientation">
-             <enum>Qt::Vertical</enum>
-            </property>
-           </widget>
-          </item>
-          <item row="1" column="1">
-           <widget class="QDoubleSpinBox" name="dSpinBox_marker_pos_y">
-            <property name="suffix">
-             <string> m</string>
-            </property>
-            <property name="decimals">
-             <number>3</number>
-            </property>
-            <property name="minimum">
-             <double>-10.000000000000000</double>
-            </property>
-            <property name="maximum">
-             <double>10.000000000000000</double>
-            </property>
-            <property name="singleStep">
-             <double>0.005000000000000</double>
-            </property>
-           </widget>
-          </item>
-          <item row="1" column="2">
-           <widget class="QDoubleSpinBox" name="dSpinBox_marker_pos_z">
-            <property name="suffix">
-             <string> m</string>
-            </property>
-            <property name="decimals">
-             <number>3</number>
-            </property>
-            <property name="minimum">
-             <double>-10.000000000000000</double>
-            </property>
-            <property name="maximum">
-             <double>10.000000000000000</double>
-            </property>
-            <property name="singleStep">
-             <double>0.005000000000000</double>
-            </property>
-           </widget>
-          </item>
-          <item row="1" column="4">
-           <widget class="QDoubleSpinBox" name="dSpinBox_marker_ori_r">
-            <property name="suffix">
-             <string> ˚</string>
-            </property>
-            <property name="decimals">
-             <number>1</number>
-            </property>
-            <property name="minimum">
-             <double>-180.000000000000000</double>
-            </property>
-            <property name="maximum">
-             <double>180.000000000000000</double>
-            </property>
-            <property name="singleStep">
-             <double>5.000000000000000</double>
-            </property>
-           </widget>
-          </item>
-          <item row="1" column="5">
-           <widget class="QDoubleSpinBox" name="dSpinBox_marker_ori_p">
-            <property name="suffix">
-             <string> ˚</string>
-            </property>
-            <property name="decimals">
-             <number>1</number>
-            </property>
-            <property name="minimum">
-             <double>-180.000000000000000</double>
-            </property>
-            <property name="maximum">
-             <double>180.000000000000000</double>
-            </property>
-            <property name="singleStep">
-             <double>5.000000000000000</double>
-            </property>
-           </widget>
-          </item>
-          <item row="1" column="6">
-           <widget class="QDoubleSpinBox" name="dSpinBox_marker_ori_y">
-            <property name="suffix">
-             <string> ˚</string>
-            </property>
-            <property name="decimals">
-             <number>1</number>
-            </property>
-            <property name="minimum">
-             <double>-180.000000000000000</double>
-            </property>
-            <property name="maximum">
-             <double>180.000000000000000</double>
-            </property>
-            <property name="singleStep">
-             <double>5.000000000000000</double>
-            </property>
-           </widget>
-          </item>
-         </layout>
-        </widget>
-       </item>
-       <item>
-        <widget class="QTabWidget" name="tabWidget_control">
-         <property name="enabled">
-          <bool>true</bool>
-         </property>
-         <property name="currentIndex">
-          <number>2</number>
-         </property>
-         <widget class="QWidget" name="tab_mode">
-          <attribute name="title">
-           <string>Mode</string>
-          </attribute>
-          <layout class="QVBoxLayout" name="verticalLayout">
-           <item>
-            <widget class="QWidget" name="widget_mode_preset" native="true"/>
-           </item>
-           <item>
-            <widget class="QWidget" name="widget_mode" native="true"/>
-           </item>
-           <item>
-            <spacer name="verticalSpacer_5">
-             <property name="orientation">
-              <enum>Qt::Vertical</enum>
-             </property>
-             <property name="sizeHint" stdset="0">
-              <size>
-               <width>20</width>
-               <height>40</height>
-              </size>
-             </property>
-            </spacer>
-           </item>
-          </layout>
-         </widget>
-         <widget class="QWidget" name="tab_walking_module">
-          <property name="enabled">
-           <bool>true</bool>
-          </property>
-          <attribute name="title">
-           <string>Walking</string>
-          </attribute>
-          <layout class="QVBoxLayout" name="verticalLayout_5">
-           <item>
-            <widget class="QGroupBox" name="groupBox">
-             <property name="title">
-              <string>Direction Walking</string>
-             </property>
-             <layout class="QHBoxLayout" name="horizontalLayout_3">
-              <item>
-               <widget class="QFrame" name="directon_walking_frame">
-                <property name="frameShape">
-                 <enum>QFrame::StyledPanel</enum>
-                </property>
-                <layout class="QGridLayout" name="gridLayout_4">
-                 <item row="0" column="0">
-                  <widget class="QPushButton" name="A0_button_fl">
-                   <property name="minimumSize">
-                    <size>
-                     <width>60</width>
-                     <height>60</height>
-                    </size>
-                   </property>
-                   <property name="maximumSize">
-                    <size>
-                     <width>100</width>
-                     <height>100</height>
-                    </size>
-                   </property>
-                   <property name="text">
-                    <string>TL</string>
-                   </property>
-                  </widget>
-                 </item>
-                 <item row="3" column="0">
-                  <widget class="QPushButton" name="C0_button_bl">
-                   <property name="enabled">
-                    <bool>false</bool>
-                   </property>
-                   <property name="minimumSize">
-                    <size>
-                     <width>60</width>
-                     <height>60</height>
-                    </size>
-                   </property>
-                   <property name="maximumSize">
-                    <size>
-                     <width>100</width>
-                     <height>100</height>
-                    </size>
-                   </property>
-                   <property name="text">
-                    <string/>
-                   </property>
-                  </widget>
-                 </item>
-                 <item row="0" column="2">
-                  <widget class="QPushButton" name="A2_button_fr">
-                   <property name="minimumSize">
-                    <size>
-                     <width>60</width>
-                     <height>60</height>
-                    </size>
-                   </property>
-                   <property name="maximumSize">
-                    <size>
-                     <width>100</width>
-                     <height>100</height>
-                    </size>
-                   </property>
-                   <property name="text">
-                    <string>TR</string>
-                   </property>
-                  </widget>
-                 </item>
-                 <item row="2" column="2">
-                  <widget class="QPushButton" name="B2_button_r">
-                   <property name="minimumSize">
-                    <size>
-                     <width>60</width>
-                     <height>60</height>
-                    </size>
-                   </property>
-                   <property name="maximumSize">
-                    <size>
-                     <width>100</width>
-                     <height>100</height>
-                    </size>
-                   </property>
-                   <property name="text">
-                    <string>R</string>
-                   </property>
-                  </widget>
-                 </item>
-                 <item row="2" column="1">
-                  <widget class="QPushButton" name="B1_button_stop">
-                   <property name="enabled">
-                    <bool>true</bool>
-                   </property>
-                   <property name="minimumSize">
-                    <size>
-                     <width>60</width>
-                     <height>60</height>
-                    </size>
-                   </property>
-                   <property name="maximumSize">
-                    <size>
-                     <width>100</width>
-                     <height>100</height>
-                    </size>
-                   </property>
-                   <property name="text">
-                    <string>S</string>
-                   </property>
-                  </widget>
-                 </item>
-                 <item row="2" column="0">
-                  <widget class="QPushButton" name="B0_button_l">
-                   <property name="minimumSize">
-                    <size>
-                     <width>60</width>
-                     <height>60</height>
-                    </size>
-                   </property>
-                   <property name="maximumSize">
-                    <size>
-                     <width>100</width>
-                     <height>100</height>
-                    </size>
-                   </property>
-                   <property name="text">
-                    <string>L</string>
-                   </property>
-                  </widget>
-                 </item>
-                 <item row="3" column="1">
-                  <widget class="QPushButton" name="C1_button_b">
-                   <property name="minimumSize">
-                    <size>
-                     <width>60</width>
-                     <height>60</height>
-                    </size>
-                   </property>
-                   <property name="maximumSize">
-                    <size>
-                     <width>100</width>
-                     <height>100</height>
-                    </size>
-                   </property>
-                   <property name="text">
-                    <string>B</string>
-                   </property>
-                  </widget>
-                 </item>
-                 <item row="3" column="2">
-                  <widget class="QPushButton" name="C2_button_br">
-                   <property name="enabled">
-                    <bool>false</bool>
-                   </property>
-                   <property name="minimumSize">
-                    <size>
-                     <width>60</width>
-                     <height>60</height>
-                    </size>
-                   </property>
-                   <property name="maximumSize">
-                    <size>
-                     <width>100</width>
-                     <height>100</height>
-                    </size>
-                   </property>
-                   <property name="text">
-                    <string/>
-                   </property>
-                  </widget>
-                 </item>
-                 <item row="0" column="1">
-                  <widget class="QPushButton" name="A1_button_f">
-                   <property name="minimumSize">
-                    <size>
-                     <width>60</width>
-                     <height>60</height>
-                    </size>
-                   </property>
-                   <property name="maximumSize">
-                    <size>
-                     <width>100</width>
-                     <height>100</height>
-                    </size>
-                   </property>
-                   <property name="text">
-                    <string>F</string>
-                   </property>
-                  </widget>
-                 </item>
-                </layout>
-               </widget>
-              </item>
-              <item>
-               <widget class="QFrame" name="direction_param_frame">
-                <property name="frameShape">
-                 <enum>QFrame::StyledPanel</enum>
-                </property>
-                <property name="frameShadow">
-                 <enum>QFrame::Plain</enum>
-                </property>
-                <layout class="QFormLayout" name="formLayout">
-                 <item row="2" column="1">
-                  <widget class="QSpinBox" name="A1_spinbox_step_num">
-                   <property name="suffix">
-                    <string>  step(s)</string>
-                   </property>
-                   <property name="minimum">
-                    <number>2</number>
-                   </property>
-                  </widget>
-                 </item>
-                 <item row="2" column="0">
-                  <widget class="QLabel" name="A0_label_step_num">
-                   <property name="text">
-                    <string>Step Num</string>
-                   </property>
-                  </widget>
-                 </item>
-                 <item row="4" column="0">
-                  <widget class="QLabel" name="B0_label_f_step_length">
-                   <property name="text">
-                    <string>Front Step Length</string>
-                   </property>
-                  </widget>
-                 </item>
-                 <item row="4" column="1">
-                  <widget class="QDoubleSpinBox" name="B1_spinbox_f_step_length">
-                   <property name="suffix">
-                    <string> m</string>
-                   </property>
-                   <property name="decimals">
-                    <number>2</number>
-                   </property>
-                   <property name="maximum">
-                    <double>2.000000000000000</double>
-                   </property>
-                   <property name="singleStep">
-                    <double>0.010000000000000</double>
-                   </property>
-                   <property name="value">
-                    <double>0.100000000000000</double>
-                   </property>
-                  </widget>
-                 </item>
-                 <item row="5" column="0">
-                  <widget class="QLabel" name="C0_label_s_step_length">
-                   <property name="text">
-                    <string>Side Step Length</string>
-                   </property>
-                  </widget>
-                 </item>
-                 <item row="5" column="1">
-                  <widget class="QDoubleSpinBox" name="C1_spinbox_s_step_length">
-                   <property name="suffix">
-                    <string> m</string>
-                   </property>
-                   <property name="decimals">
-                    <number>2</number>
-                   </property>
-                   <property name="maximum">
-                    <double>2.000000000000000</double>
-                   </property>
-                   <property name="singleStep">
-                    <double>0.010000000000000</double>
-                   </property>
-                   <property name="value">
-                    <double>0.050000000000000</double>
-                   </property>
-                  </widget>
-                 </item>
-                 <item row="6" column="0">
-                  <widget class="QLabel" name="D0_label_r_angle">
-                   <property name="text">
-                    <string>Rotation Angle</string>
-                   </property>
-                  </widget>
-                 </item>
-                 <item row="6" column="1">
-                  <widget class="QDoubleSpinBox" name="D1_spinbox_r_angle">
-                   <property name="suffix">
-                    <string> ˚</string>
-                   </property>
-                   <property name="decimals">
-                    <number>1</number>
-                   </property>
-                   <property name="maximum">
-                    <double>180.000000000000000</double>
-                   </property>
-                   <property name="singleStep">
-                    <double>5.000000000000000</double>
-                   </property>
-                   <property name="value">
-                    <double>5.000000000000000</double>
-                   </property>
-                  </widget>
-                 </item>
-                 <item row="3" column="0">
-                  <widget class="QLabel" name="AB0_label_step_time">
-                   <property name="text">
-                    <string>Step Time</string>
-                   </property>
-                  </widget>
-                 </item>
-                 <item row="3" column="1">
-                  <widget class="QDoubleSpinBox" name="AB1_spinbox_step_time">
-                   <property name="suffix">
-                    <string> s</string>
-                   </property>
-                   <property name="maximum">
-                    <double>10.000000000000000</double>
-                   </property>
-                   <property name="singleStep">
-                    <double>0.010000000000000</double>
-                   </property>
-                   <property name="value">
-                    <double>1.000000000000000</double>
-                   </property>
-                  </widget>
-                 </item>
-                </layout>
-               </widget>
-              </item>
-             </layout>
-            </widget>
-           </item>
-           <item>
-            <widget class="QWidget" name="widget" native="true">
-             <layout class="QVBoxLayout" name="verticalLayout_6">
-              <item>
-               <widget class="QGroupBox" name="groupBox_3">
-                <property name="title">
-                 <string>Balance Control</string>
-                </property>
-                <layout class="QGridLayout" name="gridLayout_9">
-                 <item row="0" column="0" colspan="2">
-                  <widget class="QPushButton" name="button_balance_on">
-                   <property name="text">
-                    <string>On</string>
-                   </property>
-                  </widget>
-                 </item>
-                 <item row="0" column="2" colspan="2">
-                  <widget class="QPushButton" name="button_balance_off">
-                   <property name="text">
-                    <string>Off</string>
-                   </property>
-                  </widget>
-                 </item>
-                 <item row="2" column="2" colspan="2">
-                  <widget class="QPushButton" name="button_feedback_gain_apply">
-                   <property name="text">
-                    <string>Apply</string>
-                   </property>
-                  </widget>
-                 </item>
-                 <item row="1" column="0" colspan="4">
-                  <widget class="Line" name="line_5">
-                   <property name="orientation">
-                    <enum>Qt::Horizontal</enum>
-                   </property>
-                  </widget>
-                 </item>
-                 <item row="2" column="0" colspan="2">
-                  <widget class="QLabel" name="label_10">
-                   <property name="text">
-                    <string>Joint Feedback Gain</string>
-                   </property>
-                  </widget>
-                 </item>
-                </layout>
-               </widget>
-              </item>
-             </layout>
-            </widget>
-           </item>
-           <item>
-            <widget class="QGroupBox" name="footstep_planner_widget">
-             <property name="title">
-              <string>FootStep Planner</string>
-             </property>
-             <layout class="QGridLayout" name="gridLayout_8">
-              <item row="0" column="0">
-               <widget class="QPushButton" name="A0_button_get_step">
-                <property name="enabled">
-                 <bool>true</bool>
-                </property>
-                <property name="text">
-                 <string>Plan</string>
-                </property>
-               </widget>
-              </item>
-              <item row="0" column="1">
-               <widget class="QPushButton" name="A1_button_clear_step">
-                <property name="enabled">
-                 <bool>false</bool>
-                </property>
-                <property name="text">
-                 <string>Clear</string>
-                </property>
-               </widget>
-              </item>
-              <item row="0" column="2">
-               <widget class="QPushButton" name="A2_button_go_walking">
-                <property name="enabled">
-                 <bool>false</bool>
-                </property>
-                <property name="text">
-                 <string>GO!</string>
-                </property>
-               </widget>
-              </item>
-             </layout>
-            </widget>
-           </item>
-           <item>
-            <spacer name="verticalSpacer_2">
-             <property name="orientation">
-              <enum>Qt::Vertical</enum>
-             </property>
-             <property name="sizeHint" stdset="0">
-              <size>
-               <width>20</width>
-               <height>40</height>
-              </size>
-             </property>
-            </spacer>
-           </item>
-          </layout>
-         </widget>
-         <widget class="QWidget" name="tab_manipulation_module">
-          <property name="enabled">
-           <bool>true</bool>
-          </property>
-          <attribute name="title">
-           <string>Manipulation</string>
-          </attribute>
-          <layout class="QVBoxLayout" name="verticalLayout_4">
-           <item>
-            <widget class="QGroupBox" name="A_JointControl">
-             <property name="enabled">
-              <bool>true</bool>
-             </property>
-             <property name="title">
-              <string>Joint Control</string>
-             </property>
-             <layout class="QGridLayout" name="gridLayout_2">
-              <item row="2" column="0">
-               <widget class="QLabel" name="label_2">
-                <property name="text">
-                 <string>Joint Name</string>
-                </property>
-               </widget>
-              </item>
-              <item row="2" column="1">
-               <widget class="QComboBox" name="joint_combobox">
-                <item>
-                 <property name="text">
-                  <string>l_arm_sh_p1</string>
-                 </property>
-                </item>
-                <item>
-                 <property name="text">
-                  <string>l_arm_sh_r</string>
-                 </property>
-                </item>
-                <item>
-                 <property name="text">
-                  <string>l_arm_sh_p2</string>
-                 </property>
-                </item>
-                <item>
-                 <property name="text">
-                  <string>l_arm_el_y</string>
-                 </property>
-                </item>
-                <item>
-                 <property name="text">
-                  <string>l_arm_wr_r</string>
-                 </property>
-                </item>
-                <item>
-                 <property name="text">
-                  <string>l_arm_wr_y</string>
-                 </property>
-                </item>
-                <item>
-                 <property name="text">
-                  <string>l_arm_wr_p</string>
-                 </property>
-                </item>
-                <item>
-                 <property name="text">
-                  <string>l_arm_grip</string>
-                 </property>
-                </item>
-                <item>
-                 <property name="text">
-                  <string>r_arm_sh_p1</string>
-                 </property>
-                </item>
-                <item>
-                 <property name="text">
-                  <string>r_arm_sh_r</string>
-                 </property>
-                </item>
-                <item>
-                 <property name="text">
-                  <string>r_arm_sh_p2</string>
-                 </property>
-                </item>
-                <item>
-                 <property name="text">
-                  <string>r_arm_el_y</string>
-                 </property>
-                </item>
-                <item>
-                 <property name="text">
-                  <string>r_arm_wr_r</string>
-                 </property>
-                </item>
-                <item>
-                 <property name="text">
-                  <string>r_arm_wr_y</string>
-                 </property>
-                </item>
-                <item>
-                 <property name="text">
-                  <string>r_arm_wr_p</string>
-                 </property>
-                </item>
-                <item>
-                 <property name="text">
-                  <string>r_arm_grip</string>
-                 </property>
-                </item>
-               </widget>
-              </item>
-              <item row="3" column="0">
-               <widget class="QLabel" name="label">
-                <property name="text">
-                 <string>Joint Value [deg]</string>
-                </property>
-               </widget>
-              </item>
-              <item row="4" column="1">
-               <widget class="QPushButton" name="desjoint_button">
-                <property name="text">
-                 <string>Set Destination Joint Angle</string>
-                </property>
-               </widget>
-              </item>
-              <item row="3" column="1">
-               <widget class="QDoubleSpinBox" name="joint_spinbox">
-                <property name="suffix">
-                 <string> ˚</string>
-                </property>
-                <property name="minimum">
-                 <double>-180.000000000000000</double>
-                </property>
-                <property name="maximum">
-                 <double>180.000000000000000</double>
-                </property>
-               </widget>
-              </item>
-              <item row="0" column="0" colspan="2">
-               <widget class="QPushButton" name="inipose_button">
-                <property name="text">
-                 <string>Manipulation Init Pose</string>
-                </property>
-               </widget>
-              </item>
-              <item row="4" column="0">
-               <widget class="QPushButton" name="currjoint_button">
-                <property name="text">
-                 <string>Get Current Joint Angle</string>
-                </property>
-               </widget>
-              </item>
-              <item row="1" column="0" colspan="2">
-               <widget class="Line" name="line_3">
-                <property name="orientation">
-                 <enum>Qt::Horizontal</enum>
-                </property>
-               </widget>
-              </item>
-             </layout>
-            </widget>
-           </item>
-           <item>
-            <widget class="QGroupBox" name="B_ForwardKinematics">
-             <property name="enabled">
-              <bool>true</bool>
-             </property>
-             <property name="title">
-              <string>Forward Kinematics</string>
-             </property>
-             <layout class="QHBoxLayout" name="horizontalLayout_2">
-              <item>
-               <widget class="QComboBox" name="group_combobox">
-                <property name="enabled">
-                 <bool>true</bool>
-                </property>
-                <property name="editable">
-                 <bool>false</bool>
-                </property>
-                <property name="frame">
-                 <bool>true</bool>
-                </property>
-                <item>
-                 <property name="text">
-                  <string>left_arm</string>
-                 </property>
-                </item>
-                <item>
-                 <property name="text">
-                  <string>right_arm</string>
-                 </property>
-                </item>
-                <item>
-                 <property name="text">
-                  <string>left_arm_with_torso</string>
-                 </property>
-                </item>
-                <item>
-                 <property name="text">
-                  <string>right_arm_with_torso</string>
-                 </property>
-                </item>
-               </widget>
-              </item>
-              <item>
-               <widget class="QPushButton" name="currpos_button">
-                <property name="text">
-                 <string>Get Current Position</string>
-                </property>
-               </widget>
-              </item>
-             </layout>
-            </widget>
-           </item>
-           <item>
-            <widget class="QGroupBox" name="C_InverseKinematics">
-             <property name="enabled">
-              <bool>true</bool>
-             </property>
-             <property name="title">
-              <string>Inverse Kinematics</string>
-             </property>
-             <layout class="QGridLayout" name="gridLayout">
-              <item row="4" column="2">
-               <widget class="QLabel" name="ori_yaw">
-                <property name="text">
-                 <string>orientation yaw [deg]</string>
-                </property>
-               </widget>
-              </item>
-              <item row="4" column="0">
-               <widget class="QLabel" name="pos_z">
-                <property name="text">
-                 <string>position z [m]</string>
-                </property>
-               </widget>
-              </item>
-              <item row="1" column="0">
-               <widget class="QDoubleSpinBox" name="pos_x_spinbox">
-                <property name="suffix">
-                 <string> m</string>
-                </property>
-                <property name="decimals">
-                 <number>3</number>
-                </property>
-                <property name="minimum">
-                 <double>-10.000000000000000</double>
-                </property>
-                <property name="maximum">
-                 <double>10.000000000000000</double>
-                </property>
-                <property name="singleStep">
-                 <double>0.010000000000000</double>
-                </property>
-               </widget>
-              </item>
-              <item row="3" column="0">
-               <widget class="QDoubleSpinBox" name="pos_y_spinbox">
-                <property name="suffix">
-                 <string> m</string>
-                </property>
-                <property name="decimals">
-                 <number>3</number>
-                </property>
-                <property name="minimum">
-                 <double>-10.000000000000000</double>
-                </property>
-                <property name="maximum">
-                 <double>10.000000000000000</double>
-                </property>
-                <property name="singleStep">
-                 <double>0.010000000000000</double>
-                </property>
-               </widget>
-              </item>
-              <item row="2" column="2">
-               <widget class="QLabel" name="ori_pitch">
-                <property name="text">
-                 <string>orientation pitch [deg]</string>
-                </property>
-               </widget>
-              </item>
-              <item row="2" column="0">
-               <widget class="QLabel" name="pos_y">
-                <property name="text">
-                 <string>position y [m]</string>
-                </property>
-               </widget>
-              </item>
-              <item row="0" column="0">
-               <widget class="QLabel" name="pos_x">
-                <property name="text">
-                 <string>position x [m]</string>
-                </property>
-               </widget>
-              </item>
-              <item row="5" column="2">
-               <widget class="QDoubleSpinBox" name="ori_yaw_spinbox">
-                <property name="suffix">
-                 <string> ˚</string>
-                </property>
-                <property name="decimals">
-                 <number>3</number>
-                </property>
-                <property name="minimum">
-                 <double>-360.000000000000000</double>
-                </property>
-                <property name="maximum">
-                 <double>360.000000000000000</double>
-                </property>
-               </widget>
-              </item>
-              <item row="5" column="0">
-               <widget class="QDoubleSpinBox" name="pos_z_spinbox">
-                <property name="suffix">
-                 <string> m</string>
-                </property>
-                <property name="decimals">
-                 <number>3</number>
-                </property>
-                <property name="minimum">
-                 <double>-10.000000000000000</double>
-                </property>
-                <property name="maximum">
-                 <double>10.000000000000000</double>
-                </property>
-                <property name="singleStep">
-                 <double>0.010000000000000</double>
-                </property>
-               </widget>
-              </item>
-              <item row="3" column="2">
-               <widget class="QDoubleSpinBox" name="ori_pitch_spinbox">
-                <property name="suffix">
-                 <string> ˚</string>
-                </property>
-                <property name="decimals">
-                 <number>3</number>
-                </property>
-                <property name="minimum">
-                 <double>-360.000000000000000</double>
-                </property>
-                <property name="maximum">
-                 <double>360.000000000000000</double>
-                </property>
-               </widget>
-              </item>
-              <item row="0" column="2">
-               <widget class="QLabel" name="ori_roll">
-                <property name="text">
-                 <string>orientation roll [deg]</string>
-                </property>
-               </widget>
-              </item>
-              <item row="1" column="2">
-               <widget class="QDoubleSpinBox" name="ori_roll_spinbox">
-                <property name="suffix">
-                 <string> ˚</string>
-                </property>
-                <property name="decimals">
-                 <number>3</number>
-                </property>
-                <property name="minimum">
-                 <double>-360.000000000000000</double>
-                </property>
-                <property name="maximum">
-                 <double>360.000000000000000</double>
-                </property>
-               </widget>
-              </item>
-              <item row="0" column="1" rowspan="6">
-               <widget class="Line" name="line_2">
-                <property name="orientation">
-                 <enum>Qt::Vertical</enum>
-                </property>
-               </widget>
-              </item>
-              <item row="12" column="1" colspan="2">
-               <widget class="QPushButton" name="despos_button">
-                <property name="text">
-                 <string>Set Destination Position</string>
-                </property>
-               </widget>
-              </item>
-              <item row="12" column="0">
-               <widget class="QPushButton" name="get_despos_button">
-                <property name="text">
-                 <string>Get From Interacrive Marker</string>
-                </property>
-               </widget>
-              </item>
-             </layout>
-            </widget>
-           </item>
-           <item>
-            <widget class="QGroupBox" name="D_Gripper">
-             <property name="enabled">
-              <bool>true</bool>
-             </property>
-             <property name="title">
-              <string>Gripper</string>
-             </property>
-             <layout class="QHBoxLayout" name="horizontalLayout_5">
-              <item>
-               <widget class="QComboBox" name="gripper_comboBox">
-                <item>
-                 <property name="text">
-                  <string>r_arm_grip</string>
-                 </property>
-                </item>
-                <item>
-                 <property name="text">
-                  <string>l_arm_grip</string>
-                 </property>
-                </item>
-               </widget>
-              </item>
-              <item>
-               <widget class="QLabel" name="label_9">
-                <property name="text">
-                 <string/>
-                </property>
-               </widget>
-              </item>
-              <item>
-               <widget class="QPushButton" name="button_grip_on">
-                <property name="text">
-                 <string>ON</string>
-                </property>
-               </widget>
-              </item>
-              <item>
-               <widget class="QPushButton" name="button_grip_off">
-                <property name="text">
-                 <string>OFF</string>
-                </property>
-               </widget>
-              </item>
-             </layout>
-            </widget>
-           </item>
-           <item>
-            <spacer name="verticalSpacer_6">
-             <property name="orientation">
-              <enum>Qt::Vertical</enum>
-             </property>
-             <property name="sizeHint" stdset="0">
-              <size>
-               <width>20</width>
-               <height>40</height>
-              </size>
-             </property>
-            </spacer>
-           </item>
-          </layout>
-         </widget>
-         <widget class="QWidget" name="tab_head_control_module">
-          <property name="enabled">
-           <bool>true</bool>
-          </property>
-          <attribute name="title">
-           <string>Head Control</string>
-          </attribute>
-          <layout class="QVBoxLayout" name="verticalLayout_7">
-           <item>
-            <widget class="QGroupBox" name="groupBox_2">
-             <property name="title">
-              <string>Head Joint</string>
-             </property>
-             <layout class="QGridLayout" name="gridLayout_6">
-              <item row="1" column="3">
-               <widget class="QSlider" name="head_tilt_slider">
-                <property name="maximumSize">
-                 <size>
-                  <width>400</width>
-                  <height>16777215</height>
-                 </size>
-                </property>
-                <property name="minimum">
-                 <number>-90</number>
-                </property>
-                <property name="maximum">
-                 <number>90</number>
-                </property>
-                <property name="singleStep">
-                 <number>3</number>
-                </property>
-                <property name="orientation">
-                 <enum>Qt::Horizontal</enum>
-                </property>
-               </widget>
-              </item>
-              <item row="0" column="5" colspan="2">
-               <widget class="QSpinBox" name="head_pan_spinbox">
-                <property name="suffix">
-                 <string> ˚</string>
-                </property>
-                <property name="minimum">
-                 <number>-90</number>
-                </property>
-                <property name="maximum">
-                 <number>90</number>
-                </property>
-                <property name="singleStep">
-                 <number>3</number>
-                </property>
-               </widget>
-              </item>
-              <item row="0" column="2">
-               <widget class="QLabel" name="label_5">
-                <property name="maximumSize">
-                 <size>
-                  <width>20</width>
-                  <height>16777215</height>
-                 </size>
-                </property>
-                <property name="text">
-                 <string>◀</string>
-                </property>
-               </widget>
-              </item>
-              <item row="2" column="5" colspan="2">
-               <widget class="QPushButton" name="head_center_button">
-                <property name="text">
-                 <string>Center</string>
-                </property>
-               </widget>
-              </item>
-              <item row="1" column="5" colspan="2">
-               <widget class="QSpinBox" name="head_tilt_spinbox">
-                <property name="suffix">
-                 <string> ˚</string>
-                </property>
-                <property name="minimum">
-                 <number>-90</number>
-                </property>
-                <property name="maximum">
-                 <number>90</number>
-                </property>
-                <property name="singleStep">
-                 <number>3</number>
-                </property>
-               </widget>
-              </item>
-              <item row="0" column="4">
-               <widget class="QLabel" name="label_6">
-                <property name="maximumSize">
-                 <size>
-                  <width>20</width>
-                  <height>16777215</height>
-                 </size>
-                </property>
-                <property name="text">
-                 <string> ▶ </string>
-                </property>
-               </widget>
-              </item>
-              <item row="0" column="0">
-               <widget class="QLabel" name="label_3">
-                <property name="text">
-                 <string>Head Pan</string>
-                </property>
-               </widget>
-              </item>
-              <item row="0" column="3">
-               <widget class="QSlider" name="head_pan_slider">
-                <property name="maximumSize">
-                 <size>
-                  <width>400</width>
-                  <height>16777215</height>
-                 </size>
-                </property>
-                <property name="minimum">
-                 <number>-90</number>
-                </property>
-                <property name="maximum">
-                 <number>90</number>
-                </property>
-                <property name="singleStep">
-                 <number>3</number>
-                </property>
-                <property name="orientation">
-                 <enum>Qt::Horizontal</enum>
-                </property>
-               </widget>
-              </item>
-              <item row="1" column="0">
-               <widget class="QLabel" name="label_4">
-                <property name="text">
-                 <string>Head Tilt</string>
-                </property>
-               </widget>
-              </item>
-              <item row="3" column="0">
-               <spacer name="verticalSpacer_4">
-                <property name="orientation">
-                 <enum>Qt::Vertical</enum>
-                </property>
-                <property name="sizeHint" stdset="0">
-                 <size>
-                  <width>20</width>
-                  <height>40</height>
-                 </size>
-                </property>
-               </spacer>
-              </item>
-              <item row="0" column="1" rowspan="2">
-               <widget class="Line" name="line_4">
-                <property name="orientation">
-                 <enum>Qt::Vertical</enum>
-                </property>
-               </widget>
-              </item>
-              <item row="1" column="2">
-               <widget class="QLabel" name="label_7">
-                <property name="text">
-                 <string>▼</string>
-                </property>
-               </widget>
-              </item>
-              <item row="1" column="4">
-               <widget class="QLabel" name="label_8">
-                <property name="text">
-                 <string>▲</string>
-                </property>
-               </widget>
-              </item>
-             </layout>
-            </widget>
-           </item>
-          </layout>
-         </widget>
-         <widget class="QWidget" name="tab_action_module">
-          <attribute name="title">
-           <string>Motion</string>
-          </attribute>
-          <layout class="QVBoxLayout" name="verticalLayout_8">
-           <item>
-            <widget class="QCheckBox" name="checkBox_action_script">
-             <property name="text">
-              <string>Action Script</string>
-             </property>
-             <property name="checked">
-              <bool>true</bool>
-             </property>
-            </widget>
-           </item>
-           <item>
-            <widget class="QScrollArea" name="scrollArea">
-             <property name="widgetResizable">
-              <bool>true</bool>
-             </property>
-             <widget class="QWidget" name="scroll_widget_motion">
-              <property name="geometry">
-               <rect>
-                <x>0</x>
-                <y>0</y>
-                <width>796</width>
-                <height>304</height>
-               </rect>
-              </property>
-             </widget>
-            </widget>
-           </item>
-           <item>
-            <spacer name="verticalSpacer_7">
-             <property name="orientation">
-              <enum>Qt::Vertical</enum>
-             </property>
-             <property name="sizeHint" stdset="0">
-              <size>
-               <width>20</width>
-               <height>40</height>
-              </size>
-             </property>
-            </spacer>
-           </item>
-          </layout>
-         </widget>
-         <widget class="QWidget" name="tab_demo">
-          <attribute name="title">
-           <string>Demo</string>
-          </attribute>
-          <layout class="QVBoxLayout" name="verticalLayout_9">
-           <item>
-            <widget class="QGroupBox" name="groupBox_manipulation_demo">
-             <property name="title">
-              <string>Manipulation Demo</string>
-             </property>
-             <layout class="QGridLayout" name="gridLayout_11">
-              <item row="0" column="0">
-               <widget class="QGroupBox" name="groupBox_object_offset">
-                <property name="title">
-                 <string>Object Offset</string>
-                </property>
-                <layout class="QGridLayout" name="gridLayout_12">
-                 <item row="0" column="0">
-                  <widget class="QLabel" name="label_20">
-                   <property name="text">
-                    <string>front-rear</string>
-                   </property>
-                   <property name="alignment">
-                    <set>Qt::AlignCenter</set>
-                   </property>
-                  </widget>
-                 </item>
-                 <item row="0" column="1">
-                  <widget class="QLabel" name="label_21">
-                   <property name="text">
-                    <string>left-right</string>
-                   </property>
-                   <property name="alignment">
-                    <set>Qt::AlignCenter</set>
-                   </property>
-                  </widget>
-                 </item>
-                 <item row="0" column="2">
-                  <widget class="QLabel" name="label_22">
-                   <property name="text">
-                    <string>up-down</string>
-                   </property>
-                   <property name="alignment">
-                    <set>Qt::AlignCenter</set>
-                   </property>
-                  </widget>
-                 </item>
-                 <item row="1" column="0">
-                  <widget class="QDoubleSpinBox" name="dSpinBox_offset_x">
-                   <property name="minimum">
-                    <double>-1.000000000000000</double>
-                   </property>
-                   <property name="maximum">
-                    <double>1.000000000000000</double>
-                   </property>
-                   <property name="singleStep">
-                    <double>0.010000000000000</double>
-                   </property>
-                  </widget>
-                 </item>
-                 <item row="1" column="1">
-                  <widget class="QDoubleSpinBox" name="dSpinBox_offset_y">
-                   <property name="minimum">
-                    <double>-1.000000000000000</double>
-                   </property>
-                   <property name="maximum">
-                    <double>1.000000000000000</double>
-                   </property>
-                   <property name="singleStep">
-                    <double>0.010000000000000</double>
-                   </property>
-                  </widget>
-                 </item>
-                 <item row="1" column="2">
-                  <widget class="QDoubleSpinBox" name="dSpinBox_offset_z">
-                   <property name="minimum">
-                    <double>-1.000000000000000</double>
-                   </property>
-                   <property name="maximum">
-                    <double>1.000000000000000</double>
-                   </property>
-                   <property name="singleStep">
-                    <double>0.010000000000000</double>
-                   </property>
-                  </widget>
-                 </item>
-                </layout>
-               </widget>
-              </item>
-              <item row="0" column="1">
-               <widget class="QGroupBox" name="groupBox_arm_group">
-                <property name="title">
-                 <string>Arm Group</string>
-                </property>
-                <layout class="QVBoxLayout" name="verticalLayout_10">
-                 <item>
-                  <widget class="QComboBox" name="comboBox_arm_group">
-                   <item>
-                    <property name="text">
-                     <string>Right Arm</string>
-                    </property>
-                   </item>
-                   <item>
-                    <property name="text">
-                     <string>Left Arm</string>
-                    </property>
-                   </item>
-                  </widget>
-                 </item>
-                </layout>
-               </widget>
-              </item>
-              <item row="1" column="0" colspan="2">
-               <widget class="QGroupBox" name="groupBox_pick_object">
-                <property name="title">
-                 <string>Pick Object</string>
-                </property>
-                <layout class="QGridLayout" name="gridLayout_14">
-                 <item row="1" column="0">
-                  <widget class="QPushButton" name="button_manipulation_demo_4">
-                   <property name="enabled">
-                    <bool>true</bool>
-                   </property>
-                   <property name="text">
-                    <string>4. Set Marker</string>
-                   </property>
-                   <attribute name="buttonGroup">
-                    <string notr="true">buttonGroup_manipulation_demo</string>
-                   </attribute>
-                  </widget>
-                 </item>
-                 <item row="0" column="1">
-                  <widget class="QPushButton" name="button_manipulation_demo_1">
-                   <property name="enabled">
-                    <bool>true</bool>
-                   </property>
-                   <property name="text">
-                    <string>1. Manipulation mode</string>
-                   </property>
-                   <attribute name="buttonGroup">
-                    <string notr="true">buttonGroup_manipulation_demo</string>
-                   </attribute>
-                  </widget>
-                 </item>
-                 <item row="0" column="2">
-                  <widget class="QPushButton" name="button_manipulation_demo_2">
-                   <property name="enabled">
-                    <bool>true</bool>
-                   </property>
-                   <property name="text">
-                    <string>2.  Ready Pose</string>
-                   </property>
-                   <attribute name="buttonGroup">
-                    <string notr="true">buttonGroup_manipulation_demo</string>
-                   </attribute>
-                  </widget>
-                 </item>
-                 <item row="0" column="3">
-                  <widget class="QPushButton" name="button_manipulation_demo_3">
-                   <property name="enabled">
-                    <bool>true</bool>
-                   </property>
-                   <property name="text">
-                    <string>3. Scan</string>
-                   </property>
-                   <attribute name="buttonGroup">
-                    <string notr="true">buttonGroup_manipulation_demo</string>
-                   </attribute>
-                  </widget>
-                 </item>
-                 <item row="0" column="0">
-                  <widget class="QPushButton" name="button_manipulation_demo_0">
-                   <property name="text">
-                    <string>0. Init Pose</string>
-                   </property>
-                   <attribute name="buttonGroup">
-                    <string notr="true">buttonGroup_manipulation_demo</string>
-                   </attribute>
-                  </widget>
-                 </item>
-                 <item row="1" column="1">
-                  <widget class="QPushButton" name="button_manipulation_demo_5">
-                   <property name="enabled">
-                    <bool>true</bool>
-                   </property>
-                   <property name="text">
-                    <string>5. Send Pose</string>
-                   </property>
-                   <attribute name="buttonGroup">
-                    <string notr="true">buttonGroup_manipulation_demo</string>
-                   </attribute>
-                  </widget>
-                 </item>
-                 <item row="1" column="2">
-                  <widget class="QPushButton" name="button_manipulation_demo_6">
-                   <property name="text">
-                    <string>6. Grip On</string>
-                   </property>
-                  </widget>
-                 </item>
-                 <item row="1" column="3">
-                  <widget class="QPushButton" name="button_manipulation_demo_7">
-                   <property name="text">
-                    <string>7. Grip Off</string>
-                   </property>
-                  </widget>
-                 </item>
-                </layout>
-               </widget>
-              </item>
-             </layout>
-            </widget>
-           </item>
-           <item>
-            <widget class="Line" name="line_8">
-             <property name="orientation">
-              <enum>Qt::Horizontal</enum>
-             </property>
-            </widget>
-           </item>
-           <item>
-            <widget class="QGroupBox" name="groupBox_walking_demo">
-             <property name="title">
-              <string>Walking Demo</string>
-             </property>
-             <layout class="QGridLayout" name="gridLayout_13">
-              <item row="0" column="0">
-               <widget class="QGroupBox" name="groupBox_4">
-                <property name="title">
-                 <string>Foot Group</string>
-                </property>
-                <layout class="QVBoxLayout" name="verticalLayout_11">
-                 <item>
-                  <widget class="QComboBox" name="comboBox_kick_foot">
-                   <item>
-                    <property name="text">
-                     <string>Right Foot</string>
-                    </property>
-                   </item>
-                   <item>
-                    <property name="text">
-                     <string>Left Foot</string>
-                    </property>
-                   </item>
-                  </widget>
-                 </item>
-                </layout>
-               </widget>
-              </item>
-              <item row="1" column="0" colspan="2">
-               <widget class="QGroupBox" name="groupBox_kick">
-                <property name="title">
-                 <string>Kick</string>
-                </property>
-                <layout class="QGridLayout" name="gridLayout_15">
-                 <item row="0" column="3">
-                  <widget class="QPushButton" name="button_walking_demo_3">
-                   <property name="enabled">
-                    <bool>true</bool>
-                   </property>
-                   <property name="text">
-                    <string>3. Set Marker</string>
-                   </property>
-                   <attribute name="buttonGroup">
-                    <string notr="true">buttonGroup_walking_demo</string>
-                   </attribute>
-                  </widget>
-                 </item>
-                 <item row="0" column="1">
-                  <widget class="QPushButton" name="button_walking_demo_1">
-                   <property name="enabled">
-                    <bool>true</bool>
-                   </property>
-                   <property name="text">
-                    <string>1. Scan</string>
-                   </property>
-                   <attribute name="buttonGroup">
-                    <string notr="true">buttonGroup_walking_demo</string>
-                   </attribute>
-                  </widget>
-                 </item>
-                 <item row="0" column="2">
-                  <widget class="QPushButton" name="button_walking_demo_2">
-                   <property name="enabled">
-                    <bool>true</bool>
-                   </property>
-                   <property name="text">
-                    <string>2. Walking mode</string>
-                   </property>
-                   <attribute name="buttonGroup">
-                    <string notr="true">buttonGroup_walking_demo</string>
-                   </attribute>
-                  </widget>
-                 </item>
-                 <item row="0" column="0">
-                  <widget class="QPushButton" name="button_walking_demo_0">
-                   <property name="text">
-                    <string>0. Init Pose</string>
-                   </property>
-                   <attribute name="buttonGroup">
-                    <string notr="true">buttonGroup_walking_demo</string>
-                   </attribute>
-                  </widget>
-                 </item>
-                 <item row="1" column="0">
-                  <widget class="QPushButton" name="button_walking_demo_4">
-                   <property name="enabled">
-                    <bool>true</bool>
-                   </property>
-                   <property name="text">
-                    <string>4. Gen Footsteps</string>
-                   </property>
-                   <attribute name="buttonGroup">
-                    <string notr="true">buttonGroup_walking_demo</string>
-                   </attribute>
-                  </widget>
-                 </item>
-                 <item row="1" column="1">
-                  <widget class="QPushButton" name="button_walking_demo_5">
-                   <property name="enabled">
-                    <bool>true</bool>
-                   </property>
-                   <property name="text">
-                    <string>5. Walk</string>
-                   </property>
-                   <attribute name="buttonGroup">
-                    <string notr="true">buttonGroup_walking_demo</string>
-                   </attribute>
-                  </widget>
-                 </item>
-                 <item row="1" column="3">
-                  <widget class="QPushButton" name="button_walking_demo_7">
-                   <property name="text">
-                    <string>7. Kick</string>
-                   </property>
-                  </widget>
-                 </item>
-                 <item row="1" column="2">
-                  <widget class="QPushButton" name="button_walking_demo_6">
-                   <property name="text">
-                    <string>6. Scan</string>
-                   </property>
-                  </widget>
-                 </item>
-                </layout>
-               </widget>
-              </item>
-             </layout>
-            </widget>
-           </item>
-           <item>
-            <widget class="Line" name="line_9">
-             <property name="orientation">
-              <enum>Qt::Horizontal</enum>
-             </property>
-            </widget>
-           </item>
-           <item>
-            <widget class="QGroupBox" name="groupBox_motion_demo">
-             <property name="title">
-              <string>Motion Demo</string>
-             </property>
-             <layout class="QGridLayout" name="gridLayout_16">
-              <item row="0" column="1">
-               <widget class="QPushButton" name="button_motion_demo_1">
-                <property name="text">
-                 <string>1. Motion mode</string>
-                </property>
-               </widget>
-              </item>
-              <item row="0" column="0">
-               <widget class="QPushButton" name="button_motion_demo_0">
-                <property name="text">
-                 <string>0. Init Pose</string>
-                </property>
-               </widget>
-              </item>
-              <item row="0" column="2">
-               <widget class="QLabel" name="label_23">
-                <property name="text">
-                 <string/>
-                </property>
-               </widget>
-              </item>
-              <item row="0" column="3">
-               <widget class="QLabel" name="label_24">
-                <property name="text">
-                 <string/>
-                </property>
-               </widget>
-              </item>
-              <item row="1" column="0" colspan="4">
-               <widget class="QScrollArea" name="scrollArea_action_module">
-                <property name="widgetResizable">
-                 <bool>true</bool>
-                </property>
-                <widget class="QWidget" name="scroll_widget_demo_motion">
-                 <property name="geometry">
-                  <rect>
-                   <x>0</x>
-                   <y>0</y>
-                   <width>772</width>
-                   <height>106</height>
-                  </rect>
-                 </property>
-                </widget>
-               </widget>
-              </item>
-             </layout>
-            </widget>
-           </item>
-          </layout>
-         </widget>
-        </widget>
-       </item>
-       <item>
-        <spacer name="horizontalSpacer">
-         <property name="orientation">
-          <enum>Qt::Horizontal</enum>
-         </property>
-         <property name="sizeHint" stdset="0">
-          <size>
-           <width>697</width>
-           <height>20</height>
-          </size>
-         </property>
-        </spacer>
-       </item>
-      </layout>
-     </widget>
-    </item>
-   </layout>
-  </widget>
-  <widget class="QMenuBar" name="menubar">
-   <property name="geometry">
-    <rect>
-     <x>0</x>
-     <y>0</y>
-     <width>1700</width>
-     <height>20</height>
-    </rect>
-   </property>
-   <widget class="QMenu" name="menu_File">
-    <property name="title">
-     <string>&amp;App</string>
-    </property>
-    <addaction name="action_Preferences"/>
-    <addaction name="separator"/>
-    <addaction name="actionAbout"/>
-    <addaction name="actionAbout_Qt"/>
-    <addaction name="separator"/>
-    <addaction name="action_Quit"/>
-   </widget>
-   <addaction name="menu_File"/>
-  </widget>
-  <widget class="QStatusBar" name="statusbar"/>
-  <action name="action_Quit">
-   <property name="text">
-    <string>&amp;Quit</string>
-   </property>
-   <property name="shortcut">
-    <string>Ctrl+Q</string>
-   </property>
-   <property name="shortcutContext">
-    <enum>Qt::ApplicationShortcut</enum>
-   </property>
-  </action>
-  <action name="action_Preferences">
-   <property name="text">
-    <string>&amp;Preferences</string>
-   </property>
-  </action>
-  <action name="actionAbout">
-   <property name="text">
-    <string>&amp;About</string>
-   </property>
-  </action>
-  <action name="actionAbout_Qt">
-   <property name="text">
-    <string>About &amp;Qt</string>
-   </property>
-  </action>
- </widget>
- <resources>
-  <include location="../../thormang3_offset_tuner_client/resources/images.qrc"/>
- </resources>
- <connections>
-  <connection>
-   <sender>action_Quit</sender>
-   <signal>triggered()</signal>
-   <receiver>MainWindowDesign</receiver>
-   <slot>close()</slot>
-   <hints>
-    <hint type="sourcelabel">
-     <x>-1</x>
-     <y>-1</y>
-    </hint>
-    <hint type="destinationlabel">
-     <x>399</x>
-     <y>299</y>
-    </hint>
-   </hints>
-  </connection>
-  <connection>
-   <sender>head_pan_slider</sender>
-   <signal>valueChanged(int)</signal>
-   <receiver>head_pan_spinbox</receiver>
-   <slot>setValue(int)</slot>
-   <hints>
-    <hint type="sourcelabel">
-     <x>1108</x>
-     <y>233</y>
-    </hint>
-    <hint type="destinationlabel">
-     <x>1376</x>
-     <y>233</y>
-    </hint>
-   </hints>
-  </connection>
-  <connection>
-   <sender>head_pan_spinbox</sender>
-   <signal>valueChanged(int)</signal>
-   <receiver>head_pan_slider</receiver>
-   <slot>setValue(int)</slot>
-   <hints>
-    <hint type="sourcelabel">
-     <x>1376</x>
-     <y>233</y>
-    </hint>
-    <hint type="destinationlabel">
-     <x>1108</x>
-     <y>233</y>
-    </hint>
-   </hints>
-  </connection>
-  <connection>
-   <sender>head_tilt_slider</sender>
-   <signal>valueChanged(int)</signal>
-   <receiver>head_tilt_spinbox</receiver>
-   <slot>setValue(int)</slot>
-   <hints>
-    <hint type="sourcelabel">
-     <x>1108</x>
-     <y>268</y>
-    </hint>
-    <hint type="destinationlabel">
-     <x>1376</x>
-     <y>268</y>
-    </hint>
-   </hints>
-  </connection>
-  <connection>
-   <sender>head_tilt_spinbox</sender>
-   <signal>valueChanged(int)</signal>
-   <receiver>head_tilt_slider</receiver>
-   <slot>setValue(int)</slot>
-   <hints>
-    <hint type="sourcelabel">
-     <x>1376</x>
-     <y>268</y>
-    </hint>
-    <hint type="destinationlabel">
-     <x>1108</x>
-     <y>268</y>
-    </hint>
-   </hints>
-  </connection>
- </connections>
- <buttongroups>
-  <buttongroup name="buttonGroup_walking_demo"/>
-  <buttongroup name="buttonGroup_manipulation_demo"/>
- </buttongroups>
-</ui>
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_foot_step_generator/CHANGELOG.rst b/ROBOTIS-THORMANG-OPC-for-git/thormang3_foot_step_generator/CHANGELOG.rst
deleted file mode 100644
index 5f8398f..0000000
--- a/ROBOTIS-THORMANG-OPC-for-git/thormang3_foot_step_generator/CHANGELOG.rst
+++ /dev/null
@@ -1,21 +0,0 @@
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-Changelog for package thormang3_foot_step_generator
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-0.2.0 (2016-08-19)
------------
-* added thormang3_offset_tuner_client package
-
-0.1.0 (2016-08-18)
------------
-* first public release for Kinetic
-* applied coding style
-  modified thormang3_offset_tuner_client : dynamic UI
-* step data can be changed in walking.
-* modified thormang3_foot_step_generator for realtime control
-* removed balance_param.yaml
-* added thormang3_motion_script
-  added thormang3_action_msgs
-* modified thormang3_walking_module_msgs
-  added demo : manipulation, walking
-* Contributors: Jay Song, Zerom, Kayman, Pyo
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_foot_step_generator/CMakeLists.txt b/ROBOTIS-THORMANG-OPC-for-git/thormang3_foot_step_generator/CMakeLists.txt
deleted file mode 100644
index 58bdb78..0000000
--- a/ROBOTIS-THORMANG-OPC-for-git/thormang3_foot_step_generator/CMakeLists.txt
+++ /dev/null
@@ -1,87 +0,0 @@
-################################################################################
-# CMake
-################################################################################
-cmake_minimum_required(VERSION 2.8.3)
-project(thormang3_foot_step_generator)
-
-################################################################################
-# Packages
-################################################################################
-find_package(catkin REQUIRED COMPONENTS
-  roscpp
-  roslib
-  cmake_modules
-  std_msgs
-  geometry_msgs
-  message_generation
-  robotis_controller_msgs
-  thormang3_walking_module_msgs
-)
-
-find_package(Eigen REQUIRED)
-
-################################################################################
-# Declare ROS messages, services and actions
-################################################################################
-add_message_files(
-   FILES
-   FootStepCommand.msg
-   Step2D.msg
-   Step2DArray.msg
-)
-
-generate_messages(
-   DEPENDENCIES
-   std_msgs
-   geometry_msgs
-)
-
-################################################################################
-# Declare ROS dynamic reconfigure parameters
-################################################################################
-
-################################################################################
-# Catkin specific configuration
-################################################################################
-catkin_package(
-  CATKIN_DEPENDS message_runtime std_msgs geometry_msgs robotis_controller_msgs thormang3_walking_module_msgs
-)
-
-################################################################################
-# Build
-################################################################################
-include_directories(
-  include
-  ${catkin_INCLUDE_DIRS}
-  ${Eigen_INCLUDE_DIRS}
-)
-
-add_executable(thormang3_foot_step_generator_node
-   src/robotis_foot_step_generator.cpp
-   src/message_callback.cpp
-   src/main.cpp
-)
-
-add_dependencies(thormang3_foot_step_generator_node ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})
-
-target_link_libraries(thormang3_foot_step_generator_node
-   yaml-cpp
-   ${catkin_LIBRARIES}
-)
-
-################################################################################
-# Install
-################################################################################
-install(TARGETS thormang3_foot_step_generator_node
-  ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
-  LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
-  RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
-)
-
-install(DIRECTORY include/${PROJECT_NAME}/
-  DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
-)
-
-################################################################################
-# Test
-################################################################################
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_foot_step_generator/include/thormang3_foot_step_generator/message_callback.h b/ROBOTIS-THORMANG-OPC-for-git/thormang3_foot_step_generator/include/thormang3_foot_step_generator/message_callback.h
deleted file mode 100644
index ff9a9f5..0000000
--- a/ROBOTIS-THORMANG-OPC-for-git/thormang3_foot_step_generator/include/thormang3_foot_step_generator/message_callback.h
+++ /dev/null
@@ -1,74 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2016, ROBOTIS CO., LTD.
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- *
- * * Redistributions of source code must retain the above copyright notice, this
- *   list of conditions and the following disclaimer.
- *
- * * Redistributions in binary form must reproduce the above copyright notice,
- *   this list of conditions and the following disclaimer in the documentation
- *   and/or other materials provided with the distribution.
- *
- * * Neither the name of ROBOTIS nor the names of its
- *   contributors may be used to endorse or promote products derived from
- *   this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
- * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
- * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- *******************************************************************************/
-
-/*
- * message_callback.h
- *
- *  Created on: 2016. 2. 20.
- *      Author: Jay Song
- */
-
-#ifndef THOMAMG3_FOOT_STEP_GENERATOR_MESSAGE_CALLBACK_H_
-#define THOMAMG3_FOOT_STEP_GENERATOR_MESSAGE_CALLBACK_H_
-
-
-#include <ros/ros.h>
-#include <ros/package.h>
-#include <std_msgs/Bool.h>
-#include <std_msgs/String.h>
-
-#include <yaml-cpp/yaml.h>
-
-#include "thormang3_foot_step_generator/FootStepCommand.h"
-#include "thormang3_foot_step_generator/Step2DArray.h"
-
-#include "robotis_controller_msgs/StatusMsg.h"
-#include "thormang3_walking_module_msgs/RobotPose.h"
-#include "thormang3_walking_module_msgs/GetReferenceStepData.h"
-#include "thormang3_walking_module_msgs/AddStepDataArray.h"
-#include "thormang3_walking_module_msgs/StartWalking.h"
-#include "thormang3_walking_module_msgs/SetBalanceParam.h"
-#include "thormang3_walking_module_msgs/IsRunning.h"
-#include "thormang3_walking_module_msgs/RemoveExistingStepData.h"
-
-#include "robotis_foot_step_generator.h"
-
-
-void initialize(void);
-
-void walkingModuleStatusMSGCallback(const robotis_controller_msgs::StatusMsg::ConstPtr& msg);
-
-void walkingCommandCallback(const thormang3_foot_step_generator::FootStepCommand::ConstPtr& msg);
-void step2DArrayCallback(const thormang3_foot_step_generator::Step2DArray::ConstPtr& msg);
-
-bool isRunning(void);
-
-
-#endif /* THOMAMG3_FOOT_STEP_GENERATOR_MESSAGE_CALLBACK_H_ */
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_foot_step_generator/include/thormang3_foot_step_generator/robotis_foot_step_generator.h b/ROBOTIS-THORMANG-OPC-for-git/thormang3_foot_step_generator/include/thormang3_foot_step_generator/robotis_foot_step_generator.h
deleted file mode 100644
index 6b17c33..0000000
--- a/ROBOTIS-THORMANG-OPC-for-git/thormang3_foot_step_generator/include/thormang3_foot_step_generator/robotis_foot_step_generator.h
+++ /dev/null
@@ -1,118 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2016, ROBOTIS CO., LTD.
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- *
- * * Redistributions of source code must retain the above copyright notice, this
- *   list of conditions and the following disclaimer.
- *
- * * Redistributions in binary form must reproduce the above copyright notice,
- *   this list of conditions and the following disclaimer in the documentation
- *   and/or other materials provided with the distribution.
- *
- * * Neither the name of ROBOTIS nor the names of its
- *   contributors may be used to endorse or promote products derived from
- *   this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
- * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
- * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- *******************************************************************************/
-
-/*
- * robotis_foot_step_generator.h
- *
- *  Created on: 2016. 6. 10.
- *      Author: Jay Song
- */
-
-#ifndef THORMANG3_FOOT_STEP_GENERATOR_ROBOTIS_FOOT_STEP_GENERATOR_H_
-#define THORMANG3_FOOT_STEP_GENERATOR_ROBOTIS_FOOT_STEP_GENERATOR_H_
-
-#include <ros/ros.h>
-#include <Eigen/Dense>
-#include "thormang3_walking_module_msgs/AddStepDataArray.h"
-#include "thormang3_foot_step_generator/Step2DArray.h"
-
-#define STOP_WALKING           (0)
-#define FORWARD_WALKING        (1)
-#define BACKWARD_WALKING       (2)
-#define RIGHTWARD_WALKING      (3)
-#define LEFTWARD_WALKING       (4)
-#define LEFT_ROTATING_WALKING  (5)
-#define RIGHT_ROTATING_WALKING (6)
-
-#define MINIMUM_STEP_TIME_SEC  (0.4)
-
-namespace thormang3
-{
-
-class FootStepGenerator
-{
-public:
-  FootStepGenerator();
-  ~FootStepGenerator();
-
-  void initialize();
-
-  void calcRightKickStep(thormang3_walking_module_msgs::AddStepDataArray::Request::_step_data_array_type* step_data_array,
-      const thormang3_walking_module_msgs::StepData& ref_step_data);
-  void calcLeftKickStep(thormang3_walking_module_msgs::AddStepDataArray::Request::_step_data_array_type* step_data_array,
-      const thormang3_walking_module_msgs::StepData& ref_step_data);
-
-  void getStepData(thormang3_walking_module_msgs::AddStepDataArray::Request::_step_data_array_type* step_data_array,
-      const thormang3_walking_module_msgs::StepData& ref_step_data,
-      int desired_step_type);
-
-  void getStepDataFromStepData2DArray(thormang3_walking_module_msgs::AddStepDataArray::Request::_step_data_array_type* step_data_array,
-      const thormang3_walking_module_msgs::StepData& ref_step_data,
-      const thormang3_foot_step_generator::Step2DArray::ConstPtr& request_step_2d);
-
-  int    num_of_step_;
-  double fb_step_length_m_;
-  double rl_step_length_m_;
-  double rotate_step_angle_rad_;
-
-  double step_time_sec_;
-  double start_end_time_sec_;
-  double dsp_ratio_;
-
-  double foot_z_swap_m_;
-  double body_z_swap_m_;
-
-  double default_y_feet_offset_m_;
-
-private:
-  bool calcStep(const thormang3_walking_module_msgs::StepData& ref_step_data, int previous_step_type,  int desired_step_type);
-
-  void calcFBStep(const thormang3_walking_module_msgs::StepData& ref_step_data, int direction);
-  void calcRLStep(const thormang3_walking_module_msgs::StepData& ref_step_data, int direction);
-  void calcRoStep(const thormang3_walking_module_msgs::StepData& ref_step_data, int direction);
-  void calcStopStep(const thormang3_walking_module_msgs::StepData& ref_step_data, int direction);
-
-  Eigen::MatrixXd getTransformationXYZRPY(double position_x, double position_y, double position_z, double roll, double pitch, double yaw);
-  void getPosefromTransformMatrix(const Eigen::MatrixXd &matTransform, double *position_x, double *position_y, double *position_z, double *roll, double *pitch, double *yaw);
-  thormang3_walking_module_msgs::PoseXYZRPY getPosefromTransformMatrix(const Eigen::MatrixXd &matTransform);
-  Eigen::MatrixXd getInverseTransformation(Eigen::MatrixXd transform);
-
-  thormang3_walking_module_msgs::AddStepDataArray::Request::_step_data_array_type step_data_array_;
-
-  int previous_step_type_;
-
-};
-
-
-}
-
-
-
-#endif /* THORMANG3_FOOT_STEP_GENERATOR_ROBOTIS_FOOT_STEP_GENERATOR_H_ */
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_foot_step_generator/msg/FootStepCommand.msg b/ROBOTIS-THORMANG-OPC-for-git/thormang3_foot_step_generator/msg/FootStepCommand.msg
deleted file mode 100644
index 6699ba6..0000000
--- a/ROBOTIS-THORMANG-OPC-for-git/thormang3_foot_step_generator/msg/FootStepCommand.msg
+++ /dev/null
@@ -1,6 +0,0 @@
-string  command
-int32   step_num
-float64 step_time
-float64 step_length
-float64 side_step_length
-float64 step_angle_rad
\ No newline at end of file
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_foot_step_generator/msg/Step2D.msg b/ROBOTIS-THORMANG-OPC-for-git/thormang3_foot_step_generator/msg/Step2D.msg
deleted file mode 100644
index 197993d..0000000
--- a/ROBOTIS-THORMANG-OPC-for-git/thormang3_foot_step_generator/msg/Step2D.msg
+++ /dev/null
@@ -1,11 +0,0 @@
-#2D StepData
-
-geometry_msgs/Pose2D step2d   # step pose as relative offset to last leg
-
-
-# which leg to be used (left/right/no, see below)
-uint8 moving_foot   
-
-uint8 LEFT_FOOT_SWING  = 1 # Left foot constant
-uint8 RIGHT_FOOT_SWING = 2 # Right foot constant
-uint8 STANDING         = 3 # Standing constant
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_foot_step_generator/msg/Step2DArray.msg b/ROBOTIS-THORMANG-OPC-for-git/thormang3_foot_step_generator/msg/Step2DArray.msg
deleted file mode 100644
index 4e6e776..0000000
--- a/ROBOTIS-THORMANG-OPC-for-git/thormang3_foot_step_generator/msg/Step2DArray.msg
+++ /dev/null
@@ -1 +0,0 @@
-Step2D[] footsteps_2d
\ No newline at end of file
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_foot_step_generator/package.xml b/ROBOTIS-THORMANG-OPC-for-git/thormang3_foot_step_generator/package.xml
deleted file mode 100644
index 74f391a..0000000
--- a/ROBOTIS-THORMANG-OPC-for-git/thormang3_foot_step_generator/package.xml
+++ /dev/null
@@ -1,33 +0,0 @@
-<?xml version="1.0"?>
-<package>
-  <name>thormang3_foot_step_generator</name>
-  <version>0.2.0</version>
-  <description>
-    This package provides foot step generation for the thormang3.
-  </description>
-  <license>BSD</license>
-  <author email="hjsong@robotis.com">Jay Song</author>
-  <maintainer email="pyo@robotis.com">Pyo</maintainer>
-  <url type="bugtracker">https://github.com/ROBOTIS-GIT/ROBOTIS-THORMANG-OPC/issues</url>
-  <url type="repository">https://github.com/ROBOTIS-GIT/ROBOTIS-THORMANG-OPC</url>
-  <url type="website">http://wiki.ros.org/thormang3_foot_step_generator</url>
-  <buildtool_depend>catkin</buildtool_depend>
-  <build_depend>roscpp</build_depend>
-  <build_depend>roslib</build_depend>
-  <build_depend>cmake_modules</build_depend>
-  <build_depend>std_msgs</build_depend>
-  <build_depend>geometry_msgs</build_depend>
-  <build_depend>message_generation</build_depend>
-  <build_depend>robotis_controller_msgs</build_depend>
-  <build_depend>thormang3_walking_module_msgs</build_depend>
-  <run_depend>roscpp</run_depend>
-  <run_depend>roslib</run_depend>
-  <run_depend>cmake_modules</run_depend>
-  <run_depend>std_msgs</run_depend>
-  <run_depend>geometry_msgs</run_depend>
-  <run_depend>robotis_controller_msgs</run_depend>
-  <run_depend>thormang3_walking_module_msgs</run_depend>
-  <run_depend>robotis_controller_msgs</run_depend>
-  <run_depend>thormang3_walking_module_msgs</run_depend>
-  <run_depend>message_runtime</run_depend>
-</package>
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_foot_step_generator/src/main.cpp b/ROBOTIS-THORMANG-OPC-for-git/thormang3_foot_step_generator/src/main.cpp
deleted file mode 100644
index 74f2395..0000000
--- a/ROBOTIS-THORMANG-OPC-for-git/thormang3_foot_step_generator/src/main.cpp
+++ /dev/null
@@ -1,48 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2016, ROBOTIS CO., LTD.
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- *
- * * Redistributions of source code must retain the above copyright notice, this
- *   list of conditions and the following disclaimer.
- *
- * * Redistributions in binary form must reproduce the above copyright notice,
- *   this list of conditions and the following disclaimer in the documentation
- *   and/or other materials provided with the distribution.
- *
- * * Neither the name of ROBOTIS nor the names of its
- *   contributors may be used to endorse or promote products derived from
- *   this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
- * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
- * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- *******************************************************************************/
-
-/*
- * main.cpp
- *
- *  Created on: 2016. 2. 20.
- *      Author: Jay Song
- */
-
-#include "thormang3_foot_step_generator/message_callback.h"
-
-int main( int argc , char **argv )
-{
-    ros::init( argc , argv , "thormang3_foot_step_generator" );
-
-    initialize();
-
-    ros::spin();
-    return 0;
-}
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_foot_step_generator/src/message_callback.cpp b/ROBOTIS-THORMANG-OPC-for-git/thormang3_foot_step_generator/src/message_callback.cpp
deleted file mode 100644
index 9e644e6..0000000
--- a/ROBOTIS-THORMANG-OPC-for-git/thormang3_foot_step_generator/src/message_callback.cpp
+++ /dev/null
@@ -1,401 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2016, ROBOTIS CO., LTD.
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- *
- * * Redistributions of source code must retain the above copyright notice, this
- *   list of conditions and the following disclaimer.
- *
- * * Redistributions in binary form must reproduce the above copyright notice,
- *   this list of conditions and the following disclaimer in the documentation
- *   and/or other materials provided with the distribution.
- *
- * * Neither the name of ROBOTIS nor the names of its
- *   contributors may be used to endorse or promote products derived from
- *   this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
- * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
- * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- *******************************************************************************/
-
-/*
- * message_callback.cpp
- *
- *  Created on: 2016. 6. 10.
- *      Author: Jay Song
- */
-
-#include "thormang3_foot_step_generator/message_callback.h"
-
-ros::ServiceClient   g_get_ref_step_data_client;
-ros::ServiceClient   g_add_step_data_array_client;
-
-ros::ServiceClient   g_is_running_client;
-
-ros::ServiceClient  g_set_balance_param_client;
-
-ros::Subscriber     g_walking_module_status_msg_sub;
-
-ros::Subscriber     g_walking_command_sub;
-ros::Subscriber     g_balance_command_sub;
-ros::Subscriber     g_footsteps_2d_sub;
-
-thormang3::FootStepGenerator g_foot_stp_generator;
-
-thormang3_walking_module_msgs::AddStepDataArray     add_step_data_array_srv;
-
-thormang3_foot_step_generator::FootStepCommand last_command;
-double g_last_command_time = 0;
-
-
-bool g_is_running_check_needed = false;
-
-void initialize(void)
-{
-  ros::NodeHandle nh;
-
-  g_get_ref_step_data_client      = nh.serviceClient<thormang3_walking_module_msgs::GetReferenceStepData>("/robotis/walking/get_reference_step_data");
-  g_add_step_data_array_client    = nh.serviceClient<thormang3_walking_module_msgs::AddStepDataArray>("/robotis/walking/add_step_data");
-  g_set_balance_param_client      = nh.serviceClient<thormang3_walking_module_msgs::SetBalanceParam>("/robotis/walking/set_balance_param");
-  g_is_running_client             = nh.serviceClient<thormang3_walking_module_msgs::IsRunning>("/robotis/walking/is_running");
-
-  g_walking_module_status_msg_sub = nh.subscribe("/robotis/status", 10, walkingModuleStatusMSGCallback);
-
-  g_walking_command_sub           = nh.subscribe("/robotis/thormang3_foot_step_generator/walking_command", 0, walkingCommandCallback);
-  g_footsteps_2d_sub              = nh.subscribe("/robotis/thormang3_foot_step_generator/footsteps_2d",    0, step2DArrayCallback);
-
-  g_last_command_time = ros::Time::now().toSec();
-}
-
-void walkingModuleStatusMSGCallback(const robotis_controller_msgs::StatusMsg::ConstPtr& msg)
-{
-  if(msg->type == msg->STATUS_ERROR)
-    ROS_ERROR_STREAM("[Robot] : " << msg->status_msg);
-  else if(msg->type == msg->STATUS_INFO)
-    ROS_INFO_STREAM("[Robot] : " << msg->status_msg);
-  else if(msg->type == msg->STATUS_WARN)
-    ROS_WARN_STREAM("[Robot] : " << msg->status_msg);
-  else if(msg->type == msg->STATUS_UNKNOWN)
-    ROS_ERROR_STREAM("[Robot] : " << msg->status_msg);
-  else
-    ROS_ERROR_STREAM("[Robot] : " << msg->status_msg);
-}
-
-void walkingCommandCallback(const thormang3_foot_step_generator::FootStepCommand::ConstPtr &msg)
-{
-  double now_time = ros::Time::now().toSec();
-
-  if((last_command.command == msg->command)
-      && (last_command.step_num == msg->step_num)
-      && (last_command.step_time == msg->step_time)
-      && (last_command.step_length == msg->step_length)
-      && (last_command.side_step_length == msg->side_step_length)
-      && (last_command.step_angle_rad == msg->step_angle_rad))
-  {
-    //prevent double click
-    if( (fabs(now_time - g_last_command_time) < last_command.step_time) )
-    {
-      ROS_ERROR("Receive same command in short time");
-      return;
-    }
-  }
-
-  g_last_command_time = now_time;
-
-  last_command.command          = msg->command;
-  last_command.step_num         = msg->step_num;
-  last_command.step_time        = msg->step_time;
-  last_command.step_length      = msg->step_length;
-  last_command.side_step_length = msg->side_step_length;
-  last_command.step_angle_rad   = msg->step_angle_rad;
-
-
-  ROS_INFO("[Demo]  : Walking Command");
-  ROS_INFO_STREAM("  command          : " << msg->command );
-  ROS_INFO_STREAM("  step_num         : " << msg->step_num );
-  ROS_INFO_STREAM("  step_time        : " << msg->step_time );
-  ROS_INFO_STREAM("  step_length      : " << msg->step_length);
-  ROS_INFO_STREAM("  side_step_length : " << msg->side_step_length );
-  ROS_INFO_STREAM("  step_angle_rad   : " << msg->step_angle_rad );
-
-  if((msg->step_num == 0)
-      && (msg->command != "left kick")
-      && (msg->command != "right kick")
-      && (msg->command != "stop"))
-    return;
-
-  //set walking parameter
-  if(msg->step_length < 0)
-  {
-    g_foot_stp_generator.fb_step_length_m_ = 0;
-    ROS_ERROR_STREAM("step_length is negative.");
-    ROS_ERROR_STREAM("It will be set to zero.");
-  }
-  else
-  {
-    g_foot_stp_generator.fb_step_length_m_ = msg->step_length;
-  }
-
-  if(msg->side_step_length < 0)
-  {
-    g_foot_stp_generator.rl_step_length_m_ = 0;
-    ROS_ERROR_STREAM("side_step_length is negative.");
-    ROS_ERROR_STREAM("It will be set to zero.");
-  }
-  else
-  {
-    g_foot_stp_generator.rl_step_length_m_ = msg->side_step_length;
-  }
-
-  if(msg->step_angle_rad < 0)
-  {
-    g_foot_stp_generator.rotate_step_angle_rad_ = 0;
-    ROS_ERROR_STREAM("step_angle_rad is negative.");
-    ROS_ERROR_STREAM("It will be set to zero.");
-  }
-  else
-  {
-    g_foot_stp_generator.rotate_step_angle_rad_ = msg->step_angle_rad;
-  }
-
-  if(msg->step_time < MINIMUM_STEP_TIME_SEC)
-  {
-    g_foot_stp_generator.step_time_sec_ = MINIMUM_STEP_TIME_SEC;
-    ROS_ERROR_STREAM("step_time is less than minimum step time. ");
-    ROS_ERROR_STREAM("It will be set to minimum step time(0.4 sec).");
-  }
-  else
-  {
-    g_foot_stp_generator.step_time_sec_ = msg->step_time;
-  }
-
-  g_foot_stp_generator.num_of_step_ = 2*(msg->step_num) + 2;
-
-
-  thormang3_walking_module_msgs::GetReferenceStepData    get_ref_stp_data_srv;
-  thormang3_walking_module_msgs::StepData                ref_step_data;
-  thormang3_walking_module_msgs::AddStepDataArray        add_stp_data_srv;
-
-
-  //get reference step data
-  if(g_get_ref_step_data_client.call(get_ref_stp_data_srv) == false)
-  {
-    ROS_ERROR("Failed to get reference step data");
-    return;
-  }
-
-  ref_step_data = get_ref_stp_data_srv.response.reference_step_data;
-
-  //calc step data
-  if(msg->command == "forward")
-  {
-    if(g_is_running_check_needed == true)
-      if(isRunning() == true)
-        return;
-
-    g_foot_stp_generator.getStepData( &add_stp_data_srv.request.step_data_array, ref_step_data, FORWARD_WALKING);
-    g_is_running_check_needed = false;
-  }
-  else if(msg->command == "backward")
-  {
-    if(g_is_running_check_needed == true)
-      if(isRunning() == true)
-        return;
-
-    g_foot_stp_generator.getStepData( &add_stp_data_srv.request.step_data_array, ref_step_data, BACKWARD_WALKING);
-    g_is_running_check_needed = false;
-  }
-  else if(msg->command == "turn left")
-  {
-    if(g_is_running_check_needed == true)
-      if(isRunning() == true)
-        return;
-
-    g_foot_stp_generator.getStepData( &add_stp_data_srv.request.step_data_array, ref_step_data, LEFT_ROTATING_WALKING);
-    g_is_running_check_needed = false;
-  }
-  else if(msg->command == "turn right")
-  {
-    if(g_is_running_check_needed == true)
-      if(isRunning() == true)
-        return;
-
-    g_foot_stp_generator.getStepData( &add_stp_data_srv.request.step_data_array, ref_step_data, RIGHT_ROTATING_WALKING);
-    g_is_running_check_needed = false;
-  }
-  else if(msg->command == "right")
-  {
-    if(g_is_running_check_needed == true)
-      if(isRunning() == true)
-        return;
-
-    g_foot_stp_generator.getStepData( &add_stp_data_srv.request.step_data_array, ref_step_data, RIGHTWARD_WALKING);
-    g_is_running_check_needed = false;
-  }
-  else if(msg->command == "left")
-  {
-    if(g_is_running_check_needed == true)
-      if(isRunning() == true)
-        return;
-
-    g_foot_stp_generator.getStepData( &add_stp_data_srv.request.step_data_array, ref_step_data, LEFTWARD_WALKING);
-    g_is_running_check_needed = false;
-  }
-  else if(msg->command == "right kick")
-  {
-    if(isRunning() == true)
-      return;
-
-    g_foot_stp_generator.calcRightKickStep( &add_stp_data_srv.request.step_data_array, ref_step_data);
-    g_is_running_check_needed = true;
-  }
-  else if(msg->command == "left kick")
-  {
-    if(isRunning() == true)
-      return;
-
-    g_foot_stp_generator.calcLeftKickStep( &add_stp_data_srv.request.step_data_array, ref_step_data);
-    g_is_running_check_needed = true;
-  }
-  else if(msg->command == "stop")
-  {
-    if(g_is_running_check_needed == true)
-      if(isRunning() == true)
-        return;
-
-    g_foot_stp_generator.getStepData( &add_stp_data_srv.request.step_data_array, ref_step_data, STOP_WALKING);
-    g_is_running_check_needed = false;
-  }
-  else
-  {
-    ROS_ERROR("[Demo]  : Invalid Command");
-    return;
-  }
-
-  //set add step data srv for auto start
-  add_stp_data_srv.request.auto_start = true;
-  add_stp_data_srv.request.remove_existing_step_data = true;
-
-  //add step data
-  if(g_add_step_data_array_client.call(add_stp_data_srv) == true)
-  {
-    int add_stp_data_srv_result = add_stp_data_srv.response.result;
-    if(add_stp_data_srv_result== thormang3_walking_module_msgs::AddStepDataArray::Response::NO_ERROR)
-    {
-      ROS_INFO("[Demo]  : Succeed to add step data array");
-    }
-    else
-    {
-      ROS_ERROR("[Demo]  : Failed to add step data array");
-
-      if(add_stp_data_srv_result & thormang3_walking_module_msgs::AddStepDataArray::Response::NOT_ENABLED_WALKING_MODULE)
-        ROS_ERROR("[Demo]  : STEP_DATA_ERR::NOT_ENABLED_WALKING_MODULE");
-      if(add_stp_data_srv_result & thormang3_walking_module_msgs::AddStepDataArray::Response::PROBLEM_IN_POSITION_DATA)
-        ROS_ERROR("[Demo]  : STEP_DATA_ERR::PROBLEM_IN_POSITION_DATA");
-      if(add_stp_data_srv_result & thormang3_walking_module_msgs::AddStepDataArray::Response::PROBLEM_IN_TIME_DATA)
-        ROS_ERROR("[Demo]  : STEP_DATA_ERR::PROBLEM_IN_TIME_DATA");
-      if(add_stp_data_srv_result & thormang3_walking_module_msgs::AddStepDataArray::Response::TOO_MANY_STEP_DATA)
-        ROS_ERROR("[Demo]  : STEP_DATA_ERR::TOO_MANY_STEP_DATA");
-      if(add_stp_data_srv_result & thormang3_walking_module_msgs::AddStepDataArray::Response::ROBOT_IS_WALKING_NOW)
-        ROS_ERROR("[Demo]  : STEP_DATA_ERR::ROBOT_IS_WALKING_NOW");
-
-      g_foot_stp_generator.initialize();
-
-      return;
-    }
-  }
-  else
-  {
-    ROS_ERROR("[Demo]  : Failed to add step data array ");
-    g_foot_stp_generator.initialize();
-    return;
-  }
-
-}
-
-
-void step2DArrayCallback(const thormang3_foot_step_generator::Step2DArray::ConstPtr& msg)
-{
-  thormang3_walking_module_msgs::GetReferenceStepData get_ref_stp_data_srv;
-  thormang3_walking_module_msgs::StepData             ref_step_data;
-  thormang3_walking_module_msgs::AddStepDataArray     add_stp_data_srv;
-  thormang3_walking_module_msgs::IsRunning            is_running_srv;
-
-  if(isRunning() == true)
-    return;
-
-
-  //get reference step data
-  if(g_get_ref_step_data_client.call(get_ref_stp_data_srv) == false)
-  {
-    ROS_ERROR("[Demo]  : Failed to get reference step data");
-    return;
-  }
-
-  ref_step_data = get_ref_stp_data_srv.response.reference_step_data;
-
-  g_foot_stp_generator.getStepDataFromStepData2DArray(&add_stp_data_srv.request.step_data_array, ref_step_data, msg);
-  g_is_running_check_needed = true;
-
-  //set add step data srv fot auto start and remove existing step data
-  add_stp_data_srv.request.auto_start = true;
-  add_stp_data_srv.request.remove_existing_step_data = true;
-
-  //add step data
-  if(g_add_step_data_array_client.call(add_stp_data_srv) == true)
-  {
-    int add_stp_data_srv_result = add_stp_data_srv.response.result;
-    if(add_stp_data_srv_result== thormang3_walking_module_msgs::AddStepDataArray::Response::NO_ERROR)
-      ROS_INFO("[Demo]  : Succeed to add step data array");
-    else {
-      ROS_ERROR("[Demo]  : Failed to add step data array");
-
-      if(add_stp_data_srv_result & thormang3_walking_module_msgs::AddStepDataArray::Response::NOT_ENABLED_WALKING_MODULE)
-        ROS_ERROR("[Demo]  : STEP_DATA_ERR::NOT_ENABLED_WALKING_MODULE");
-      if(add_stp_data_srv_result & thormang3_walking_module_msgs::AddStepDataArray::Response::PROBLEM_IN_POSITION_DATA)
-        ROS_ERROR("[Demo]  : STEP_DATA_ERR::PROBLEM_IN_POSITION_DATA");
-      if(add_stp_data_srv_result & thormang3_walking_module_msgs::AddStepDataArray::Response::PROBLEM_IN_TIME_DATA)
-        ROS_ERROR("[Demo]  : STEP_DATA_ERR::PROBLEM_IN_TIME_DATA");
-      if(add_stp_data_srv_result & thormang3_walking_module_msgs::AddStepDataArray::Response::ROBOT_IS_WALKING_NOW)
-        ROS_ERROR("[Demo]  : STEP_DATA_ERR::ROBOT_IS_WALKING_NOW");
-
-      return;
-    }
-  }
-  else
-  {
-    ROS_ERROR("[Demo]  : Failed to add step data array ");
-    return;
-  }
-}
-
-bool isRunning(void)
-{
-  thormang3_walking_module_msgs::IsRunning is_running_srv;
-  if(g_is_running_client.call(is_running_srv) == false)
-  {
-    ROS_ERROR("[Demo]  : Failed to Walking Status");
-    return true;
-  }
-  else
-  {
-    if(is_running_srv.response.is_running == true)
-    {
-      ROS_ERROR("[Demo]  : STEP_DATA_ERR::ROBOT_IS_WALKING_NOW");
-      return true;
-    }
-  }
-  return false;
-}
-
-
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_foot_step_generator/src/robotis_foot_step_generator.cpp b/ROBOTIS-THORMANG-OPC-for-git/thormang3_foot_step_generator/src/robotis_foot_step_generator.cpp
deleted file mode 100644
index ae0f7a1..0000000
--- a/ROBOTIS-THORMANG-OPC-for-git/thormang3_foot_step_generator/src/robotis_foot_step_generator.cpp
+++ /dev/null
@@ -1,1226 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2016, ROBOTIS CO., LTD.
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- *
- * * Redistributions of source code must retain the above copyright notice, this
- *   list of conditions and the following disclaimer.
- *
- * * Redistributions in binary form must reproduce the above copyright notice,
- *   this list of conditions and the following disclaimer in the documentation
- *   and/or other materials provided with the distribution.
- *
- * * Neither the name of ROBOTIS nor the names of its
- *   contributors may be used to endorse or promote products derived from
- *   this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
- * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
- * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- *******************************************************************************/
-
-/*
- * robotis_foot_step_generator.cpp
- *
- *  Created on: 2016. 6. 10.
- *      Author: Jay Song
- */
-
-#include <cmath>
-#include "thormang3_foot_step_generator/robotis_foot_step_generator.h"
-
-
-using namespace thormang3;
-
-#define RAD2DEG  (M_PI/180.0)
-
-double sign(double n)
-{
-  if(n < 0)
-    return -1;
-  else if(n > 0)
-    return 1;
-  else
-    return 0;
-}
-
-FootStepGenerator::FootStepGenerator()
-{
-  num_of_step_             = 2*2 + 2;
-  fb_step_length_m_        = 0.1;
-  rl_step_length_m_        = 0.07;
-  rotate_step_angle_rad_   = 10.0*RAD2DEG;
-
-  step_time_sec_ = 1.0;
-  start_end_time_sec_ = 1.6;
-  dsp_ratio_ = 0.2;
-
-  foot_z_swap_m_ = 0.1;
-  body_z_swap_m_ = 0.01;
-
-  default_y_feet_offset_m_ = 0.186;
-
-  previous_step_type_ = STOP_WALKING;
-
-  step_data_array_.clear();
-}
-
-
-FootStepGenerator::~FootStepGenerator()
-{    }
-
-void FootStepGenerator::initialize()
-{
-  previous_step_type_ = STOP_WALKING;
-  step_data_array_.clear();
-}
-
-Eigen::MatrixXd FootStepGenerator::getTransformationXYZRPY(double position_x, double position_y, double position_z, double roll, double pitch, double yaw)
-{
-  double sr = sin(roll), cr = cos(roll);
-  double sp = sin(pitch), cp = cos(pitch);
-  double sy = sin(yaw), cy = cos(yaw);
-
-  Eigen::MatrixXd mat_roll(4,4);
-  Eigen::MatrixXd mat_pitch(4,4);
-  Eigen::MatrixXd mat_yaw(4,4);
-
-  mat_roll <<
-      1, 0, 0, 0,
-      0, cr, -sr, 0,
-      0, sr, cr, 0,
-      0, 0, 0, 1;
-
-  mat_pitch <<
-      cp, 0, sp, 0,
-      0, 1, 0, 0,
-      -sp, 0, cp, 0,
-      0, 0, 0, 1;
-
-  mat_yaw <<
-      cy, -sy, 0, 0,
-      sy, cy, 0, 0,
-      0, 0, 1, 0,
-      0, 0, 0, 1;
-
-  Eigen::MatrixXd mat_xyzrpy = (mat_yaw*mat_pitch)*mat_roll;
-
-  mat_xyzrpy.coeffRef(0, 3) = position_x;
-  mat_xyzrpy.coeffRef(1, 3) = position_y;
-  mat_xyzrpy.coeffRef(2, 3) = position_z;
-
-
-  return mat_xyzrpy;
-}
-
-void FootStepGenerator::getPosefromTransformMatrix(const Eigen::MatrixXd &matTransform, double *position_x, double *position_y, double *position_z, double *roll, double *pitch, double *yaw)
-{
-  *position_x = matTransform.coeff(0, 3);
-  *position_y = matTransform.coeff(1, 3);
-  *position_z = matTransform.coeff(2, 3);
-  *roll       = atan2( matTransform.coeff(2,1), matTransform.coeff(2,2));
-  *pitch      = atan2(-matTransform.coeff(2,0), sqrt(matTransform.coeff(2,1)*matTransform.coeff(2,1) + matTransform.coeff(2,2)*matTransform.coeff(2,2)) );
-  *yaw        = atan2( matTransform.coeff(1,0), matTransform.coeff(0,0));
-}
-
-thormang3_walking_module_msgs::PoseXYZRPY FootStepGenerator::getPosefromTransformMatrix(const Eigen::MatrixXd &matTransform)
-{
-  thormang3_walking_module_msgs::PoseXYZRPY pose;
-
-  double pose_x     = 0;
-  double pose_y     = 0;
-  double pose_z     = 0;
-  double pose_roll  = 0;
-  double pose_pitch = 0;
-  double pose_yaw   = 0;
-
-  getPosefromTransformMatrix(matTransform, &pose_x, &pose_y, &pose_z, &pose_roll, &pose_pitch, &pose_yaw);
-
-  pose.x     = pose_x;
-  pose.y     = pose_y;
-  pose.z     = pose_z;
-  pose.roll  = pose_roll;
-  pose.pitch = pose_pitch;
-  pose.yaw   = pose_yaw;
-
-  return pose;
-}
-
-Eigen::MatrixXd FootStepGenerator::getInverseTransformation(Eigen::MatrixXd transform)
-{
-  // If T is Transform Matrix A from B, the BOA is translation component coordi. B to coordi. A
-
-  Eigen::Vector3d vec_boa;
-  Eigen::Vector3d vec_x, vec_y, vec_z;
-  Eigen::MatrixXd inv_t(4,4);
-
-  vec_boa(0) = -transform(0,3);
-  vec_boa(1) = -transform(1,3);
-  vec_boa(2) = -transform(2,3);
-
-  vec_x(0) = transform(0,0); vec_x(1) = transform(1,0); vec_x(2) = transform(2,0);
-  vec_y(0) = transform(0,1); vec_y(1) = transform(1,1); vec_y(2) = transform(2,1);
-  vec_z(0) = transform(0,2); vec_z(1) = transform(1,2); vec_z(2) = transform(2,2);
-
-  inv_t <<
-      vec_x(0), vec_x(1), vec_x(2), vec_boa.dot(vec_x),
-      vec_y(0), vec_y(1), vec_y(2), vec_boa.dot(vec_y),
-      vec_z(0), vec_z(1), vec_z(2), vec_boa.dot(vec_z),
-      0, 0, 0, 1;
-
-  return inv_t;
-}
-
-void FootStepGenerator::getStepData(thormang3_walking_module_msgs::AddStepDataArray::Request::_step_data_array_type* step_data_array, const thormang3_walking_module_msgs::StepData& ref_step_data, int desired_step_type)
-{
-  step_data_array->clear();
-  step_data_array_.clear();
-
-  if(calcStep(ref_step_data, previous_step_type_, desired_step_type))
-  {
-    previous_step_type_ = desired_step_type;
-    for(unsigned int stp_idx = 0; stp_idx < step_data_array_.size(); stp_idx++)
-    {
-      step_data_array->push_back(step_data_array_[stp_idx]);
-    }
-  }
-  else
-  {
-    return;
-  }
-}
-
-
-
-void FootStepGenerator::getStepDataFromStepData2DArray(thormang3_walking_module_msgs::AddStepDataArray::Request::_step_data_array_type* step_data_array,
-    const thormang3_walking_module_msgs::StepData& ref_step_data,
-    const thormang3_foot_step_generator::Step2DArray::ConstPtr& request_step_2d)
-{
-  step_data_array->clear();
-
-  thormang3_walking_module_msgs::StepData stp_data;
-
-  stp_data = ref_step_data;
-  stp_data.time_data.abs_step_time += start_end_time_sec_;
-  stp_data.time_data.dsp_ratio = dsp_ratio_;
-  stp_data.time_data.walking_state = thormang3_walking_module_msgs::StepTimeData::IN_WALKING_STARTING;
-  stp_data.time_data.start_time_delay_ratio_x     = 0.0;
-  stp_data.time_data.start_time_delay_ratio_y     = 0.0;
-  stp_data.time_data.start_time_delay_ratio_z     = 0.0;
-  stp_data.time_data.start_time_delay_ratio_roll  = 0.0;
-  stp_data.time_data.start_time_delay_ratio_pitch = 0.0;
-  stp_data.time_data.start_time_delay_ratio_yaw   = 0.0;
-  stp_data.time_data.finish_time_advance_ratio_x     = 0.0;
-  stp_data.time_data.finish_time_advance_ratio_y     = 0.0;
-  stp_data.time_data.finish_time_advance_ratio_z     = 0.0;
-  stp_data.time_data.finish_time_advance_ratio_roll  = 0.0;
-  stp_data.time_data.finish_time_advance_ratio_pitch = 0.0;
-  stp_data.time_data.finish_time_advance_ratio_yaw   = 0.0;
-
-  stp_data.position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::STANDING;
-  stp_data.position_data.foot_z_swap = 0;
-  stp_data.position_data.body_z_swap = 0;
-
-  step_data_array->push_back(stp_data);
-
-  for(unsigned int stp_idx = 0; stp_idx < request_step_2d->footsteps_2d.size(); stp_idx++)
-  {
-    stp_data.time_data.abs_step_time += step_time_sec_;
-    stp_data.time_data.walking_state = thormang3_walking_module_msgs::StepTimeData::IN_WALKING;
-
-    if(request_step_2d->footsteps_2d[stp_idx].moving_foot == thormang3_foot_step_generator::Step2D::LEFT_FOOT_SWING)
-    {
-      stp_data.position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::LEFT_FOOT_SWING;
-      stp_data.position_data.body_z_swap = body_z_swap_m_;
-      stp_data.position_data.foot_z_swap = foot_z_swap_m_;
-      stp_data.position_data.left_foot_pose.x   = request_step_2d->footsteps_2d[stp_idx].step2d.x;
-      stp_data.position_data.left_foot_pose.y   = request_step_2d->footsteps_2d[stp_idx].step2d.y;
-      stp_data.position_data.left_foot_pose.yaw = request_step_2d->footsteps_2d[stp_idx].step2d.theta;
-
-    }
-    else if(request_step_2d->footsteps_2d[stp_idx].moving_foot == thormang3_foot_step_generator::Step2D::RIGHT_FOOT_SWING)
-    {
-      stp_data.position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::RIGHT_FOOT_SWING;
-      stp_data.position_data.body_z_swap = body_z_swap_m_;
-      stp_data.position_data.foot_z_swap = foot_z_swap_m_;
-      stp_data.position_data.right_foot_pose.x   = request_step_2d->footsteps_2d[stp_idx].step2d.x;
-      stp_data.position_data.right_foot_pose.y   = request_step_2d->footsteps_2d[stp_idx].step2d.y;
-      stp_data.position_data.right_foot_pose.yaw = request_step_2d->footsteps_2d[stp_idx].step2d.theta;
-    }
-    else
-    {
-      ROS_ERROR("Invalid Step2D");
-      step_data_array->clear();
-      return;
-    }
-
-    if(fabs(stp_data.position_data.right_foot_pose.yaw - stp_data.position_data.left_foot_pose.yaw) > M_PI)
-    {
-      stp_data.position_data.body_pose.yaw = 0.5*(stp_data.position_data.right_foot_pose.yaw + stp_data.position_data.left_foot_pose.yaw)
-                                - sign(0.5*(stp_data.position_data.right_foot_pose.yaw - stp_data.position_data.left_foot_pose.yaw))*M_PI;
-    }
-    else
-    {
-      stp_data.position_data.body_pose.yaw = 0.5*(stp_data.position_data.right_foot_pose.yaw
-          + stp_data.position_data.left_foot_pose.yaw);
-    }
-
-    step_data_array->push_back(stp_data);
-  }
-
-  stp_data.time_data.abs_step_time += start_end_time_sec_;
-  stp_data.time_data.dsp_ratio = dsp_ratio_;
-  stp_data.time_data.walking_state = thormang3_walking_module_msgs::StepTimeData::IN_WALKING_ENDING;
-  stp_data.time_data.start_time_delay_ratio_x     = 0.0;
-  stp_data.time_data.start_time_delay_ratio_y     = 0.0;
-  stp_data.time_data.start_time_delay_ratio_z     = 0.0;
-  stp_data.time_data.start_time_delay_ratio_roll  = 0.0;
-  stp_data.time_data.start_time_delay_ratio_pitch = 0.0;
-  stp_data.time_data.start_time_delay_ratio_yaw   = 0.0;
-  stp_data.time_data.finish_time_advance_ratio_x     = 0.0;
-  stp_data.time_data.finish_time_advance_ratio_y     = 0.0;
-  stp_data.time_data.finish_time_advance_ratio_z     = 0.0;
-  stp_data.time_data.finish_time_advance_ratio_roll  = 0.0;
-  stp_data.time_data.finish_time_advance_ratio_pitch = 0.0;
-  stp_data.time_data.finish_time_advance_ratio_yaw   = 0.0;
-
-  stp_data.position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::STANDING;
-  stp_data.position_data.foot_z_swap = 0;
-  stp_data.position_data.body_z_swap = 0;
-
-  step_data_array->push_back(stp_data);
-}
-
-//
-bool FootStepGenerator::calcStep(const thormang3_walking_module_msgs::StepData& ref_step_data, int previous_step_type,  int desired_step_type)
-{
-  int direction = 0;
-  thormang3_walking_module_msgs::StepData stp_data[2];
-
-  thormang3_walking_module_msgs::PoseXYZRPY poseGtoRF, poseGtoLF;
-  thormang3_walking_module_msgs::PoseXYZRPY poseLtoRF, poseLtoLF;
-
-  poseGtoRF = ref_step_data.position_data.right_foot_pose;
-  poseGtoLF = ref_step_data.position_data.left_foot_pose;
-
-  Eigen::MatrixXd mat_g_to_rf = getTransformationXYZRPY(poseGtoRF.x, poseGtoRF.y, poseGtoRF.z, 0, 0, poseGtoRF.yaw);
-  Eigen::MatrixXd mat_g_to_lf = getTransformationXYZRPY(poseGtoLF.x, poseGtoLF.y, poseGtoLF.z, 0, 0, poseGtoLF.yaw);
-
-  //the local coordinate is set as below.
-  //the below local does not means real local coordinate.
-  //it is just for calculating step data.
-  //the local coordinate will be decide by the moving foot of ref step data
-  Eigen::MatrixXd mat_lf_to_local = getTransformationXYZRPY(0, -0.5*default_y_feet_offset_m_, 0, 0, 0, 0);
-  Eigen::MatrixXd mat_rf_to_local = getTransformationXYZRPY(0,  0.5*default_y_feet_offset_m_, 0, 0, 0, 0);
-  Eigen::MatrixXd mat_global_to_local, mat_local_to_global;
-  if(ref_step_data.position_data.moving_foot == thormang3_walking_module_msgs::StepPositionData::RIGHT_FOOT_SWING)
-  {
-    mat_global_to_local = mat_g_to_rf*mat_rf_to_local;
-    mat_local_to_global = getInverseTransformation(mat_global_to_local);
-    mat_lf_to_local     = getInverseTransformation(mat_g_to_lf) * mat_global_to_local;
-  }
-  else 
-  {
-    mat_global_to_local = mat_g_to_lf * mat_lf_to_local;;
-    mat_local_to_global = getInverseTransformation(mat_global_to_local);
-    mat_rf_to_local     = getInverseTransformation(mat_g_to_rf) * mat_global_to_local;
-  }
-
-  Eigen::MatrixXd mat_local_to_rf = mat_local_to_global * mat_g_to_rf;
-  Eigen::MatrixXd mat_local_to_lf = mat_local_to_global * mat_g_to_lf;
-
-  poseLtoRF = getPosefromTransformMatrix(mat_local_to_rf);
-  poseLtoLF = getPosefromTransformMatrix(mat_local_to_lf);
-
-  if((desired_step_type == FORWARD_WALKING) || (desired_step_type == LEFTWARD_WALKING) || (desired_step_type == LEFT_ROTATING_WALKING))
-    direction = 1;
-  else if((desired_step_type == BACKWARD_WALKING ) || (desired_step_type == RIGHTWARD_WALKING) || (desired_step_type == RIGHT_ROTATING_WALKING))
-    direction = -1;
-  else if(desired_step_type == STOP_WALKING)
-    direction = 0;
-  else
-    return false;
-
-
-  stp_data[0] = ref_step_data;
-  stp_data[0].position_data.torso_yaw_angle_rad = 0.0*M_PI;
-
-  stp_data[0].position_data.right_foot_pose = poseLtoRF;
-  stp_data[0].position_data.left_foot_pose = poseLtoLF;
-  stp_data[0].time_data.start_time_delay_ratio_x     = 0.0;
-  stp_data[0].time_data.start_time_delay_ratio_y     = 0.0;
-  stp_data[0].time_data.start_time_delay_ratio_z     = 0.0;
-  stp_data[0].time_data.start_time_delay_ratio_roll  = 0.0;
-  stp_data[0].time_data.start_time_delay_ratio_pitch = 0.0;
-  stp_data[0].time_data.start_time_delay_ratio_yaw   = 0.0;
-  stp_data[0].time_data.finish_time_advance_ratio_x     = 0.0;
-  stp_data[0].time_data.finish_time_advance_ratio_y     = 0.0;
-  stp_data[0].time_data.finish_time_advance_ratio_z     = 0.0;
-  stp_data[0].time_data.finish_time_advance_ratio_roll  = 0.0;
-  stp_data[0].time_data.finish_time_advance_ratio_pitch = 0.0;
-  stp_data[0].time_data.finish_time_advance_ratio_yaw   = 0.0;
-
-
-  if(stp_data[0].time_data.walking_state != thormang3_walking_module_msgs::StepTimeData::IN_WALKING)
-  {
-    if(desired_step_type == FORWARD_WALKING || desired_step_type == BACKWARD_WALKING )
-      calcFBStep(stp_data[0], direction);
-    else if(desired_step_type == RIGHTWARD_WALKING || desired_step_type == LEFTWARD_WALKING )
-      calcRLStep(stp_data[0], direction);
-    else if(desired_step_type == LEFT_ROTATING_WALKING || desired_step_type == RIGHT_ROTATING_WALKING )
-      calcRoStep(stp_data[0], direction);
-    else if(desired_step_type == STOP_WALKING)
-      calcStopStep(stp_data[0], direction);
-    else
-      return false;
-  }
-  else
-  {
-    if(desired_step_type != previous_step_type)
-    {
-      stp_data[0].time_data.walking_state = thormang3_walking_module_msgs::StepTimeData::IN_WALKING;
-      if((fabs(poseLtoRF.yaw - poseLtoLF.yaw) > 0)
-          || (fabs(poseLtoRF.y - poseLtoLF.y) > default_y_feet_offset_m_)
-          || (fabs(poseLtoRF.x - poseLtoLF.x) > 0))
-      {
-        stp_data[0].time_data.abs_step_time += step_time_sec_;
-        if(ref_step_data.position_data.moving_foot == thormang3_walking_module_msgs::StepPositionData::LEFT_FOOT_SWING)
-        {
-          stp_data[0].position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::RIGHT_FOOT_SWING;
-          stp_data[0].position_data.right_foot_pose.x   = stp_data[0].position_data.left_foot_pose.x;
-          stp_data[0].position_data.right_foot_pose.y   = stp_data[0].position_data.left_foot_pose.y - default_y_feet_offset_m_;
-          stp_data[0].position_data.right_foot_pose.yaw = stp_data[0].position_data.left_foot_pose.yaw;
-        }
-        else
-        {
-          stp_data[0].position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::LEFT_FOOT_SWING;
-          stp_data[0].position_data.left_foot_pose.x   = stp_data[0].position_data.right_foot_pose.x;
-          stp_data[0].position_data.left_foot_pose.y   = stp_data[0].position_data.right_foot_pose.y + default_y_feet_offset_m_;
-          stp_data[0].position_data.left_foot_pose.yaw = stp_data[0].position_data.right_foot_pose.yaw;
-        }
-        step_data_array_.push_back(stp_data[0]);
-      }
-
-//      if(previous_step_type == FORWARD_WALKING || previous_step_type == BACKWARD_WALKING)
-//      {
-//        if(fabs(poseLtoRF.x - poseLtoLF.x) >= 0.001)
-//        {
-//          stp_data[0].time_data.abs_step_time += step_time_sec_;
-//
-//          if(ref_step_data.position_data.moving_foot == thormang3_walking_module_msgs::StepPositionData::LEFT_FOOT_SWING)
-//          {
-//            stp_data[0].position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::RIGHT_FOOT_SWING;
-//            stp_data[0].position_data.right_foot_pose.x = stp_data[0].position_data.left_foot_pose.x;
-//          }
-//          else {
-//            stp_data[0].position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::LEFT_FOOT_SWING;
-//            stp_data[0].position_data.left_foot_pose.x = stp_data[0].position_data.right_foot_pose.x;
-//          }
-//
-//          step_data_array_.push_back(stp_data[0]);
-//        }
-//      }
-//      else if(previous_step_type == LEFTWARD_WALKING || previous_step_type == RIGHTWARD_WALKING)
-//      {
-//        if(fabs(poseLtoRF.y - poseLtoLF.y) >= default_y_feet_offset_m_ - 0.001)
-//        {
-//          stp_data[0].time_data.abs_step_time += step_time_sec_;
-//
-//          if(ref_step_data.position_data.moving_foot == thormang3_walking_module_msgs::StepPositionData::LEFT_FOOT_SWING)
-//          {
-//            stp_data[0].position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::RIGHT_FOOT_SWING;
-//            stp_data[0].position_data.right_foot_pose.y = stp_data[0].position_data.left_foot_pose.y - default_y_feet_offset_m_;
-//          }
-//          else
-//          {
-//            stp_data[0].position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::LEFT_FOOT_SWING;
-//            stp_data[0].position_data.left_foot_pose.y = stp_data[0].position_data.right_foot_pose.y + default_y_feet_offset_m_;
-//          }
-//
-//          step_data_array_.push_back(stp_data[0]);
-//        }
-//      }
-//      else if(previous_step_type == LEFT_ROTATING_WALKING || previous_step_type == RIGHT_ROTATING_WALKING)
-//      {
-//        if(fabs(poseLtoRF.yaw - poseLtoLF.yaw) > 0.0000001)
-//        {
-//          stp_data[0].time_data.abs_step_time += step_time_sec_;
-//          if(ref_step_data.position_data.moving_foot == thormang3_walking_module_msgs::StepPositionData::LEFT_FOOT_SWING)
-//          {
-//            stp_data[0].position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::RIGHT_FOOT_SWING;
-//            stp_data[0].position_data.right_foot_pose.x   = stp_data[0].position_data.left_foot_pose.x;
-//            stp_data[0].position_data.right_foot_pose.y   = stp_data[0].position_data.left_foot_pose.y - default_y_feet_offset_m_;
-//            stp_data[0].position_data.right_foot_pose.yaw = stp_data[0].position_data.left_foot_pose.yaw;
-//          }
-//          else
-//          {
-//            stp_data[0].position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::LEFT_FOOT_SWING;
-//            stp_data[0].position_data.left_foot_pose.x   = stp_data[0].position_data.right_foot_pose.x;
-//            stp_data[0].position_data.left_foot_pose.y   = stp_data[0].position_data.right_foot_pose.y + default_y_feet_offset_m_;
-//            stp_data[0].position_data.left_foot_pose.yaw = stp_data[0].position_data.right_foot_pose.yaw;
-//          }
-//          step_data_array_.push_back(stp_data[0]);
-//        }
-//      }
-//      else if(previous_step_type == STOP_WALKING)
-//      {
-//        if((fabs(poseLtoRF.yaw - poseLtoLF.yaw) > 0.0000001)
-//            || (fabs(poseLtoRF.y - poseLtoLF.y) >= default_y_feet_offset_m_ - 0.001)
-//            || (fabs(poseLtoRF.x - poseLtoLF.x) >= 0.001))
-//        {
-//          stp_data[0].time_data.abs_step_time += step_time_sec_;
-//          if(ref_step_data.position_data.moving_foot == thormang3_walking_module_msgs::StepPositionData::LEFT_FOOT_SWING)
-//          {
-//            stp_data[0].position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::RIGHT_FOOT_SWING;
-//            stp_data[0].position_data.right_foot_pose.x   = stp_data[0].position_data.left_foot_pose.x;
-//            stp_data[0].position_data.right_foot_pose.y   = stp_data[0].position_data.left_foot_pose.y - default_y_feet_offset_m_;
-//            stp_data[0].position_data.right_foot_pose.yaw = stp_data[0].position_data.left_foot_pose.yaw;
-//          }
-//          else
-//          {
-//            stp_data[0].position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::LEFT_FOOT_SWING;
-//            stp_data[0].position_data.left_foot_pose.x   = stp_data[0].position_data.right_foot_pose.x;
-//            stp_data[0].position_data.left_foot_pose.y   = stp_data[0].position_data.right_foot_pose.y + default_y_feet_offset_m_;
-//            stp_data[0].position_data.left_foot_pose.yaw = stp_data[0].position_data.right_foot_pose.yaw;
-//          }
-//          step_data_array_.push_back(stp_data[0]);
-//        }
-//      }
-//      else
-//      {
-//        return false;
-//      }
-
-
-      stp_data[1] = stp_data[0];
-      if(desired_step_type == FORWARD_WALKING || desired_step_type == BACKWARD_WALKING || desired_step_type == STOP_WALKING)
-      {
-
-      }
-      else if(desired_step_type == LEFTWARD_WALKING || desired_step_type == LEFT_ROTATING_WALKING)
-      {
-        if(stp_data[0].position_data.moving_foot == thormang3_walking_module_msgs::StepPositionData::LEFT_FOOT_SWING)
-        {
-          stp_data[1].time_data.abs_step_time += step_time_sec_;
-          stp_data[1].position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::RIGHT_FOOT_SWING;
-          step_data_array_.push_back(stp_data[1]);
-        }
-      }
-      else if(desired_step_type == RIGHTWARD_WALKING || desired_step_type == RIGHT_ROTATING_WALKING)
-      {
-        if(stp_data[0].position_data.moving_foot == thormang3_walking_module_msgs::StepPositionData::RIGHT_FOOT_SWING)
-        {
-          stp_data[1].time_data.abs_step_time += step_time_sec_;
-          stp_data[1].position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::LEFT_FOOT_SWING;
-          step_data_array_.push_back(stp_data[1]);
-        }
-      }
-      else
-      {
-        return false;
-      }
-
-      if(desired_step_type == FORWARD_WALKING || desired_step_type == BACKWARD_WALKING )
-      {
-        calcFBStep(stp_data[1], direction);
-      }
-      else if(desired_step_type == RIGHTWARD_WALKING || desired_step_type == LEFTWARD_WALKING )
-      {
-        calcRLStep(stp_data[1], direction);
-      }
-      else if(desired_step_type == LEFT_ROTATING_WALKING || desired_step_type == RIGHT_ROTATING_WALKING )
-      {
-        calcRoStep(stp_data[1], direction);
-      }
-      else if(desired_step_type == STOP_WALKING)
-      {
-        calcStopStep(stp_data[1], direction);
-      }
-      else
-      {
-        return false;
-      }
-    }
-    else
-    {
-      if(desired_step_type == FORWARD_WALKING || desired_step_type == BACKWARD_WALKING )
-      {
-        calcFBStep(stp_data[0], direction);
-      }
-      else if(desired_step_type == RIGHTWARD_WALKING || desired_step_type == LEFTWARD_WALKING )
-      {
-        calcRLStep(stp_data[0], direction);
-      }
-      else if(desired_step_type == LEFT_ROTATING_WALKING || desired_step_type == RIGHT_ROTATING_WALKING )
-      {
-        calcRoStep(stp_data[0], direction);
-      }
-      else if(desired_step_type == STOP_WALKING)
-      {
-        calcStopStep(stp_data[0], direction);
-      }
-      else
-      {
-        return false;
-      }
-    }
-  }
-
-
-  for(unsigned int stp_idx = 0; stp_idx < step_data_array_.size(); stp_idx++)
-  {
-    Eigen::MatrixXd mat_r_foot = getTransformationXYZRPY(step_data_array_[stp_idx].position_data.right_foot_pose.x,
-        step_data_array_[stp_idx].position_data.right_foot_pose.y,
-        step_data_array_[stp_idx].position_data.right_foot_pose.z,
-        step_data_array_[stp_idx].position_data.right_foot_pose.roll,
-        step_data_array_[stp_idx].position_data.right_foot_pose.pitch,
-        step_data_array_[stp_idx].position_data.right_foot_pose.yaw);
-
-    Eigen::MatrixXd mat_l_foot = getTransformationXYZRPY(step_data_array_[stp_idx].position_data.left_foot_pose.x,
-        step_data_array_[stp_idx].position_data.left_foot_pose.y,
-        step_data_array_[stp_idx].position_data.left_foot_pose.z,
-        step_data_array_[stp_idx].position_data.left_foot_pose.roll,
-        step_data_array_[stp_idx].position_data.left_foot_pose.pitch,
-        step_data_array_[stp_idx].position_data.left_foot_pose.yaw);
-
-    step_data_array_[stp_idx].position_data.right_foot_pose = getPosefromTransformMatrix(mat_global_to_local * mat_r_foot);
-    step_data_array_[stp_idx].position_data.left_foot_pose  = getPosefromTransformMatrix(mat_global_to_local * mat_l_foot);
-
-
-    if(fabs(step_data_array_[stp_idx].position_data.right_foot_pose.yaw - step_data_array_[stp_idx].position_data.left_foot_pose.yaw) > M_PI)
-    {
-      step_data_array_[stp_idx].position_data.body_pose.yaw = 0.5*(step_data_array_[stp_idx].position_data.right_foot_pose.yaw + step_data_array_[stp_idx].position_data.left_foot_pose.yaw)
-          - sign(0.5*(step_data_array_[stp_idx].position_data.right_foot_pose.yaw - step_data_array_[stp_idx].position_data.left_foot_pose.yaw))*M_PI;
-    }
-    else
-    {
-      step_data_array_[stp_idx].position_data.body_pose.yaw = 0.5*(step_data_array_[stp_idx].position_data.right_foot_pose.yaw
-          + step_data_array_[stp_idx].position_data.left_foot_pose.yaw);
-    }
-  }
-
-  return true;
-}
-
-
-void FootStepGenerator::calcFBStep(const thormang3_walking_module_msgs::StepData& ref_step_data, int direction)
-{
-  thormang3_walking_module_msgs::StepData stp_data[num_of_step_];
-  stp_data[0] = ref_step_data;
-
-  if(ref_step_data.time_data.walking_state == thormang3_walking_module_msgs::StepTimeData::IN_WALKING)
-  {
-    stp_data[0].time_data.abs_step_time += step_time_sec_;
-    stp_data[0].time_data.dsp_ratio = dsp_ratio_;
-    stp_data[0].position_data.body_z_swap = body_z_swap_m_;
-    stp_data[0].position_data.foot_z_swap = foot_z_swap_m_;
-    if(stp_data[0].position_data.moving_foot == thormang3_walking_module_msgs::StepPositionData::LEFT_FOOT_SWING)
-    {
-      stp_data[0].position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::RIGHT_FOOT_SWING;
-      stp_data[0].position_data.right_foot_pose.x = stp_data[0].position_data.left_foot_pose.x + (double)direction*fb_step_length_m_;
-    }
-    else
-    {
-      stp_data[0].position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::LEFT_FOOT_SWING;
-      stp_data[0].position_data.left_foot_pose.x = stp_data[0].position_data.right_foot_pose.x + (double)direction*fb_step_length_m_;
-    }
-
-    for(int stp_idx = 1; stp_idx < num_of_step_-2; stp_idx++)
-    {
-      stp_data[stp_idx] = stp_data[stp_idx-1];
-      stp_data[stp_idx].time_data.abs_step_time += step_time_sec_;
-      if(stp_data[stp_idx].position_data.moving_foot == thormang3_walking_module_msgs::StepPositionData::LEFT_FOOT_SWING)
-      {
-        stp_data[stp_idx].position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::RIGHT_FOOT_SWING;
-        stp_data[stp_idx].position_data.right_foot_pose.x = stp_data[stp_idx].position_data.left_foot_pose.x + (double)direction*fb_step_length_m_;
-      }
-      else
-      {
-        stp_data[stp_idx].position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::LEFT_FOOT_SWING;
-        stp_data[stp_idx].position_data.left_foot_pose.x = stp_data[stp_idx].position_data.right_foot_pose.x + (double)direction*fb_step_length_m_;
-      }
-    }
-
-    stp_data[num_of_step_-2] = stp_data[num_of_step_-3];
-    stp_data[num_of_step_-2].time_data.abs_step_time += step_time_sec_;
-    if(stp_data[num_of_step_-2].position_data.moving_foot == thormang3_walking_module_msgs::StepPositionData::LEFT_FOOT_SWING)
-    {
-      stp_data[num_of_step_-2].position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::RIGHT_FOOT_SWING;
-      stp_data[num_of_step_-2].position_data.right_foot_pose.x = stp_data[num_of_step_-2].position_data.left_foot_pose.x;
-    }
-    else
-    {
-      stp_data[num_of_step_-2].position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::LEFT_FOOT_SWING;
-      stp_data[num_of_step_-2].position_data.left_foot_pose.x = stp_data[num_of_step_-2].position_data.right_foot_pose.x;
-    }
-
-    stp_data[num_of_step_-1] = stp_data[num_of_step_-2];
-    stp_data[num_of_step_-1].time_data.abs_step_time += start_end_time_sec_;
-    stp_data[num_of_step_-1].time_data.walking_state = thormang3_walking_module_msgs::StepTimeData::IN_WALKING_ENDING;
-    stp_data[num_of_step_-1].position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::STANDING;
-    stp_data[num_of_step_-1].position_data.body_z_swap = 0;
-  }
-  else
-  {
-    stp_data[0].time_data.walking_state = thormang3_walking_module_msgs::StepTimeData::IN_WALKING_STARTING;
-    stp_data[0].time_data.abs_step_time += start_end_time_sec_;
-    stp_data[0].position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::STANDING;
-    stp_data[0].position_data.body_z_swap = 0;
-
-    for(int stp_idx = 1; stp_idx < num_of_step_-2; stp_idx++)
-    {
-      stp_data[stp_idx] = stp_data[stp_idx-1];
-      stp_data[stp_idx].time_data.walking_state = thormang3_walking_module_msgs::StepTimeData::IN_WALKING;
-      stp_data[stp_idx].time_data.abs_step_time += step_time_sec_;
-      stp_data[stp_idx].time_data.dsp_ratio = dsp_ratio_;
-      stp_data[stp_idx].position_data.body_z_swap = body_z_swap_m_;
-      stp_data[stp_idx].position_data.foot_z_swap = foot_z_swap_m_;
-
-      if(stp_data[stp_idx].position_data.moving_foot == thormang3_walking_module_msgs::StepPositionData::LEFT_FOOT_SWING)
-      {
-        stp_data[stp_idx].position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::RIGHT_FOOT_SWING;
-        stp_data[stp_idx].position_data.right_foot_pose.x = stp_data[stp_idx].position_data.left_foot_pose.x + (double)direction*fb_step_length_m_;
-      }
-      else
-      {
-        stp_data[stp_idx].position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::LEFT_FOOT_SWING;
-        stp_data[stp_idx].position_data.left_foot_pose.x = stp_data[stp_idx].position_data.right_foot_pose.x + (double)direction*fb_step_length_m_;
-      }
-    }
-
-    stp_data[num_of_step_-2] = stp_data[num_of_step_-3];
-    stp_data[num_of_step_-2].time_data.abs_step_time += step_time_sec_;
-    if(stp_data[num_of_step_-2].position_data.moving_foot == thormang3_walking_module_msgs::StepPositionData::LEFT_FOOT_SWING)
-    {
-      stp_data[num_of_step_-2].position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::RIGHT_FOOT_SWING;
-      stp_data[num_of_step_-2].position_data.right_foot_pose.x = stp_data[num_of_step_-2].position_data.left_foot_pose.x;
-    }
-    else
-    {
-      stp_data[num_of_step_-2].position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::LEFT_FOOT_SWING;
-      stp_data[num_of_step_-2].position_data.left_foot_pose.x = stp_data[num_of_step_-2].position_data.right_foot_pose.x;
-    }
-
-    stp_data[num_of_step_-1] = stp_data[num_of_step_-2];
-    stp_data[num_of_step_-1].time_data.abs_step_time += start_end_time_sec_;
-    stp_data[num_of_step_-1].time_data.walking_state = thormang3_walking_module_msgs::StepTimeData::IN_WALKING_ENDING;
-    stp_data[num_of_step_-1].position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::STANDING;
-    stp_data[num_of_step_-1].position_data.body_z_swap = 0;
-  }
-
-  for(int stp_idx = 0; stp_idx < num_of_step_; stp_idx++)
-  {
-    step_data_array_.push_back(stp_data[stp_idx]);
-  }
-}
-
-void FootStepGenerator::calcRLStep(const thormang3_walking_module_msgs::StepData& ref_step_data, int direction)
-{
-  thormang3_walking_module_msgs::StepData stp_data[num_of_step_];
-  stp_data[0] = ref_step_data;
-
-  if(ref_step_data.time_data.walking_state == thormang3_walking_module_msgs::StepTimeData::IN_WALKING)
-  {
-    stp_data[0].time_data.abs_step_time += step_time_sec_;
-    stp_data[0].time_data.dsp_ratio = dsp_ratio_;
-    stp_data[0].position_data.body_z_swap = body_z_swap_m_;
-    stp_data[0].position_data.foot_z_swap = foot_z_swap_m_;
-    if(stp_data[0].position_data.moving_foot == thormang3_walking_module_msgs::StepPositionData::LEFT_FOOT_SWING)
-    {
-      stp_data[0].position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::RIGHT_FOOT_SWING;
-      stp_data[0].position_data.right_foot_pose.y = stp_data[0].position_data.right_foot_pose.y + (double)direction*rl_step_length_m_;
-    }
-    else
-    {
-      stp_data[0].position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::LEFT_FOOT_SWING;
-      stp_data[0].position_data.left_foot_pose.y = stp_data[0].position_data.left_foot_pose.y + (double)direction*rl_step_length_m_;
-    }
-
-    for(int stp_idx = 1; stp_idx < num_of_step_-2; stp_idx++)
-    {
-      stp_data[stp_idx] = stp_data[stp_idx-1];
-      stp_data[stp_idx].time_data.abs_step_time += step_time_sec_;
-      if(stp_data[stp_idx].position_data.moving_foot == thormang3_walking_module_msgs::StepPositionData::LEFT_FOOT_SWING)
-      {
-        stp_data[stp_idx].position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::RIGHT_FOOT_SWING;
-        stp_data[stp_idx].position_data.right_foot_pose.y = stp_data[stp_idx].position_data.right_foot_pose.y + (double)direction*rl_step_length_m_;
-      }
-      else
-      {
-        stp_data[stp_idx].position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::LEFT_FOOT_SWING;
-        stp_data[stp_idx].position_data.left_foot_pose.y = stp_data[stp_idx].position_data.left_foot_pose.y + (double)direction*rl_step_length_m_;
-      }
-    }
-
-    stp_data[num_of_step_-2] = stp_data[num_of_step_-3];
-    stp_data[num_of_step_-2].time_data.abs_step_time += step_time_sec_;
-    if(stp_data[num_of_step_-2].position_data.moving_foot == thormang3_walking_module_msgs::StepPositionData::LEFT_FOOT_SWING)
-    {
-      stp_data[num_of_step_-2].position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::RIGHT_FOOT_SWING;
-      stp_data[num_of_step_-2].position_data.right_foot_pose.y = stp_data[num_of_step_-2].position_data.left_foot_pose.y - default_y_feet_offset_m_;
-    }
-    else
-    {
-      stp_data[num_of_step_-2].position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::LEFT_FOOT_SWING;
-      stp_data[num_of_step_-2].position_data.left_foot_pose.y = stp_data[num_of_step_-2].position_data.right_foot_pose.y + default_y_feet_offset_m_;
-    }
-
-    stp_data[num_of_step_-1] = stp_data[num_of_step_-2];
-    stp_data[num_of_step_-1].time_data.abs_step_time += start_end_time_sec_;
-    stp_data[num_of_step_-1].time_data.walking_state = thormang3_walking_module_msgs::StepTimeData::IN_WALKING_ENDING;
-    stp_data[num_of_step_-1].position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::STANDING;
-    stp_data[num_of_step_-1].position_data.body_z_swap = 0;
-  }
-  else
-  {
-    stp_data[0].time_data.walking_state = thormang3_walking_module_msgs::StepTimeData::IN_WALKING_STARTING;
-    stp_data[0].time_data.abs_step_time += start_end_time_sec_;
-    stp_data[0].position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::STANDING;
-    stp_data[0].position_data.body_z_swap = 0;
-
-
-    stp_data[1] = stp_data[0];
-    stp_data[1].time_data.walking_state = thormang3_walking_module_msgs::StepTimeData::IN_WALKING;
-    stp_data[1].time_data.abs_step_time += step_time_sec_;
-    stp_data[1].time_data.dsp_ratio = dsp_ratio_;
-    stp_data[1].position_data.body_z_swap = body_z_swap_m_;
-    stp_data[1].position_data.foot_z_swap = foot_z_swap_m_;
-
-    if(direction < 0)
-    {
-      stp_data[1].position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::RIGHT_FOOT_SWING;
-      stp_data[1].position_data.right_foot_pose.y = stp_data[1].position_data.right_foot_pose.y + (double)direction*rl_step_length_m_;
-    }
-    else
-    {
-      stp_data[1].position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::LEFT_FOOT_SWING;
-      stp_data[1].position_data.left_foot_pose.y = stp_data[1].position_data.left_foot_pose.y + (double)direction*rl_step_length_m_;
-    }
-
-    for(int stp_idx = 2; stp_idx < num_of_step_-2; stp_idx++)
-    {
-      stp_data[stp_idx] = stp_data[stp_idx-1];
-      stp_data[stp_idx].time_data.abs_step_time += step_time_sec_;
-      if(stp_data[stp_idx].position_data.moving_foot == thormang3_walking_module_msgs::StepPositionData::LEFT_FOOT_SWING)
-      {
-        stp_data[stp_idx].position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::RIGHT_FOOT_SWING;
-        stp_data[stp_idx].position_data.right_foot_pose.y = stp_data[stp_idx].position_data.right_foot_pose.y + (double)direction*rl_step_length_m_;
-      }
-      else
-      {
-        stp_data[stp_idx].position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::LEFT_FOOT_SWING;
-        stp_data[stp_idx].position_data.left_foot_pose.y = stp_data[stp_idx].position_data.left_foot_pose.y + (double)direction*rl_step_length_m_;
-      }
-    }
-
-    stp_data[num_of_step_-2] = stp_data[num_of_step_-3];
-    stp_data[num_of_step_-2].time_data.abs_step_time += step_time_sec_;
-    if(stp_data[num_of_step_-2].position_data.moving_foot == thormang3_walking_module_msgs::StepPositionData::LEFT_FOOT_SWING)
-    {
-      stp_data[num_of_step_-2].position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::RIGHT_FOOT_SWING;
-      stp_data[num_of_step_-2].position_data.right_foot_pose.y = stp_data[num_of_step_-2].position_data.left_foot_pose.y - default_y_feet_offset_m_;
-    }
-    else
-    {
-      stp_data[num_of_step_-2].position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::LEFT_FOOT_SWING;
-      stp_data[num_of_step_-2].position_data.left_foot_pose.y = stp_data[num_of_step_-2].position_data.right_foot_pose.y + default_y_feet_offset_m_;
-    }
-
-    stp_data[num_of_step_-1] = stp_data[num_of_step_-2];
-    stp_data[num_of_step_-1].time_data.abs_step_time += start_end_time_sec_;
-    stp_data[num_of_step_-1].time_data.walking_state = thormang3_walking_module_msgs::StepTimeData::IN_WALKING_ENDING;
-    stp_data[num_of_step_-1].position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::STANDING;
-    stp_data[num_of_step_-1].position_data.body_z_swap = 0;
-
-  }
-
-  for(int stp_idx = 0; stp_idx < num_of_step_; stp_idx++)
-  {
-    step_data_array_.push_back(stp_data[stp_idx]);
-  }
-}
-
-void FootStepGenerator::calcRoStep(const thormang3_walking_module_msgs::StepData& ref_step_data, int direction)
-{
-  thormang3_walking_module_msgs::StepData stp_data[num_of_step_];
-  stp_data[0] = ref_step_data;
-  if(ref_step_data.time_data.walking_state == thormang3_walking_module_msgs::StepTimeData::IN_WALKING)
-  {
-    stp_data[0].time_data.walking_state = thormang3_walking_module_msgs::StepTimeData::IN_WALKING;
-    stp_data[0].time_data.abs_step_time += step_time_sec_;
-    stp_data[0].time_data.dsp_ratio = dsp_ratio_;
-    stp_data[0].position_data.body_z_swap = body_z_swap_m_;
-    stp_data[0].position_data.foot_z_swap = foot_z_swap_m_;
-
-    if(stp_data[0].position_data.moving_foot == thormang3_walking_module_msgs::StepPositionData::LEFT_FOOT_SWING)
-    {
-      stp_data[0].position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::RIGHT_FOOT_SWING;
-      stp_data[0].position_data.right_foot_pose.yaw = stp_data[0].position_data.right_foot_pose.yaw + (double)direction*rotate_step_angle_rad_;
-
-      if(fabs(stp_data[0].position_data.right_foot_pose.yaw) > 2.0*M_PI)
-        stp_data[0].position_data.right_foot_pose.yaw += -2.0*M_PI*sign(stp_data[0].position_data.right_foot_pose.yaw);
-
-      stp_data[0].position_data.right_foot_pose.x   =  0.5*default_y_feet_offset_m_*sin(stp_data[0].position_data.right_foot_pose.yaw);
-      stp_data[0].position_data.right_foot_pose.y   = -0.5*default_y_feet_offset_m_*cos(stp_data[0].position_data.right_foot_pose.yaw);
-    }
-    else
-    {
-      stp_data[0].position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::LEFT_FOOT_SWING;
-      stp_data[0].position_data.left_foot_pose.yaw = stp_data[0].position_data.left_foot_pose.yaw + (double)direction*rotate_step_angle_rad_;
-
-      if(fabs(stp_data[0].position_data.left_foot_pose.yaw) > 2.0*M_PI)
-        stp_data[0].position_data.left_foot_pose.yaw += -2.0*M_PI*sign(stp_data[0].position_data.left_foot_pose.yaw);
-
-      stp_data[0].position_data.left_foot_pose.x   = -0.5*default_y_feet_offset_m_*sin(stp_data[0].position_data.left_foot_pose.yaw);
-      stp_data[0].position_data.left_foot_pose.y   =  0.5*default_y_feet_offset_m_*cos(stp_data[0].position_data.left_foot_pose.yaw);
-    }
-
-
-    for(int stp_idx = 1; stp_idx < num_of_step_-2; stp_idx++)
-    {
-      stp_data[stp_idx] = stp_data[stp_idx-1];
-      stp_data[stp_idx].time_data.abs_step_time += step_time_sec_;
-      if(stp_data[stp_idx].position_data.moving_foot == thormang3_walking_module_msgs::StepPositionData::LEFT_FOOT_SWING)
-      {
-        stp_data[stp_idx].position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::RIGHT_FOOT_SWING;
-        stp_data[stp_idx].position_data.right_foot_pose.yaw = stp_data[stp_idx].position_data.right_foot_pose.yaw + (double)direction*rotate_step_angle_rad_;
-
-        if(fabs(stp_data[stp_idx].position_data.right_foot_pose.yaw) > 2.0*M_PI)
-          stp_data[stp_idx].position_data.right_foot_pose.yaw += -2.0*M_PI*sign(stp_data[stp_idx].position_data.right_foot_pose.yaw);
-
-        stp_data[stp_idx].position_data.right_foot_pose.x   =  0.5*default_y_feet_offset_m_*sin(stp_data[stp_idx].position_data.right_foot_pose.yaw);
-        stp_data[stp_idx].position_data.right_foot_pose.y   = -0.5*default_y_feet_offset_m_*cos(stp_data[stp_idx].position_data.right_foot_pose.yaw);
-      }
-      else
-      {
-        stp_data[stp_idx].position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::LEFT_FOOT_SWING;
-        stp_data[stp_idx].position_data.left_foot_pose.yaw = stp_data[stp_idx].position_data.left_foot_pose.yaw + (double)direction*rotate_step_angle_rad_;
-
-        if(fabs(stp_data[stp_idx].position_data.left_foot_pose.yaw) > 2.0*M_PI)
-          stp_data[stp_idx].position_data.left_foot_pose.yaw += -2.0*M_PI*sign(stp_data[stp_idx].position_data.left_foot_pose.yaw);
-
-        stp_data[stp_idx].position_data.left_foot_pose.x   = -0.5*default_y_feet_offset_m_*sin(stp_data[stp_idx].position_data.left_foot_pose.yaw);
-        stp_data[stp_idx].position_data.left_foot_pose.y   =  0.5*default_y_feet_offset_m_*cos(stp_data[stp_idx].position_data.left_foot_pose.yaw);
-
-      }
-
-      if(fabs(stp_data[stp_idx].position_data.right_foot_pose.yaw) > M_PI)
-        stp_data[stp_idx].position_data.right_foot_pose.yaw -= 2.0*M_PI*sign(stp_data[stp_idx].position_data.right_foot_pose.yaw);
-      if(fabs(stp_data[stp_idx].position_data.left_foot_pose.yaw) > M_PI)
-        stp_data[stp_idx].position_data.left_foot_pose.yaw -= 2.0*M_PI*sign(stp_data[stp_idx].position_data.left_foot_pose.yaw);
-    }
-
-    stp_data[num_of_step_-2] = stp_data[num_of_step_-3];
-    stp_data[num_of_step_-2].time_data.abs_step_time += step_time_sec_;
-    if(stp_data[num_of_step_-2].position_data.moving_foot == thormang3_walking_module_msgs::StepPositionData::LEFT_FOOT_SWING)
-    {
-      stp_data[num_of_step_-2].position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::RIGHT_FOOT_SWING;
-      stp_data[num_of_step_-2].position_data.right_foot_pose.yaw = stp_data[num_of_step_-2].position_data.left_foot_pose.yaw;
-      stp_data[num_of_step_-2].position_data.right_foot_pose.x   =  0.5*default_y_feet_offset_m_*sin(stp_data[num_of_step_-2].position_data.left_foot_pose.yaw);
-      stp_data[num_of_step_-2].position_data.right_foot_pose.y   = -0.5*default_y_feet_offset_m_*cos(stp_data[num_of_step_-2].position_data.left_foot_pose.yaw);
-
-    }
-    else
-    {
-      stp_data[num_of_step_-2].position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::LEFT_FOOT_SWING;
-      stp_data[num_of_step_-2].position_data.left_foot_pose.yaw = stp_data[num_of_step_-2].position_data.right_foot_pose.yaw;
-      stp_data[num_of_step_-2].position_data.left_foot_pose.x   = -0.5*default_y_feet_offset_m_*sin(stp_data[num_of_step_-2].position_data.right_foot_pose.yaw);
-      stp_data[num_of_step_-2].position_data.left_foot_pose.y   =  0.5*default_y_feet_offset_m_*cos(stp_data[num_of_step_-2].position_data.right_foot_pose.yaw);
-    }
-
-    stp_data[num_of_step_-1] = stp_data[num_of_step_-2];
-    stp_data[num_of_step_-1].time_data.abs_step_time += start_end_time_sec_;
-    stp_data[num_of_step_-1].time_data.walking_state = thormang3_walking_module_msgs::StepTimeData::IN_WALKING_ENDING;
-    stp_data[num_of_step_-1].position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::STANDING;
-    stp_data[num_of_step_-1].position_data.body_z_swap = 0;
-  }
-  else
-  {
-    stp_data[0].time_data.walking_state = thormang3_walking_module_msgs::StepTimeData::IN_WALKING_STARTING;
-    stp_data[0].time_data.abs_step_time += start_end_time_sec_;
-    stp_data[0].position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::STANDING;
-    stp_data[0].position_data.body_z_swap = 0;
-    stp_data[0].position_data.foot_z_swap = 0;
-
-
-    stp_data[1] = stp_data[0];
-    stp_data[1].time_data.walking_state = thormang3_walking_module_msgs::StepTimeData::IN_WALKING;
-    stp_data[1].time_data.abs_step_time += step_time_sec_;
-    stp_data[1].time_data.dsp_ratio = dsp_ratio_;
-    stp_data[1].position_data.body_z_swap = body_z_swap_m_;
-    stp_data[1].position_data.foot_z_swap = foot_z_swap_m_;
-
-    if(direction < 0)
-    {
-      stp_data[1].position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::RIGHT_FOOT_SWING;
-      stp_data[1].position_data.right_foot_pose.yaw  = stp_data[1].position_data.right_foot_pose.yaw + (double)direction*rotate_step_angle_rad_;
-
-      if(fabs(stp_data[1].position_data.right_foot_pose.yaw) > 2.0*M_PI)
-        stp_data[1].position_data.right_foot_pose.yaw += -2.0*M_PI*sign(stp_data[1].position_data.right_foot_pose.yaw);
-
-      stp_data[1].position_data.right_foot_pose.x =  0.5*default_y_feet_offset_m_*sin(stp_data[1].position_data.left_foot_pose.yaw);
-      stp_data[1].position_data.right_foot_pose.y = -0.5*default_y_feet_offset_m_*cos(stp_data[1].position_data.left_foot_pose.yaw);
-    }
-    else
-    {
-      stp_data[1].position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::LEFT_FOOT_SWING;
-      stp_data[1].position_data.left_foot_pose.yaw  = stp_data[1].position_data.left_foot_pose.yaw + (double)direction*rotate_step_angle_rad_;
-
-      if(fabs(stp_data[1].position_data.left_foot_pose.yaw) > 2.0*M_PI)
-        stp_data[1].position_data.left_foot_pose.yaw += -2.0*M_PI*sign(stp_data[1].position_data.left_foot_pose.yaw);
-
-
-      stp_data[1].position_data.left_foot_pose.x =  -0.5*default_y_feet_offset_m_*sin(stp_data[1].position_data.left_foot_pose.yaw);
-      stp_data[1].position_data.left_foot_pose.y =   0.5*default_y_feet_offset_m_*cos(stp_data[1].position_data.left_foot_pose.yaw);
-    }
-
-    for(int stp_idx = 2; stp_idx < num_of_step_-2; stp_idx++)
-    {
-      stp_data[stp_idx] = stp_data[stp_idx-1];
-      stp_data[stp_idx].time_data.abs_step_time += step_time_sec_;
-      if(stp_data[stp_idx].position_data.moving_foot == thormang3_walking_module_msgs::StepPositionData::LEFT_FOOT_SWING)
-      {
-        stp_data[stp_idx].position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::RIGHT_FOOT_SWING;
-        stp_data[stp_idx].position_data.right_foot_pose.yaw = stp_data[stp_idx].position_data.right_foot_pose.yaw + (double)direction*rotate_step_angle_rad_;
-
-        if(fabs(stp_data[stp_idx].position_data.right_foot_pose.yaw) > 2.0*M_PI)
-          stp_data[stp_idx].position_data.right_foot_pose.yaw += -2.0*M_PI*sign(stp_data[stp_idx].position_data.right_foot_pose.yaw);
-
-        stp_data[stp_idx].position_data.right_foot_pose.x   =  0.5*default_y_feet_offset_m_*sin(stp_data[stp_idx].position_data.right_foot_pose.yaw);
-        stp_data[stp_idx].position_data.right_foot_pose.y   = -0.5*default_y_feet_offset_m_*cos(stp_data[stp_idx].position_data.right_foot_pose.yaw);
-      }
-      else
-      {
-        stp_data[stp_idx].position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::LEFT_FOOT_SWING;
-        stp_data[stp_idx].position_data.left_foot_pose.yaw = stp_data[stp_idx].position_data.left_foot_pose.yaw + (double)direction*rotate_step_angle_rad_;
-
-        if(fabs(stp_data[stp_idx].position_data.left_foot_pose.yaw) > 2.0*M_PI)
-          stp_data[stp_idx].position_data.left_foot_pose.yaw += -2.0*M_PI*sign(stp_data[stp_idx].position_data.left_foot_pose.yaw);
-
-        stp_data[stp_idx].position_data.left_foot_pose.x   = -0.5*default_y_feet_offset_m_*sin(stp_data[stp_idx].position_data.left_foot_pose.yaw);
-        stp_data[stp_idx].position_data.left_foot_pose.y   =  0.5*default_y_feet_offset_m_*cos(stp_data[stp_idx].position_data.left_foot_pose.yaw);
-
-      }
-
-      if(fabs(stp_data[stp_idx].position_data.right_foot_pose.yaw) > M_PI)
-        stp_data[stp_idx].position_data.right_foot_pose.yaw -= 2.0*M_PI*sign(stp_data[stp_idx].position_data.right_foot_pose.yaw);
-      if(fabs(stp_data[stp_idx].position_data.left_foot_pose.yaw) > M_PI)
-        stp_data[stp_idx].position_data.left_foot_pose.yaw -= 2.0*M_PI*sign(stp_data[stp_idx].position_data.left_foot_pose.yaw);
-    }
-
-    stp_data[num_of_step_-2] = stp_data[num_of_step_-3];
-    stp_data[num_of_step_-2].time_data.abs_step_time += step_time_sec_;
-    if(stp_data[num_of_step_-2].position_data.moving_foot == thormang3_walking_module_msgs::StepPositionData::LEFT_FOOT_SWING)
-    {
-      stp_data[num_of_step_-2].position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::RIGHT_FOOT_SWING;
-      stp_data[num_of_step_-2].position_data.right_foot_pose.yaw  = stp_data[num_of_step_-2].position_data.left_foot_pose.yaw;
-      stp_data[num_of_step_-2].position_data.right_foot_pose.x =  0.5*default_y_feet_offset_m_*sin(stp_data[num_of_step_-2].position_data.left_foot_pose.yaw);
-      stp_data[num_of_step_-2].position_data.right_foot_pose.y = -0.5*default_y_feet_offset_m_*cos(stp_data[num_of_step_-2].position_data.left_foot_pose.yaw);
-
-    }
-    else
-    {
-      stp_data[num_of_step_-2].position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::LEFT_FOOT_SWING;
-      stp_data[num_of_step_-2].position_data.left_foot_pose.yaw  = stp_data[num_of_step_-2].position_data.right_foot_pose.yaw;
-      stp_data[num_of_step_-2].position_data.left_foot_pose.x =  -0.5*default_y_feet_offset_m_*sin(stp_data[num_of_step_-2].position_data.right_foot_pose.yaw);
-      stp_data[num_of_step_-2].position_data.left_foot_pose.y =   0.5*default_y_feet_offset_m_*cos(stp_data[num_of_step_-2].position_data.right_foot_pose.yaw);
-    }
-
-    stp_data[num_of_step_-1] = stp_data[num_of_step_-2];
-    stp_data[num_of_step_-1].time_data.abs_step_time += start_end_time_sec_;
-    stp_data[num_of_step_-1].time_data.walking_state = thormang3_walking_module_msgs::StepTimeData::IN_WALKING_ENDING;
-    stp_data[num_of_step_-1].position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::STANDING;
-    stp_data[num_of_step_-1].position_data.body_z_swap = 0;
-
-  }
-
-  for(int stp_idx = 0; stp_idx < num_of_step_; stp_idx++)
-  {
-    step_data_array_.push_back(stp_data[stp_idx]);
-  }
-}
-
-
-void FootStepGenerator::calcStopStep(const thormang3_walking_module_msgs::StepData& ref_step_data, int direction)
-{
-  thormang3_walking_module_msgs::StepData stp_data;
-  stp_data = ref_step_data;
-  stp_data.time_data.walking_state = thormang3_walking_module_msgs::StepTimeData::IN_WALKING_ENDING;
-  stp_data.time_data.abs_step_time += start_end_time_sec_;
-  stp_data.position_data.body_z_swap = 0;
-  stp_data.position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::STANDING;
-
-  step_data_array_.push_back(stp_data);
-}
-
-
-void FootStepGenerator::calcRightKickStep(thormang3_walking_module_msgs::AddStepDataArray::Request::_step_data_array_type* step_data_array,
-    const thormang3_walking_module_msgs::StepData& ref_step_data)
-{
-  thormang3_walking_module_msgs::StepData step_data_msg;
-  //meter
-  double kick_height = 0.08;
-  double kick_far       = 0.18;
-  double kick_pitch  = 15.0*M_PI/180.0;
-
-  //sec
-  double kick_time   = 0.8;
-
-  step_data_msg = ref_step_data;
-
-  step_data_array->clear();
-  step_data_array_.clear();
-
-  //Start 1 Step Data
-  step_data_msg.time_data.walking_state = thormang3_walking_module_msgs::StepTimeData::IN_WALKING_STARTING;
-  step_data_msg.time_data.abs_step_time += kick_time*1.8;
-  step_data_msg.time_data.dsp_ratio = 1.0;
-
-  step_data_msg.position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::STANDING;
-  step_data_msg.position_data.foot_z_swap = 0;
-  step_data_msg.position_data.body_z_swap = 0;
-  step_data_array_.push_back(step_data_msg);
-
-
-  //StepData 2 move back Left Foot
-  step_data_msg.time_data.walking_state = thormang3_walking_module_msgs::StepTimeData::IN_WALKING;
-  step_data_msg.time_data.abs_step_time += kick_time*1.0;
-  step_data_msg.time_data.dsp_ratio = 0.0;
-
-  step_data_msg.position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::RIGHT_FOOT_SWING;
-  step_data_msg.position_data.right_foot_pose.x = -0.8*kick_far;
-  step_data_msg.position_data.right_foot_pose.z += kick_height;
-  step_data_msg.position_data.right_foot_pose.pitch = kick_pitch;
-  step_data_msg.position_data.foot_z_swap = 0.05;
-  step_data_array_.push_back(step_data_msg);
-
-
-  //StepData 3 kick
-  step_data_msg.time_data.walking_state = thormang3_walking_module_msgs::StepTimeData::IN_WALKING;
-  step_data_msg.time_data.abs_step_time += kick_time*1.2;
-  step_data_msg.time_data.dsp_ratio = 0.0;
-
-  step_data_msg.position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::RIGHT_FOOT_SWING;
-  step_data_msg.position_data.right_foot_pose.x = 1.5*kick_far;
-  step_data_msg.position_data.right_foot_pose.pitch = -kick_pitch;
-  step_data_msg.position_data.foot_z_swap = 0.0;
-  step_data_array_.push_back(step_data_msg);
-
-
-  //StepData 4 move back
-  step_data_msg.time_data.walking_state = thormang3_walking_module_msgs::StepTimeData::IN_WALKING;
-  step_data_msg.time_data.abs_step_time += kick_time*1.2;
-  step_data_msg.time_data.dsp_ratio = 0.0;
-
-  step_data_msg.position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::RIGHT_FOOT_SWING;
-  step_data_msg.position_data.right_foot_pose.x = 0;
-  step_data_msg.position_data.right_foot_pose.z -= kick_height;
-  step_data_msg.position_data.right_foot_pose.pitch = 0;
-  step_data_msg.position_data.foot_z_swap = 0.05;
-  step_data_array_.push_back(step_data_msg);
-
-
-  //StepData 5 End
-  step_data_msg.time_data.walking_state = thormang3_walking_module_msgs::StepTimeData::IN_WALKING_ENDING;
-  step_data_msg.time_data.abs_step_time += kick_time*1.8;
-  step_data_msg.time_data.dsp_ratio = 0.0;
-
-  step_data_msg.position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::STANDING;
-  step_data_array_.push_back(step_data_msg);
-
-  for(unsigned int stp_idx = 0; stp_idx < step_data_array_.size(); stp_idx++)
-  {
-    step_data_array->push_back(step_data_array_[stp_idx]);
-  }
-
-}
-
-void FootStepGenerator::calcLeftKickStep(thormang3_walking_module_msgs::AddStepDataArray::Request::_step_data_array_type* step_data_array,
-    const thormang3_walking_module_msgs::StepData& ref_step_data)
-{
-  thormang3_walking_module_msgs::StepData step_data_msg;
-  //meter
-  double kick_height = 0.08;
-  double kick_far       = 0.18;
-  double kick_pitch  = 15.0*M_PI/180.0;
-
-  //sec
-  double kick_time   = 0.8;
-
-  step_data_msg = ref_step_data;
-
-  step_data_array->clear();
-  step_data_array_.clear();
-
-  //Start 1 Step Data
-  step_data_msg.time_data.walking_state = thormang3_walking_module_msgs::StepTimeData::IN_WALKING_STARTING;
-  step_data_msg.time_data.abs_step_time += kick_time*1.8;
-  step_data_msg.time_data.dsp_ratio = 1.0;
-
-  step_data_msg.position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::STANDING;
-  step_data_msg.position_data.foot_z_swap = 0;
-  step_data_msg.position_data.body_z_swap = 0;
-  step_data_array_.push_back(step_data_msg);
-
-
-  //StepData 2 move back Left Foot
-  step_data_msg.time_data.walking_state = thormang3_walking_module_msgs::StepTimeData::IN_WALKING;
-  step_data_msg.time_data.abs_step_time += kick_time*1.0;
-  step_data_msg.time_data.dsp_ratio = 0.0;
-
-  step_data_msg.position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::LEFT_FOOT_SWING;
-  step_data_msg.position_data.left_foot_pose.x = -0.8*kick_far;
-  step_data_msg.position_data.left_foot_pose.z += kick_height;
-  step_data_msg.position_data.left_foot_pose.pitch = kick_pitch;
-  step_data_msg.position_data.foot_z_swap = 0.05;
-  step_data_array_.push_back(step_data_msg);
-
-
-  //StepData 3 kick
-  step_data_msg.time_data.walking_state = thormang3_walking_module_msgs::StepTimeData::IN_WALKING;
-  step_data_msg.time_data.abs_step_time += kick_time*1.2;
-  step_data_msg.time_data.dsp_ratio = 0.0;
-
-  step_data_msg.position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::LEFT_FOOT_SWING;
-  step_data_msg.position_data.left_foot_pose.x = 1.5*kick_far;
-  step_data_msg.position_data.left_foot_pose.pitch = -kick_pitch;
-  step_data_msg.position_data.foot_z_swap = 0.0;
-  step_data_array_.push_back(step_data_msg);
-
-
-  //StepData 4 move back
-  step_data_msg.time_data.walking_state = thormang3_walking_module_msgs::StepTimeData::IN_WALKING;
-  step_data_msg.time_data.abs_step_time += kick_time*1.2;
-  step_data_msg.time_data.dsp_ratio = 0.0;
-
-  step_data_msg.position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::LEFT_FOOT_SWING;
-  step_data_msg.position_data.left_foot_pose.x = 0;
-  step_data_msg.position_data.left_foot_pose.z -= kick_height;
-  step_data_msg.position_data.left_foot_pose.pitch = 0;
-  step_data_msg.position_data.foot_z_swap = 0.05;
-  step_data_array_.push_back(step_data_msg);
-
-
-  //StepData 5 End
-  step_data_msg.time_data.walking_state = thormang3_walking_module_msgs::StepTimeData::IN_WALKING_ENDING;
-  step_data_msg.time_data.abs_step_time += kick_time*1.8;
-  step_data_msg.time_data.dsp_ratio = 0.0;
-
-  step_data_msg.position_data.moving_foot = thormang3_walking_module_msgs::StepPositionData::STANDING;
-  step_data_array_.push_back(step_data_msg);
-
-  for(unsigned int stp_idx = 0; stp_idx < step_data_array_.size(); stp_idx++)
-  {
-    step_data_array->push_back(step_data_array_[stp_idx]);
-  }
-}
-
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_navigation/CMakeLists.txt b/ROBOTIS-THORMANG-OPC-for-git/thormang3_navigation/CMakeLists.txt
deleted file mode 100644
index f100f96..0000000
--- a/ROBOTIS-THORMANG-OPC-for-git/thormang3_navigation/CMakeLists.txt
+++ /dev/null
@@ -1,14 +0,0 @@
-cmake_minimum_required(VERSION 2.8.3)
-project(thormang3_navigation)
-
-## Find catkin macros and libraries
-find_package(catkin REQUIRED COMPONENTS
-  footstep_planner
-  map_server
-  octomap_server
-)
-
-###################################
-## catkin specific configuration ##
-###################################
-catkin_package()
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_navigation/config/footsteps_thormang3.yaml b/ROBOTIS-THORMANG-OPC-for-git/thormang3_navigation/config/footsteps_thormang3.yaml
deleted file mode 100644
index 8e79d49..0000000
--- a/ROBOTIS-THORMANG-OPC-for-git/thormang3_navigation/config/footsteps_thormang3.yaml
+++ /dev/null
@@ -1,30 +0,0 @@
-### Footstep parameterization for a large humanoid, similar to ASIMO or HRP-2 #
-
-### footstep settings #########################################################
-# Footstep displacement vectors (in meter / rad)
-# WARNING: data type has to be float/double, integers will cause an exception
-footsteps:
-  x:     [0.000, 0.000, 0.000, 0.000,  0.000, 0.000, 0.100, 0.100, 0.100, 0.100,  0.100,  0.100, 0.050, 0.050, 0.050, 0.050,  0.050,  0.050, -0.050, -0.050, -0.050, -0.050, -0.050, -0.050]
-  y:     [0.186, 0.211, 0.211, 0.211,  0.211, 0.236, 0.186, 0.211, 0.211, 0.211,  0.211,  0.236, 0.186, 0.211, 0.211, 0.211,  0.211,  0.236,  0.186,  0.211,  0.211,  0.211,  0.211,  0.236]
-  theta: [0.000, 0.000, 0.140, 0.070, -0.035, 0.000, 0.000, 0.000, 0.140, 0.070, -0.035,  0.000, 0.000, 0.000, 0.140, 0.070, -0.035,  0.000,  0.000,  0.000,  0.140,  0.070, -0.035,  0.000]
-
-  
-
-### foot settings #############################################################
-foot:
-  size: {x: 0.216, y: 0.144, z: 0.05}
-  separation: 0.186
-  origin_shift: {x: 0.0, y: 0.0}
-  max:
-    step: {x: 0.1, y: 0.236, theta: 0.14}
-    inverse:
-      step: {x: -0.1, y: 0.236, theta: -0.035}
-
-
-### step range ################################################################
-
-# more accurate than the bounding box defined by the max/max inverse step
-step_range:
-  x: [0.100, 0.100, -0.100, -0.100]
-  y: [0.236, 0.186,  0.186,  0.236]
-
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_navigation/config/navigation_params.yaml b/ROBOTIS-THORMANG-OPC-for-git/thormang3_navigation/config/navigation_params.yaml
deleted file mode 100644
index 7c15e66..0000000
--- a/ROBOTIS-THORMANG-OPC-for-git/thormang3_navigation/config/navigation_params.yaml
+++ /dev/null
@@ -1,11 +0,0 @@
-### navigation settings ########################################################
-
-# inaccurate
-safe_execution: True
-
-# feedback rate of the action server
-feedback_frequency: 5.0
-
-accuracy:
-  # the smaller the better a performed footstep has to fit into a planned one
-  footstep: {x: 0.01, y: 0.01, theta: 0.1}
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_navigation/config/planning_params.yaml b/ROBOTIS-THORMANG-OPC-for-git/thormang3_navigation/config/planning_params.yaml
deleted file mode 100644
index 93d2ea2..0000000
--- a/ROBOTIS-THORMANG-OPC-for-git/thormang3_navigation/config/planning_params.yaml
+++ /dev/null
@@ -1,34 +0,0 @@
-### planner environment settings ##############################################
-
-# the size of the used hash map (the bigger the better); should be something
-# with 2^X (initially 2^16=65536)
-max_hash_size: 65536
-
-# the heuristic that should be used to estimate the step costs of a planning 
-# state possible choices: 
-# EuclideanHeuristic, EuclStepCostHeuristic, PathCostHeuristic
-heuristic_type: PathCostHeuristic
-
-
-### planner settings ###########################################################
-
-# define the planner of choice provided by the SBPL package
-# - ARAPlanner
-# - ADPlanner
-# - RSTARPlanner
-planner_type: ARAPlanner
-
-# search until a specific time limit is reached or first solution is found
-search_until_first_solution: False
-#search_until_first_solution: True
-
-# the maximum search time if search_until_first_solution is set to False
-allocated_time: 4.0
-
-initial_epsilon: 8.0
-
-forward_search: False
-
-# the limit of changed states that decides whether to replan or to start a hole
-# new planning task
-changed_cells_limit: 20000
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_navigation/config/planning_params_thormang3.yaml b/ROBOTIS-THORMANG-OPC-for-git/thormang3_navigation/config/planning_params_thormang3.yaml
deleted file mode 100644
index 1d41a94..0000000
--- a/ROBOTIS-THORMANG-OPC-for-git/thormang3_navigation/config/planning_params_thormang3.yaml
+++ /dev/null
@@ -1,20 +0,0 @@
-### Planning parameterization for a large humanoid, similar to ASIMO or HRP-2 ##
-
-# cost to perform one footstep (in addition to distance costs, corresponds to 'meters')
-step_cost: 0.1
-
-# cost to estimate the difference between the current orientation and the goal
-# orientation; used in the heuristic it can easily overestimate the true path
-# cost since this cost is not incorporated in each step
-diff_angle_cost: 0.15
-
-accuracy:
-  # footstep collision check accuracy
-  # - 0 (just the circumcircle of the foot)
-  # - 1 (just the incircle of the foot)
-  # - 2 (circumcircle and incircle recursivly checked for the whole foot)
-  collision_check: 2
-
-  cell_size: 0.02
-
-  num_angle_bins: 128
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_navigation/launch/map_server_empty.launch b/ROBOTIS-THORMANG-OPC-for-git/thormang3_navigation/launch/map_server_empty.launch
deleted file mode 100644
index d2b6991..0000000
--- a/ROBOTIS-THORMANG-OPC-for-git/thormang3_navigation/launch/map_server_empty.launch
+++ /dev/null
@@ -1,6 +0,0 @@
-<launch>
-    <node name="map_server" pkg="map_server" type="map_server" args="$(find footstep_planner)/maps/empty.yaml" >
-        <param name="frame_id" type="string" value="world" />
-        <remap from="map" to="projected_map" />
-    </node>
-</launch>
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_navigation/launch/map_server_thormang.launch b/ROBOTIS-THORMANG-OPC-for-git/thormang3_navigation/launch/map_server_thormang.launch
deleted file mode 100644
index ef19eb3..0000000
--- a/ROBOTIS-THORMANG-OPC-for-git/thormang3_navigation/launch/map_server_thormang.launch
+++ /dev/null
@@ -1,21 +0,0 @@
-<launch>
-    <node pkg="octomap_server" type="octomap_server_node" name="octomap_server">
-        <param name="resolution" value="0.2" />
-
-        <!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
-        <param name="frame_id" type="string" value="map" />
-
-        <!-- maximum range to integrate (speedup!) -->
-        <!-- <param name="sensor_model/max_range" value="5.0" /> -->
-
-        <param name="occupancy_min_z" value="0.25" />
-        <param name="occupancy_max_z" value="0.45" />
-        
-        <param name="latch" value="True" />
-
-        <!-- data source to integrate (PointCloud2) -->
-        <remap from="cloud_in" to="/opc/map_cloud" />
-        <!-- <remap from="cloud_in" to="/ppc/assembled_scan" />       -->     
-        <remap from="projected_map" to="/opc/projected_map" />
-    </node>
-</launch>
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_navigation/launch/thormang3_footstep_planner.launch b/ROBOTIS-THORMANG-OPC-for-git/thormang3_navigation/launch/thormang3_footstep_planner.launch
deleted file mode 100644
index 3d69b01..0000000
--- a/ROBOTIS-THORMANG-OPC-for-git/thormang3_navigation/launch/thormang3_footstep_planner.launch
+++ /dev/null
@@ -1,14 +0,0 @@
-<launch>
-    <arg name="use_empty_map" default="true" />  
-
-    <include if="$(arg use_empty_map)" file="$(find thormang3_navigation)/launch/map_server_empty.launch" />
-    <include unless="$(arg use_empty_map)" file="$(find thormang3_navigation)/launch/map_server_thormang.launch" />
-    
-    <node name="footstep_planner" pkg="footstep_planner" type="footstep_planner_node" >
-        <rosparam file="$(find thormang3_navigation)/config/planning_params.yaml" command="load" />
-        <rosparam file="$(find thormang3_navigation)/config/planning_params_thormang3.yaml" command="load" />
-        <rosparam file="$(find thormang3_navigation)/config/footsteps_thormang3.yaml" command="load" />
-        <remap from="map" to="projected_map" />
-    </node>
-
-</launch>
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_navigation/maps/empty.gif b/ROBOTIS-THORMANG-OPC-for-git/thormang3_navigation/maps/empty.gif
deleted file mode 100644
index bcdf32a..0000000
Binary files a/ROBOTIS-THORMANG-OPC-for-git/thormang3_navigation/maps/empty.gif and /dev/null differ
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_navigation/maps/empty.yaml b/ROBOTIS-THORMANG-OPC-for-git/thormang3_navigation/maps/empty.yaml
deleted file mode 100644
index 1dfa47b..0000000
--- a/ROBOTIS-THORMANG-OPC-for-git/thormang3_navigation/maps/empty.yaml
+++ /dev/null
@@ -1,6 +0,0 @@
-image: empty.gif
-resolution: 0.1
-origin: [-20.0, -20.0, 0.0]
-occupied_thresh: 0.5
-free_thresh: 0.1
-negate: 0
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_navigation/maps/nao_map.gif b/ROBOTIS-THORMANG-OPC-for-git/thormang3_navigation/maps/nao_map.gif
deleted file mode 100644
index dbc39f0..0000000
Binary files a/ROBOTIS-THORMANG-OPC-for-git/thormang3_navigation/maps/nao_map.gif and /dev/null differ
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_navigation/maps/nao_map.yaml b/ROBOTIS-THORMANG-OPC-for-git/thormang3_navigation/maps/nao_map.yaml
deleted file mode 100644
index c6679f5..0000000
--- a/ROBOTIS-THORMANG-OPC-for-git/thormang3_navigation/maps/nao_map.yaml
+++ /dev/null
@@ -1,6 +0,0 @@
-image: nao_map.gif
-resolution: 0.01
-origin: [0.0, 0.0, 0.0]
-occupied_thresh: 0.4
-free_thresh: 0.1
-negate: 0
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_navigation/maps/sample.gif b/ROBOTIS-THORMANG-OPC-for-git/thormang3_navigation/maps/sample.gif
deleted file mode 100644
index 1617616..0000000
Binary files a/ROBOTIS-THORMANG-OPC-for-git/thormang3_navigation/maps/sample.gif and /dev/null differ
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_navigation/maps/sample.yaml b/ROBOTIS-THORMANG-OPC-for-git/thormang3_navigation/maps/sample.yaml
deleted file mode 100644
index 11bbb99..0000000
--- a/ROBOTIS-THORMANG-OPC-for-git/thormang3_navigation/maps/sample.yaml
+++ /dev/null
@@ -1,6 +0,0 @@
-image: sample.gif
-resolution: 0.01
-origin: [0.0, 0.0, 0.0]
-occupied_thresh: 0.5
-free_thresh: 0.1
-negate: 0
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_navigation/maps/sample2.gif b/ROBOTIS-THORMANG-OPC-for-git/thormang3_navigation/maps/sample2.gif
deleted file mode 100644
index 9d08c81..0000000
Binary files a/ROBOTIS-THORMANG-OPC-for-git/thormang3_navigation/maps/sample2.gif and /dev/null differ
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_navigation/maps/sample2.yaml b/ROBOTIS-THORMANG-OPC-for-git/thormang3_navigation/maps/sample2.yaml
deleted file mode 100644
index 2b1fa82..0000000
--- a/ROBOTIS-THORMANG-OPC-for-git/thormang3_navigation/maps/sample2.yaml
+++ /dev/null
@@ -1,6 +0,0 @@
-image: sample2.gif
-resolution: 0.01
-origin: [0.0, 0.0, 0.0]
-occupied_thresh: 0.5
-free_thresh: 0.1
-negate: 0
\ No newline at end of file
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_navigation/maps/thor.gif b/ROBOTIS-THORMANG-OPC-for-git/thormang3_navigation/maps/thor.gif
deleted file mode 100644
index e5346c1..0000000
Binary files a/ROBOTIS-THORMANG-OPC-for-git/thormang3_navigation/maps/thor.gif and /dev/null differ
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_navigation/maps/thor.yaml b/ROBOTIS-THORMANG-OPC-for-git/thormang3_navigation/maps/thor.yaml
deleted file mode 100644
index b508196..0000000
--- a/ROBOTIS-THORMANG-OPC-for-git/thormang3_navigation/maps/thor.yaml
+++ /dev/null
@@ -1,6 +0,0 @@
-image: thor.gif
-resolution: 0.1
-origin: [-40.0, -40.0, 0.0]
-occupied_thresh: 0.5
-free_thresh: 0.1
-negate: 0
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_navigation/package.xml b/ROBOTIS-THORMANG-OPC-for-git/thormang3_navigation/package.xml
deleted file mode 100644
index 20edc3d..0000000
--- a/ROBOTIS-THORMANG-OPC-for-git/thormang3_navigation/package.xml
+++ /dev/null
@@ -1,27 +0,0 @@
-<?xml version="1.0"?>
-<package>
-  <name>thormang3_navigation</name>
-  <version>0.0.1</version>
-  <description>
-    This package is for generating footsteps. 
-    It has several config files and launch files in order to use footstep planner package. 
-  </description>
-
-  <license>BSD</license>
-  <author email="kmjung@robotis.com">kayman</author>
-  <maintainer email="pyo@robotis.com">Pyo</maintainer>
-  <url type="bugtracker">https://github.com/ROBOTIS-GIT/ROBOTIS-THORMANG-OPC/issues</url>
-  <url type="repository">https://github.com/ROBOTIS-GIT/ROBOTIS-THORMANG-OPC</url>
-  <url type="website">http://wiki.ros.org/thormang3_navigation</url>
-
-  <buildtool_depend>catkin</buildtool_depend>
-  
-  <build_depend>footstep_planner</build_depend>
-  <build_depend>map_server</build_depend>
-  <build_depend>octomap_server</build_depend>
-  <run_depend>footstep_planner</run_depend>
-  <run_depend>map_server</run_depend>
-  <run_depend>octomap_server</run_depend>
-
-  <export></export>
-</package>
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_offset_tuner_client/CHANGELOG.rst b/ROBOTIS-THORMANG-OPC-for-git/thormang3_offset_tuner_client/CHANGELOG.rst
deleted file mode 100644
index 7bf9253..0000000
--- a/ROBOTIS-THORMANG-OPC-for-git/thormang3_offset_tuner_client/CHANGELOG.rst
+++ /dev/null
@@ -1,16 +0,0 @@
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-Changelog for package thormang3_offset_tuner_client
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-0.2.0 (2016-08-19)
------------
-* added thormang3_offset_tuner_client package
-
-0.1.0 (2016-08-18)
------------
-* first public release for Kinetic
-* added description in package.xml
-* applied coding style
-  modified thormang3_offset_tuner_client : dynamic UI
-* modified thormang3_demo for thormang3_foot_step_generator
-* Contributors: Kayman, Pyo
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_offset_tuner_client/CMakeLists.txt b/ROBOTIS-THORMANG-OPC-for-git/thormang3_offset_tuner_client/CMakeLists.txt
deleted file mode 100644
index 4d9606d..0000000
--- a/ROBOTIS-THORMANG-OPC-for-git/thormang3_offset_tuner_client/CMakeLists.txt
+++ /dev/null
@@ -1,83 +0,0 @@
-################################################################################
-# CMake
-################################################################################
-cmake_minimum_required(VERSION 2.8.0)
-project(thormang3_offset_tuner_client)
-
-################################################################################
-# Packages
-################################################################################
-find_package(catkin REQUIRED COMPONENTS
-  qt_build
-  roscpp
-  roslib
-  thormang3_offset_tuner_msgs
-)
-
-################################################################################
-# Declare ROS messages, services and actions
-################################################################################
-
-################################################################################
-# Declare ROS dynamic reconfigure parameters
-################################################################################
-
-################################################################################
-# Catkin specific configuration
-################################################################################
-catkin_package()
-
-##############################################################################
-# Qt Environment
-##############################################################################
-rosbuild_prepare_qt4(QtCore QtGui)
-
-##############################################################################
-# QT Sections and Sources
-##############################################################################
-file(GLOB QT_FORMS RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} ui/*.ui)
-file(GLOB QT_RESOURCES RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} resources/*.qrc)
-file(GLOB_RECURSE QT_MOC RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} FOLLOW_SYMLINKS include/thormang3_offset_tuner_client/*.hpp)
-file(GLOB_RECURSE QT_SOURCES RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} FOLLOW_SYMLINKS src/*.cpp)
-
-QT4_ADD_RESOURCES(QT_RESOURCES_CPP ${QT_RESOURCES})
-QT4_WRAP_UI(QT_FORMS_HPP ${QT_FORMS})
-QT4_WRAP_CPP(QT_MOC_HPP ${QT_MOC})
-
-################################################################################
-# Build
-################################################################################
-include_directories(${catkin_INCLUDE_DIRS})
-
-add_executable(thormang3_offset_tuner_client ${QT_SOURCES} ${QT_RESOURCES_CPP} ${QT_FORMS_HPP} ${QT_MOC_HPP})
-add_dependencies(thormang3_offset_tuner_client ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})
-target_link_libraries(thormang3_offset_tuner_client ${QT_LIBRARIES} ${catkin_LIBRARIES} yaml-cpp)
-
-################################################################################
-# Install
-################################################################################
-install(TARGETS thormang3_offset_tuner_client
-  ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
-  LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
-  RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
-)
-
-install(DIRECTORY include/${PROJECT_NAME}/
-  DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
-)
-
-install(DIRECTORY config/
-        DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
-)
-
-install(DIRECTORY resources/
-        DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
-)
-
-install(DIRECTORY ui/
-        DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
-)
-
-################################################################################
-# Test
-################################################################################
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_offset_tuner_client/config/joint_data.yaml b/ROBOTIS-THORMANG-OPC-for-git/thormang3_offset_tuner_client/config/joint_data.yaml
deleted file mode 100644
index 5a794fe..0000000
--- a/ROBOTIS-THORMANG-OPC-for-git/thormang3_offset_tuner_client/config/joint_data.yaml
+++ /dev/null
@@ -1,34 +0,0 @@
-right_arm:
-# order : joint_name
-  1 : r_arm_sh_p1
-  2 : r_arm_sh_r
-  3 : r_arm_sh_p2
-  4 : r_arm_el_y
-  5 : r_arm_wr_r
-  6 : r_arm_wr_y
-  7 : r_arm_wr_p
-left_arm:
-  1 : l_arm_sh_p1
-  2 : l_arm_sh_r
-  3 : l_arm_sh_p2
-  4 : l_arm_el_y
-  5 : l_arm_wr_r
-  6 : l_arm_wr_y
-  7 : l_arm_wr_p
-legs:
-  1 : r_leg_hip_y
-  2 : l_leg_hip_y
-  3 : r_leg_hip_r
-  4 : l_leg_hip_r
-  5 : r_leg_hip_p
-  6 : l_leg_hip_p
-  7 : r_leg_kn_p
-  8 : l_leg_kn_p
-  9 : r_leg_an_p
-  10 : l_leg_an_p
-  11 : r_leg_an_r
-  12 : l_leg_an_r
-body: 
-  1 : torso_y
-  2 : head_y
-  3 : head_p
\ No newline at end of file
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_offset_tuner_client/include/thormang3_offset_tuner_client/main_window.hpp b/ROBOTIS-THORMANG-OPC-for-git/thormang3_offset_tuner_client/include/thormang3_offset_tuner_client/main_window.hpp
deleted file mode 100644
index c0fc772..0000000
--- a/ROBOTIS-THORMANG-OPC-for-git/thormang3_offset_tuner_client/include/thormang3_offset_tuner_client/main_window.hpp
+++ /dev/null
@@ -1,117 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2016, ROBOTIS CO., LTD.
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- *
- * * Redistributions of source code must retain the above copyright notice, this
- *   list of conditions and the following disclaimer.
- *
- * * Redistributions in binary form must reproduce the above copyright notice,
- *   this list of conditions and the following disclaimer in the documentation
- *   and/or other materials provided with the distribution.
- *
- * * Neither the name of ROBOTIS nor the names of its
- *   contributors may be used to endorse or promote products derived from
- *   this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
- * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
- * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- *******************************************************************************/
-
-/* Author: Kayman Jung, sch */
-
-#ifndef thormang3_offset_tuner_client_MAIN_WINDOW_H
-#define thormang3_offset_tuner_client_MAIN_WINDOW_H
-
-/*****************************************************************************
- ** Includes
- *****************************************************************************/
-
-#include <QtGui>
-#include <QList>
-#include <QSpinBox>
-#include <QtGui/QMainWindow>
-
-#include <math.h>
-
-#include "ui_main_window.h"
-#include "qnode.hpp"
-
-/*****************************************************************************
- ** Namespace
- *****************************************************************************/
-
-namespace thormang3_offset_tuner_client
-{
-
-/*****************************************************************************
- ** Interface [MainWindow]
- *****************************************************************************/
-/**
- * @brief Qt central, all operations relating to the view part here.
- */
-class MainWindow : public QMainWindow
-{
-Q_OBJECT
-
- public:
-  MainWindow(int argc, char** argv, QWidget *parent = 0);
-  ~MainWindow();
-
-  void closeEvent(QCloseEvent *event);  // Overloaded function
-
- public Q_SLOTS:
-  /******************************************
-   ** Auto-connections (connectSlotsByName())
-   *******************************************/
-  void on_actionAbout_triggered();
-
-  void on_save_button_clicked(bool check);
-  void on_refresh_button_clicked(bool check);
-  void on_inipose_button_clicked(bool checck);
-
-  /******************************************
-   ** Manual connections
-   *******************************************/
-  void updateLoggingView();  // no idea why this can't connect automatically
-
-  void update_joint_offset_data_spinbox(thormang3_offset_tuner_msgs::JointOffsetPositionData msg);
-
-  void spinBox_valueChanged(QString joint_name);
-  void torque_checkbox_clicked(QWidget *widget);
-  void all_torque_on_button_clicked(QObject *button_group);
-  void all_torque_off_button_clicked(QObject *button_group);
-
- private:
-  void MakeUI();
-  void MakeTabUI(QGroupBox *joint_widget, QGroupBox *torque_widget, QButtonGroup *button_group,
-                 std::map<int, std::string> &offset_group);
-  void publish_torque_msgs(std::string &joint_name, bool torque_on);
-
-  Ui::MainWindowDesign ui_;
-  QNode offset_tuner_qnode_;
-
-  bool all_torque_on_;
-
-  QButtonGroup *right_arm_button_group_;
-  QButtonGroup *left_arm_button_group_;
-  QButtonGroup *legs_button_group_;
-  QButtonGroup *body_button_group_;
-  std::vector<std::string> spinBox_list_;
-
-  std::map<std::string, QList<QAbstractSpinBox *> > joint_spinbox_map_;
-};
-
-}  // namespace thormang3_offset_tuner_client
-
-#endif // thormang3_offset_tuner_client_MAIN_WINDOW_H
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_offset_tuner_client/include/thormang3_offset_tuner_client/qnode.hpp b/ROBOTIS-THORMANG-OPC-for-git/thormang3_offset_tuner_client/include/thormang3_offset_tuner_client/qnode.hpp
deleted file mode 100644
index b5679db..0000000
--- a/ROBOTIS-THORMANG-OPC-for-git/thormang3_offset_tuner_client/include/thormang3_offset_tuner_client/qnode.hpp
+++ /dev/null
@@ -1,136 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2016, ROBOTIS CO., LTD.
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- *
- * * Redistributions of source code must retain the above copyright notice, this
- *   list of conditions and the following disclaimer.
- *
- * * Redistributions in binary form must reproduce the above copyright notice,
- *   this list of conditions and the following disclaimer in the documentation
- *   and/or other materials provided with the distribution.
- *
- * * Neither the name of ROBOTIS nor the names of its
- *   contributors may be used to endorse or promote products derived from
- *   this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
- * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
- * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- *******************************************************************************/
-
-/* Author: Kayman Jung, sch */
-
-/*****************************************************************************
- ** Ifdefs
- *****************************************************************************/
-
-#ifndef thormang3_offset_tuner_client_QNODE_HPP_
-#define thormang3_offset_tuner_client_QNODE_HPP_
-
-/*****************************************************************************
- ** Includes
- *****************************************************************************/
-#ifndef Q_MOC_RUN
-
-#include <string>
-#include <QThread>
-#include <QStringListModel>
-#include <yaml-cpp/yaml.h>
-
-#include <ros/ros.h>
-#include <ros/package.h>
-#include <std_msgs/String.h>
-
-#include "thormang3_offset_tuner_msgs/JointOffsetData.h"
-#include "thormang3_offset_tuner_msgs/JointOffsetPositionData.h"
-#include "thormang3_offset_tuner_msgs/JointTorqueOnOff.h"
-#include "thormang3_offset_tuner_msgs/JointTorqueOnOffArray.h"
-#include "thormang3_offset_tuner_msgs/GetPresentJointOffsetData.h"
-
-#endif  // Q_MOC_RUN
-
-/*****************************************************************************
- ** Namespaces
- *****************************************************************************/
-
-namespace thormang3_offset_tuner_client
-{
-
-/*****************************************************************************
- ** Class
- *****************************************************************************/
-
-class QNode : public QThread
-{
-Q_OBJECT
- public:
-  enum LogLevel
-  {
-    Debug,
-    Info,
-    Warn,
-    Error,
-    Fatal
-  };
-  QNode(int argc, char** argv);
-  virtual ~QNode();
-  bool init();
-  bool init(const std::string &master_url, const std::string &host_url);
-  void run();
-
-  QStringListModel* loggingModel()
-  {
-    return &logging_model_;
-  }
-  void log(const LogLevel &level, const std::string &msg);
-
-  void send_torque_enable_msg(thormang3_offset_tuner_msgs::JointTorqueOnOffArray msg);
-  void send_joint_offset_data_msg(thormang3_offset_tuner_msgs::JointOffsetData msg);
-  void send_command_msg(std_msgs::String msg);
-  bool is_refresh()
-  {
-    return is_refresh_;
-  }
-
-  std::map<int, std::string> right_arm_offset_group;
-  std::map<int, std::string> left_arm_offset_group;
-  std::map<int, std::string> legs_offset_group;
-  std::map<int, std::string> body_offset_group;
-
- public Q_SLOTS:
-  void getPresentJointOffsetData();
-
-Q_SIGNALS:
-  void loggingUpdated();
-  void rosShutdown();
-
-  void update_present_joint_offset_data(thormang3_offset_tuner_msgs::JointOffsetPositionData msg);
-
- private:
-  void ParseOffsetGroup(const std::string &path);
-
-  int init_argc_;
-  char** init_argv_;
-  bool is_refresh_;
-  QStringListModel logging_model_;
-
-  ros::Publisher joint_offset_data_pub_;
-  ros::Publisher torque_enable_pub_;
-  ros::Publisher command_pub_;
-
-  ros::ServiceClient get_present_joint_offset_data_client_;
-};
-
-}  // namespace thormang3_offset_tuner_client
-
-#endif /* thormang3_offset_tuner_client_QNODE_HPP_ */
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_offset_tuner_client/mainpage.dox b/ROBOTIS-THORMANG-OPC-for-git/thormang3_offset_tuner_client/mainpage.dox
deleted file mode 100644
index 8c564cb..0000000
--- a/ROBOTIS-THORMANG-OPC-for-git/thormang3_offset_tuner_client/mainpage.dox
+++ /dev/null
@@ -1,26 +0,0 @@
-/**
-\mainpage
-\htmlinclude manifest.html
-
-\b thormang3_offset_tuner_client is ... 
-
-<!-- 
-Provide an overview of your package.
--->
-
-
-\section codeapi Code API
-
-<!--
-Provide links to specific auto-generated API documentation within your
-package that is of particular interest to a reader. Doxygen will
-document pretty much every part of your code, so do your best here to
-point the reader to the actual API.
-
-If your codebase is fairly large or has different sets of APIs, you
-should use the doxygen 'group' tag to keep these APIs together. For
-example, the roscpp documentation has 'libros' group.
--->
-
-
-*/
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_offset_tuner_client/package.xml b/ROBOTIS-THORMANG-OPC-for-git/thormang3_offset_tuner_client/package.xml
deleted file mode 100644
index ccb768a..0000000
--- a/ROBOTIS-THORMANG-OPC-for-git/thormang3_offset_tuner_client/package.xml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0"?>
-<package>
-  <name>thormang3_offset_tuner_client</name>
-  <version>0.2.0</version>
-  <description>
-     The GUI program that can adjust offset of THORMANG3.
-     It is used with the thormang3_offset_tuner_server.
-  </description>
-  <license>BSD</license>
-  <author email="kmjung@robotis.com">Kayman</author>
-  <maintainer email="pyo@robotis.com">Pyo</maintainer>
-  <url type="bugtracker">https://github.com/ROBOTIS-GIT/ROBOTIS-THORMANG-OPC/issues</url>
-  <url type="repository">https://github.com/ROBOTIS-GIT/ROBOTIS-THORMANG-OPC</url>
-  <url type="website">http://wiki.ros.org/thormang3_offset_tuner_client</url>
-  <buildtool_depend>catkin</buildtool_depend>
-  <build_depend>qt_build</build_depend>
-  <build_depend>roscpp</build_depend>
-  <build_depend>libqt4-dev</build_depend>
-  <build_depend>thormang3_offset_tuner_msgs</build_depend>
-  <build_depend>thormang3_foot_step_generator</build_depend>
-  <run_depend>qt_build</run_depend>
-  <run_depend>roscpp</run_depend>
-  <run_depend>libqt4-dev</run_depend>
-</package>
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_offset_tuner_client/resources/images.qrc b/ROBOTIS-THORMANG-OPC-for-git/thormang3_offset_tuner_client/resources/images.qrc
deleted file mode 100644
index e91e9dc..0000000
--- a/ROBOTIS-THORMANG-OPC-for-git/thormang3_offset_tuner_client/resources/images.qrc
+++ /dev/null
@@ -1,5 +0,0 @@
-<RCC>
-    <qresource prefix="/" >
-        <file>images/icon.png</file>
-    </qresource>
-</RCC>
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_offset_tuner_client/resources/images/icon.png b/ROBOTIS-THORMANG-OPC-for-git/thormang3_offset_tuner_client/resources/images/icon.png
deleted file mode 100644
index 22e9f04..0000000
Binary files a/ROBOTIS-THORMANG-OPC-for-git/thormang3_offset_tuner_client/resources/images/icon.png and /dev/null differ
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_offset_tuner_client/src/main.cpp b/ROBOTIS-THORMANG-OPC-for-git/thormang3_offset_tuner_client/src/main.cpp
deleted file mode 100644
index bbee79d..0000000
--- a/ROBOTIS-THORMANG-OPC-for-git/thormang3_offset_tuner_client/src/main.cpp
+++ /dev/null
@@ -1,58 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2016, ROBOTIS CO., LTD.
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- *
- * * Redistributions of source code must retain the above copyright notice, this
- *   list of conditions and the following disclaimer.
- *
- * * Redistributions in binary form must reproduce the above copyright notice,
- *   this list of conditions and the following disclaimer in the documentation
- *   and/or other materials provided with the distribution.
- *
- * * Neither the name of ROBOTIS nor the names of its
- *   contributors may be used to endorse or promote products derived from
- *   this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
- * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
- * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- *******************************************************************************/
-
-/* Author: Kayman Jung, sch */
-
-/*****************************************************************************
- ** Includes
- *****************************************************************************/
-
-#include <QtGui>
-#include <QApplication>
-#include "../include/thormang3_offset_tuner_client/main_window.hpp"
-
-/*****************************************************************************
- ** Main
- *****************************************************************************/
-
-int main(int argc, char **argv)
-{
-
-  /*********************
-   ** Qt
-   **********************/
-  QApplication app(argc, argv);
-  thormang3_offset_tuner_client::MainWindow w(argc, argv);
-  w.show();
-  app.connect(&app, SIGNAL(lastWindowClosed()), &app, SLOT(quit()));
-  int result = app.exec();
-
-  return result;
-}
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_offset_tuner_client/src/main_window.cpp b/ROBOTIS-THORMANG-OPC-for-git/thormang3_offset_tuner_client/src/main_window.cpp
deleted file mode 100644
index 097b00e..0000000
--- a/ROBOTIS-THORMANG-OPC-for-git/thormang3_offset_tuner_client/src/main_window.cpp
+++ /dev/null
@@ -1,501 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2016, ROBOTIS CO., LTD.
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- *
- * * Redistributions of source code must retain the above copyright notice, this
- *   list of conditions and the following disclaimer.
- *
- * * Redistributions in binary form must reproduce the above copyright notice,
- *   this list of conditions and the following disclaimer in the documentation
- *   and/or other materials provided with the distribution.
- *
- * * Neither the name of ROBOTIS nor the names of its
- *   contributors may be used to endorse or promote products derived from
- *   this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
- * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
- * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- *******************************************************************************/
-
-/* Author: Kayman Jung, sch */
-
-/*****************************************************************************
- ** Includes
- *****************************************************************************/
-
-#include <QtGui>
-#include <QMessageBox>
-#include <iostream>
-#include "../include/thormang3_offset_tuner_client/main_window.hpp"
-
-/*****************************************************************************
- ** Namespaces
- *****************************************************************************/
-
-namespace thormang3_offset_tuner_client
-{
-
-using namespace Qt;
-
-/*****************************************************************************
- ** Implementation [MainWindow]
- *****************************************************************************/
-
-MainWindow::MainWindow(int argc, char** argv, QWidget *parent)
-    : QMainWindow(parent),
-      offset_tuner_qnode_(argc, argv)
-{
-  ui_.setupUi(this);  // Calling this incidentally connects all ui's triggers to on_...() callbacks in this class.
-  QObject::connect(ui_.actionAbout_Qt, SIGNAL(triggered(bool)), qApp, SLOT(aboutQt()));  // qApp is a global variable for the application
-
-  setWindowIcon(QIcon(":/images/icon.png"));
-  ui_.tab_manager->setCurrentIndex(0);  // ensure the first tab is showing - qt-designer should have this already hardwired, but often loses it (settings?).
-  QObject::connect(&offset_tuner_qnode_, SIGNAL(rosShutdown()), this, SLOT(close()));
-
-  all_torque_on_ = false;
-
-  spinBox_list_.push_back("goal");
-  spinBox_list_.push_back("offset");
-  spinBox_list_.push_back("mod");
-  spinBox_list_.push_back("present");
-  spinBox_list_.push_back("p_gain");
-  spinBox_list_.push_back("i_gain");
-  spinBox_list_.push_back("d_gain");
-
-  /****************************
-   ** Connect
-   ****************************/
-
-  qRegisterMetaType<thormang3_offset_tuner_msgs::JointOffsetPositionData>(
-      "thormang3_offset_tuner_msgs::JointOffsetPositionData");
-  QObject::connect(&offset_tuner_qnode_,
-                   SIGNAL(update_present_joint_offset_data(thormang3_offset_tuner_msgs::JointOffsetPositionData)), this,
-                   SLOT(update_joint_offset_data_spinbox(thormang3_offset_tuner_msgs::JointOffsetPositionData)));
-
-  /*********************
-   ** Logging
-   **********************/
-  ui_.view_logging->setModel(offset_tuner_qnode_.loggingModel());
-  QObject::connect(&offset_tuner_qnode_, SIGNAL(loggingUpdated()), this, SLOT(updateLoggingView()));
-
-  /****************************
-   ** Connect
-   ****************************/
-
-  /*********************
-   ** Auto Start
-   **********************/
-  offset_tuner_qnode_.init();
-
-  // make ui
-  MakeUI();
-}
-
-MainWindow::~MainWindow()
-{
-}
-
-/*****************************************************************************
- ** Implementation [Slots]
- *****************************************************************************/
-
-void MainWindow::on_save_button_clicked(bool check)
-{
-  std_msgs::String msg;
-  msg.data = "save";
-
-  offset_tuner_qnode_.send_command_msg(msg);
-}
-
-void MainWindow::on_inipose_button_clicked(bool checck)
-{
-  std_msgs::String msg;
-  msg.data = "ini_pose";
-
-  offset_tuner_qnode_.send_command_msg(msg);
-}
-
-void MainWindow::on_refresh_button_clicked(bool check)
-{
-  offset_tuner_qnode_.getPresentJointOffsetData();
-}
-
-void MainWindow::all_torque_on_button_clicked(QObject *button_group)
-{
-  all_torque_on_ = true;
-
-  QButtonGroup* torque_button_group = qobject_cast<QButtonGroup*>(button_group);
-  if (!torque_button_group)  // this is just a safety check
-    return;
-
-  QList<QAbstractButton *> torque_buttons = torque_button_group->buttons();
-  for (int ix = 0; ix < torque_buttons.size(); ix++)
-  {
-    if (torque_buttons[ix]->isChecked() == false)
-      torque_buttons[ix]->click();
-  }
-
-  offset_tuner_qnode_.getPresentJointOffsetData();
-
-  all_torque_on_ = false;
-}
-
-void MainWindow::all_torque_off_button_clicked(QObject *button_group)
-{
-  QButtonGroup* torque_button_group = qobject_cast<QButtonGroup*>(button_group);
-  if (!torque_button_group)  // this is just a safety check
-    return;
-
-  QList<QAbstractButton *> torque_buttons = torque_button_group->buttons();
-  for (int ix = 0; ix < torque_buttons.size(); ix++)
-  {
-    if (torque_buttons[ix]->isChecked() == true)
-      torque_buttons[ix]->click();
-  }
-}
-
-//void MainWindow::checkbox_clicked(QString joint_name)
-void MainWindow::torque_checkbox_clicked(QWidget *widget)
-{
-  QCheckBox* checkBox = qobject_cast<QCheckBox*>(widget);
-  if (!checkBox)  // this is just a safety check
-    return;
-
-  std::string joint_name = checkBox->text().toStdString();
-  bool _is_on = checkBox->isChecked();
-
-  QList<QAbstractSpinBox *> spinbox_list = joint_spinbox_map_[joint_name];
-
-  for (int ix = 0; ix < spinbox_list.size(); ix++)
-  {
-    spinbox_list[ix]->setEnabled(_is_on);
-  }
-
-  publish_torque_msgs(joint_name, _is_on);
-
-}
-
-void MainWindow::publish_torque_msgs(std::string &joint_name, bool torque_on)
-{
-  thormang3_offset_tuner_msgs::JointTorqueOnOffArray msg_array;
-  thormang3_offset_tuner_msgs::JointTorqueOnOff msg;
-
-  msg.joint_name = joint_name;
-  msg.torque_enable = torque_on;
-
-  msg_array.torque_enable_data.push_back(msg);
-
-  offset_tuner_qnode_.send_torque_enable_msg(msg_array);
-
-  if (all_torque_on_ == false)
-    offset_tuner_qnode_.getPresentJointOffsetData();
-}
-
-void MainWindow::spinBox_valueChanged(QString joint_name)
-{
-  if (offset_tuner_qnode_.is_refresh() == true)
-    return;
-
-  thormang3_offset_tuner_msgs::JointOffsetData msg;
-  std::string current_joint_name = joint_name.toStdString();
-
-  QList<QAbstractSpinBox *> spinbox_list = joint_spinbox_map_[current_joint_name];
-  QDoubleSpinBox *mod_spinBox;
-
-  msg.joint_name = current_joint_name;
-
-  for (int ix = 0; ix < spinbox_list.size(); ix++)
-  {
-    if (spinbox_list[ix]->whatsThis().toStdString() == "goal")
-    {
-      QDoubleSpinBox* spinbox = qobject_cast<QDoubleSpinBox*>(spinbox_list[ix]);
-      if (!spinbox)  // this is just a safety check
-        continue;
-
-      msg.goal_value = spinbox->value() * M_PI / 180.0;
-    }
-    else if (spinbox_list[ix]->whatsThis().toStdString() == "offset")
-    {
-      QDoubleSpinBox* spinbox = qobject_cast<QDoubleSpinBox*>(spinbox_list[ix]);
-      if (!spinbox)  // this is just a safety check
-        continue;
-
-      msg.offset_value = spinbox->value() * M_PI / 180.0;
-    }
-    else if (spinbox_list[ix]->whatsThis().toStdString() == "mod")
-    {
-      mod_spinBox = qobject_cast<QDoubleSpinBox*>(spinbox_list[ix]);
-    }
-    else if (spinbox_list[ix]->whatsThis().toStdString() == "p_gain")
-    {
-      QSpinBox* spinbox = qobject_cast<QSpinBox*>(spinbox_list[ix]);
-      if (!spinbox)  // this is just a safety check
-        continue;
-
-      msg.p_gain = spinbox->value();
-    }
-    else if (spinbox_list[ix]->whatsThis().toStdString() == "i_gain")
-    {
-      QSpinBox* spinbox = qobject_cast<QSpinBox*>(spinbox_list[ix]);
-      if (!spinbox)  // this is just a safety check
-        continue;
-
-      msg.i_gain = spinbox->value();
-    }
-    else if (spinbox_list[ix]->whatsThis().toStdString() == "d_gain")
-    {
-      QSpinBox* spinbox = qobject_cast<QSpinBox*>(spinbox_list[ix]);
-      if (!spinbox)  // this is just a safety check
-        continue;
-
-      msg.d_gain = spinbox->value();
-    }
-  }
-
-  if (mod_spinBox)  // this is just a safety check
-    mod_spinBox->setValue((msg.goal_value + msg.offset_value) * 180.0 / M_PI);
-
-  offset_tuner_qnode_.send_joint_offset_data_msg(msg);
-}
-
-void MainWindow::update_joint_offset_data_spinbox(thormang3_offset_tuner_msgs::JointOffsetPositionData msg)
-{
-  std::string joint_name = msg.joint_name;
-
-  QList<QAbstractSpinBox *> spinbox_list = joint_spinbox_map_[joint_name];
-
-  for (int ix = 0; ix < spinbox_list.size(); ix++)
-  {
-    if (spinbox_list[ix]->whatsThis().toStdString() == "goal")
-    {
-      QDoubleSpinBox* spinbox = qobject_cast<QDoubleSpinBox*>(spinbox_list[ix]);
-      if (!spinbox)  // this is just a safety check
-        continue;
-
-      spinbox->setValue(msg.goal_value * 180.0 / M_PI);
-    }
-    else if (spinbox_list[ix]->whatsThis().toStdString() == "offset")
-    {
-      QDoubleSpinBox* spinbox = qobject_cast<QDoubleSpinBox*>(spinbox_list[ix]);
-      if (!spinbox)  // this is just a safety check
-        continue;
-
-      spinbox->setValue(msg.offset_value * 180.0 / M_PI);
-    }
-    else if (spinbox_list[ix]->whatsThis().toStdString() == "present")
-    {
-      QDoubleSpinBox* spinbox = qobject_cast<QDoubleSpinBox*>(spinbox_list[ix]);
-      if (!spinbox)  // this is just a safety check
-        continue;
-
-      spinbox->setValue(msg.present_value * 180.0 / M_PI);
-    }
-    else if (spinbox_list[ix]->whatsThis().toStdString() == "p_gain")
-    {
-      QSpinBox* spinbox = qobject_cast<QSpinBox*>(spinbox_list[ix]);
-      if (!spinbox)  // this is just a safety check
-        continue;
-
-      spinbox->setValue(msg.p_gain);
-    }
-    else if (spinbox_list[ix]->whatsThis().toStdString() == "i_gain")
-    {
-      QSpinBox* spinbox = qobject_cast<QSpinBox*>(spinbox_list[ix]);
-      if (!spinbox)  // this is just a safety check
-        continue;
-
-      spinbox->setValue(msg.i_gain);
-    }
-    else if (spinbox_list[ix]->whatsThis().toStdString() == "d_gain")
-    {
-      QSpinBox* spinbox = qobject_cast<QSpinBox*>(spinbox_list[ix]);
-      if (!spinbox)  // this is just a safety check
-        continue;
-
-      spinbox->setValue(msg.d_gain);
-    }
-  }
-}
-
-/*****************************************************************************
- ** Implemenation [Slots][manually connected]
- *****************************************************************************/
-
-/**
- * This function is signalled by the underlying model. When the model changes,
- * this will drop the cursor down to the last line in the QListview to ensure
- * the user can always see the latest log message.
- */
-void MainWindow::updateLoggingView()
-{
-  ui_.view_logging->scrollToBottom();
-}
-
-void MainWindow::MakeUI()
-{
-  MakeTabUI(ui_.right_arm_group, ui_.right_arm_torque, right_arm_button_group_,
-            offset_tuner_qnode_.right_arm_offset_group);
-  MakeTabUI(ui_.left_arm_group, ui_.left_arm_torque, left_arm_button_group_, offset_tuner_qnode_.left_arm_offset_group);
-  MakeTabUI(ui_.leg_group, ui_.leg_torque, legs_button_group_, offset_tuner_qnode_.legs_offset_group);
-  MakeTabUI(ui_.body_group, ui_.body_torque, body_button_group_, offset_tuner_qnode_.body_offset_group);
-}
-
-void MainWindow::MakeTabUI(QGroupBox *joint_widget, QGroupBox *torque_widget, QButtonGroup *button_group,
-                           std::map<int, std::string> &offset_group)
-{
-  QSignalMapper *torque_checkbox_signalMapper = new QSignalMapper(this);
-
-  QGridLayout *grid_layout = (QGridLayout *) joint_widget->layout();
-  QGridLayout *torque_layout = (QGridLayout *) torque_widget->layout();
-
-  button_group = new QButtonGroup();
-  button_group->setExclusive(false);
-
-  int row = 3;
-  int torque_checkbox_index = 0;
-  int torque_row = 1;
-  int torque_col = 0;
-  for (std::map<int, std::string>::iterator map_iter = offset_group.begin(); map_iter != offset_group.end(); ++map_iter)
-  {
-    QSignalMapper *spingox_signalMapper = new QSignalMapper(this);
-    QList<QAbstractSpinBox *> spinbox_list;
-
-    // spin_box
-    int col = 0;
-    int size = 1;
-    std::string joint_name = map_iter->second;
-    QString q_joint_name = QString::fromStdString(joint_name);
-
-    // label
-    QLabel *joint_label = new QLabel(q_joint_name);
-    grid_layout->addWidget(joint_label, row, col++, 1, size);
-
-    // double spin box
-    for (int ix = 0; ix < 4; ix++)
-    {
-      QDoubleSpinBox *spin_box = new QDoubleSpinBox();
-      spin_box->setWhatsThis(tr(spinBox_list_[ix].c_str()));
-      spin_box->setMinimum(-360);
-      spin_box->setMaximum(360);
-      spin_box->setSingleStep(0.05);
-
-      switch (ix)
-      {
-        case 2:
-        case 3:
-          spin_box->setReadOnly(true);
-          break;
-
-        default:
-          spingox_signalMapper->setMapping(spin_box, q_joint_name);
-          QObject::connect(spin_box, SIGNAL(valueChanged(QString)), spingox_signalMapper, SLOT(map()));
-          break;
-      }
-
-      grid_layout->addWidget(spin_box, row, col++, 1, size);
-
-      spinbox_list.append(spin_box);
-    }
-
-    // spin box
-    for (int ix = 0; ix < 3; ix++)
-    {
-      QSpinBox *spin_box = new QSpinBox();
-      spin_box->setWhatsThis(tr(spinBox_list_[ix + 4].c_str()));
-      spin_box->setMinimum(0);
-      spin_box->setMaximum(1000);
-      spin_box->setSingleStep(1);
-
-      switch (ix)
-      {
-        case 0:
-          spin_box->setValue(32);
-
-          spingox_signalMapper->setMapping(spin_box, q_joint_name);
-          QObject::connect(spin_box, SIGNAL(valueChanged(QString)), spingox_signalMapper, SLOT(map()));
-          break;
-
-        default:
-          spin_box->setReadOnly(true);
-          break;
-      }
-
-      grid_layout->addWidget(spin_box, row, col++, 1, size);
-
-      spinbox_list.append(spin_box);
-    }
-
-    // spinbox
-    joint_spinbox_map_[joint_name] = spinbox_list;
-    QObject::connect(spingox_signalMapper, SIGNAL(mapped(QString)), this, SLOT(spinBox_valueChanged(QString)));
-
-    row += 1;
-
-    // torque checkbox
-    torque_row = torque_checkbox_index / 6;
-    torque_col = torque_checkbox_index % 6;
-
-    QCheckBox *check_box = new QCheckBox(q_joint_name);
-    check_box->setChecked(true);
-    torque_layout->addWidget(check_box, torque_row, torque_col, 1, size);
-    button_group->addButton(check_box);
-
-    torque_checkbox_signalMapper->setMapping(check_box, check_box);
-    QObject::connect(check_box, SIGNAL(clicked()), torque_checkbox_signalMapper, SLOT(map()));
-
-    torque_checkbox_index += 1;
-  }
-
-  // all torque on
-  QSignalMapper *torque_on_signalMapper = new QSignalMapper(this);
-  QPushButton *on_button = new QPushButton(tr("All torque ON"));
-  torque_layout->addWidget(on_button, torque_row + 1, 4, 1, 1);
-  torque_on_signalMapper->setMapping(on_button, button_group);
-  QObject::connect(on_button, SIGNAL(clicked()), torque_on_signalMapper, SLOT(map()));
-  QObject::connect(torque_on_signalMapper, SIGNAL(mapped(QObject*)), this,
-                   SLOT(all_torque_on_button_clicked(QObject*)));
-
-  // all torque off
-  QSignalMapper *torque_off_signalMapper = new QSignalMapper(this);
-  QPushButton *off_button = new QPushButton(tr("All torque OFF"));
-  torque_layout->addWidget(off_button, torque_row + 1, 5, 1, 1);
-  torque_off_signalMapper->setMapping(off_button, button_group);
-  QObject::connect(off_button, SIGNAL(clicked()), torque_off_signalMapper, SLOT(map()));
-  QObject::connect(torque_off_signalMapper, SIGNAL(mapped(QObject*)), this,
-                   SLOT(all_torque_off_button_clicked(QObject*)));
-
-  QObject::connect(torque_checkbox_signalMapper, SIGNAL(mapped(QWidget*)), this,
-                   SLOT(torque_checkbox_clicked(QWidget*)));
-}
-
-/*****************************************************************************
- ** Implementation [Menu]
- *****************************************************************************/
-
-void MainWindow::on_actionAbout_triggered()
-{
-  QMessageBox::about(this, tr("About ..."), tr("<h2>THORMANG3 Offset tuner client</h2><p>Copyright ROBOTIS</p>"));
-}
-
-/*****************************************************************************
- ** Implementation [Configuration]
- *****************************************************************************/
-
-void MainWindow::closeEvent(QCloseEvent *event)
-{
-  QMainWindow::closeEvent(event);
-}
-
-}  // namespace thormang3_offset_tuner_client
-
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_offset_tuner_client/src/qnode.cpp b/ROBOTIS-THORMANG-OPC-for-git/thormang3_offset_tuner_client/src/qnode.cpp
deleted file mode 100644
index 75fda11..0000000
--- a/ROBOTIS-THORMANG-OPC-for-git/thormang3_offset_tuner_client/src/qnode.cpp
+++ /dev/null
@@ -1,262 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2016, ROBOTIS CO., LTD.
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- *
- * * Redistributions of source code must retain the above copyright notice, this
- *   list of conditions and the following disclaimer.
- *
- * * Redistributions in binary form must reproduce the above copyright notice,
- *   this list of conditions and the following disclaimer in the documentation
- *   and/or other materials provided with the distribution.
- *
- * * Neither the name of ROBOTIS nor the names of its
- *   contributors may be used to endorse or promote products derived from
- *   this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
- * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
- * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- *******************************************************************************/
-
-/* Author: Kayman Jung, sch */
-
-/*****************************************************************************
- ** Includes
- *****************************************************************************/
-
-#include <ros/ros.h>
-#include <ros/network.h>
-#include <string>
-#include <std_msgs/String.h>
-#include <sstream>
-#include "../include/thormang3_offset_tuner_client/qnode.hpp"
-
-/*****************************************************************************
- ** Namespaces
- *****************************************************************************/
-
-namespace thormang3_offset_tuner_client
-{
-
-/*****************************************************************************
- ** Implementation
- *****************************************************************************/
-
-QNode::QNode(int argc, char** argv)
-    : init_argc_(argc),
-      init_argv_(argv),
-      is_refresh_(false)
-{
-}
-
-QNode::~QNode()
-{
-  if (ros::isStarted())
-  {
-    ros::shutdown();  // explicitly needed since we use ros::start();
-    ros::waitForShutdown();
-  }
-  wait();
-}
-
-bool QNode::init()
-{
-  ros::init(init_argc_, init_argv_, "thormang3_offset_tuner_client");
-
-  ros::start();  // explicitly needed since our nodehandle is going out of scope.
-  ros::NodeHandle nh;
-
-  // Add your ros communications here
-  joint_offset_data_pub_ = nh.advertise<thormang3_offset_tuner_msgs::JointOffsetData>(
-      "/robotis/offset_tuner/joint_offset_data", 0);
-  torque_enable_pub_ = nh.advertise<thormang3_offset_tuner_msgs::JointTorqueOnOffArray>(
-      "/robotis/offset_tuner/torque_enable", 0);
-  command_pub_ = nh.advertise<std_msgs::String>("/robotis/offset_tuner/command", 0);
-
-  get_present_joint_offset_data_client_ = nh.serviceClient<thormang3_offset_tuner_msgs::GetPresentJointOffsetData>(
-      "/robotis/offset_tuner/get_present_joint_offset_data");
-
-  std::string _config_path = ros::package::getPath("thormang3_offset_tuner_client") + "/config/joint_data.yaml";
-  ParseOffsetGroup(_config_path);
-
-  start();
-  return true;
-}
-
-void QNode::run()
-{
-
-  ros::Rate loop_rate(125);
-
-  while (ros::ok())
-  {
-    ros::spinOnce();
-    loop_rate.sleep();
-  }
-  std::cout << "Ros shutdown, proceeding to close the gui." << std::endl;
-  Q_EMIT rosShutdown();  // used to signal the gui for a shutdown (useful to roslaunch)
-}
-
-void QNode::send_torque_enable_msg(thormang3_offset_tuner_msgs::JointTorqueOnOffArray msg)
-{
-  torque_enable_pub_.publish(msg);
-
-  log(Info, "Joint Torque On/Off");
-}
-
-void QNode::send_joint_offset_data_msg(thormang3_offset_tuner_msgs::JointOffsetData msg)
-{
-  joint_offset_data_pub_.publish(msg);
-
-  log(Info, "Send Joint Offset Data");
-}
-
-void QNode::send_command_msg(std_msgs::String msg)
-{
-  command_pub_.publish(msg);
-
-  std::stringstream log_msg;
-  log_msg << "Send Command : " << msg.data;
-
-  log(Info, log_msg.str());
-}
-
-void QNode::getPresentJointOffsetData()
-{
-  is_refresh_ = true;
-  thormang3_offset_tuner_msgs::GetPresentJointOffsetData get_present_joint_offset_data;
-
-  //request
-
-  //response
-  if (get_present_joint_offset_data_client_.call(get_present_joint_offset_data))
-  {
-    for (int id = 0; id < get_present_joint_offset_data.response.present_data_array.size(); id++)
-    {
-      thormang3_offset_tuner_msgs::JointOffsetPositionData present_joint_data = get_present_joint_offset_data.response
-          .present_data_array[id];
-
-      Q_EMIT update_present_joint_offset_data(present_joint_data);
-    }
-  }
-  else
-    log(Error, "Fail to get joint offset data");
-
-  is_refresh_ = false;
-}
-
-void QNode::log(const LogLevel &level, const std::string &msg)
-{
-  logging_model_.insertRows(logging_model_.rowCount(), 1);
-  std::stringstream logging_model_msg;
-  switch (level)
-  {
-    case (Debug):
-    {
-      ROS_DEBUG_STREAM(msg);
-      logging_model_msg << "[DEBUG] [" << ros::Time::now() << "]: " << msg;
-      break;
-    }
-    case (Info):
-    {
-      ROS_INFO_STREAM(msg);
-      logging_model_msg << "[INFO] [" << ros::Time::now() << "]: " << msg;
-      break;
-    }
-    case (Warn):
-    {
-      ROS_WARN_STREAM(msg);
-      logging_model_msg << "[INFO] [" << ros::Time::now() << "]: " << msg;
-      break;
-    }
-    case (Error):
-    {
-      ROS_ERROR_STREAM(msg);
-      logging_model_msg << "[ERROR] [" << ros::Time::now() << "]: " << msg;
-      break;
-    }
-    case (Fatal):
-    {
-      ROS_FATAL_STREAM(msg);
-      logging_model_msg << "[FATAL] [" << ros::Time::now() << "]: " << msg;
-      break;
-    }
-  }
-  QVariant new_row(QString(logging_model_msg.str().c_str()));
-  logging_model_.setData(logging_model_.index(logging_model_.rowCount() - 1), new_row);
-  Q_EMIT loggingUpdated();  // used to readjust the scrollbar
-}
-
-void QNode::ParseOffsetGroup(const std::string &path)
-{
-  YAML::Node doc;
-  try
-  {
-    // load yaml
-    doc = YAML::LoadFile(path.c_str());
-  } catch (const std::exception& e)
-  {
-    ROS_ERROR("Fail to load offset config yaml.");
-    return;
-  }
-
-  // parse right_arm
-  YAML::Node right_arm_node = doc["right_arm"];
-  for (YAML::iterator yaml_it = right_arm_node.begin(); yaml_it != right_arm_node.end(); ++yaml_it)
-  {
-    int index;
-    std::string joint_name;
-
-    index = yaml_it->first.as<int>();
-    joint_name = yaml_it->second.as<std::string>();
-
-    right_arm_offset_group[index] = joint_name;
-  }
-
-  YAML::Node left_arm_node = doc["left_arm"];
-  for (YAML::iterator yaml_it = left_arm_node.begin(); yaml_it != left_arm_node.end(); ++yaml_it)
-  {
-    int index;
-    std::string joint_name;
-
-    index = yaml_it->first.as<int>();
-    joint_name = yaml_it->second.as<std::string>();
-
-    left_arm_offset_group[index] = joint_name;
-  }
-
-  YAML::Node legs_node = doc["legs"];
-  for (YAML::iterator yaml_it = legs_node.begin(); yaml_it != legs_node.end(); ++yaml_it)
-  {
-    int index;
-    std::string joint_name;
-
-    index = yaml_it->first.as<int>();
-    joint_name = yaml_it->second.as<std::string>();
-
-    legs_offset_group[index] = joint_name;
-  }
-
-  YAML::Node body_node = doc["body"];
-  for (YAML::iterator yaml_it = body_node.begin(); yaml_it != body_node.end(); ++yaml_it)
-  {
-    int index;
-    std::string joint_name;
-
-    index = yaml_it->first.as<int>();
-    joint_name = yaml_it->second.as<std::string>();
-
-    body_offset_group[index] = joint_name;
-  }
-}
-}  // namespace thormang3_offset_tuner_client
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_offset_tuner_client/ui/main_window.ui b/ROBOTIS-THORMANG-OPC-for-git/thormang3_offset_tuner_client/ui/main_window.ui
deleted file mode 100644
index a5c9c68..0000000
--- a/ROBOTIS-THORMANG-OPC-for-git/thormang3_offset_tuner_client/ui/main_window.ui
+++ /dev/null
@@ -1,911 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<ui version="4.0">
- <class>MainWindowDesign</class>
- <widget class="QMainWindow" name="MainWindowDesign">
-  <property name="geometry">
-   <rect>
-    <x>0</x>
-    <y>0</y>
-    <width>1644</width>
-    <height>974</height>
-   </rect>
-  </property>
-  <property name="sizePolicy">
-   <sizepolicy hsizetype="Expanding" vsizetype="Expanding">
-    <horstretch>0</horstretch>
-    <verstretch>0</verstretch>
-   </sizepolicy>
-  </property>
-  <property name="windowTitle">
-   <string>Offset Tuner Client</string>
-  </property>
-  <property name="windowIcon">
-   <iconset resource="../resources/images.qrc">
-    <normaloff>:/images/icon.png</normaloff>:/images/icon.png</iconset>
-  </property>
-  <property name="locale">
-   <locale language="English" country="Australia"/>
-  </property>
-  <widget class="QWidget" name="centralwidget">
-   <layout class="QHBoxLayout" name="horizontalLayout_3">
-    <item>
-     <widget class="QTabWidget" name="tab_manager">
-      <property name="sizePolicy">
-       <sizepolicy hsizetype="Minimum" vsizetype="Preferred">
-        <horstretch>0</horstretch>
-        <verstretch>0</verstretch>
-       </sizepolicy>
-      </property>
-      <property name="minimumSize">
-       <size>
-        <width>500</width>
-        <height>0</height>
-       </size>
-      </property>
-      <property name="maximumSize">
-       <size>
-        <width>16777215</width>
-        <height>1000</height>
-       </size>
-      </property>
-      <property name="locale">
-       <locale language="English" country="Australia"/>
-      </property>
-      <property name="currentIndex">
-       <number>0</number>
-      </property>
-      <widget class="QWidget" name="tab_status">
-       <attribute name="title">
-        <string>Ros Communications</string>
-       </attribute>
-       <layout class="QVBoxLayout" name="verticalLayout_2">
-        <item>
-         <widget class="QGroupBox" name="logging_groupBox">
-          <property name="sizePolicy">
-           <sizepolicy hsizetype="MinimumExpanding" vsizetype="Preferred">
-            <horstretch>0</horstretch>
-            <verstretch>0</verstretch>
-           </sizepolicy>
-          </property>
-          <property name="title">
-           <string>Logging</string>
-          </property>
-          <layout class="QGridLayout" name="gridLayout_3">
-           <item row="0" column="0">
-            <widget class="QListView" name="view_logging"/>
-           </item>
-          </layout>
-         </widget>
-        </item>
-       </layout>
-      </widget>
-     </widget>
-    </item>
-   </layout>
-  </widget>
-  <widget class="QMenuBar" name="menubar">
-   <property name="geometry">
-    <rect>
-     <x>0</x>
-     <y>0</y>
-     <width>1644</width>
-     <height>25</height>
-    </rect>
-   </property>
-   <widget class="QMenu" name="menu_File">
-    <property name="title">
-     <string>&amp;App</string>
-    </property>
-    <addaction name="action_Preferences"/>
-    <addaction name="separator"/>
-    <addaction name="actionAbout"/>
-    <addaction name="actionAbout_Qt"/>
-    <addaction name="separator"/>
-    <addaction name="action_Quit"/>
-   </widget>
-   <addaction name="menu_File"/>
-  </widget>
-  <widget class="QStatusBar" name="statusbar"/>
-  <widget class="QDockWidget" name="dock_status">
-   <property name="sizePolicy">
-    <sizepolicy hsizetype="Minimum" vsizetype="Preferred">
-     <horstretch>0</horstretch>
-     <verstretch>0</verstretch>
-    </sizepolicy>
-   </property>
-   <property name="minimumSize">
-    <size>
-     <width>1100</width>
-     <height>878</height>
-    </size>
-   </property>
-   <property name="allowedAreas">
-    <set>Qt::RightDockWidgetArea</set>
-   </property>
-   <property name="windowTitle">
-    <string>Command Panel</string>
-   </property>
-   <attribute name="dockWidgetArea">
-    <number>2</number>
-   </attribute>
-   <widget class="QWidget" name="dockWidgetContents_2">
-    <property name="sizePolicy">
-     <sizepolicy hsizetype="Minimum" vsizetype="Preferred">
-      <horstretch>0</horstretch>
-      <verstretch>0</verstretch>
-     </sizepolicy>
-    </property>
-    <layout class="QVBoxLayout" name="verticalLayout">
-     <item>
-      <widget class="QFrame" name="frame">
-       <property name="sizePolicy">
-        <sizepolicy hsizetype="Minimum" vsizetype="Minimum">
-         <horstretch>0</horstretch>
-         <verstretch>0</verstretch>
-        </sizepolicy>
-       </property>
-       <property name="maximumSize">
-        <size>
-         <width>16777215</width>
-         <height>1000</height>
-        </size>
-       </property>
-       <property name="frameShape">
-        <enum>QFrame::StyledPanel</enum>
-       </property>
-       <property name="frameShadow">
-        <enum>QFrame::Raised</enum>
-       </property>
-       <layout class="QVBoxLayout" name="verticalLayout_3">
-        <item>
-         <widget class="QTabWidget" name="tab">
-          <property name="sizePolicy">
-           <sizepolicy hsizetype="Minimum" vsizetype="Minimum">
-            <horstretch>0</horstretch>
-            <verstretch>0</verstretch>
-           </sizepolicy>
-          </property>
-          <property name="minimumSize">
-           <size>
-            <width>0</width>
-            <height>0</height>
-           </size>
-          </property>
-          <property name="maximumSize">
-           <size>
-            <width>16777215</width>
-            <height>3000</height>
-           </size>
-          </property>
-          <property name="currentIndex">
-           <number>0</number>
-          </property>
-          <widget class="QWidget" name="right_arm_tab">
-           <attribute name="title">
-            <string>Right Arm</string>
-           </attribute>
-           <layout class="QVBoxLayout" name="verticalLayout_4">
-            <item alignment="Qt::AlignRight">
-             <widget class="QLabel" name="right_arm_modval">
-              <property name="maximumSize">
-               <size>
-                <width>16777215</width>
-                <height>20</height>
-               </size>
-              </property>
-              <property name="text">
-               <string>(Modval = Goal Pos. + Offset) </string>
-              </property>
-             </widget>
-            </item>
-            <item>
-             <widget class="QGroupBox" name="right_arm_group">
-              <property name="sizePolicy">
-               <sizepolicy hsizetype="Minimum" vsizetype="Minimum">
-                <horstretch>0</horstretch>
-                <verstretch>0</verstretch>
-               </sizepolicy>
-              </property>
-              <property name="maximumSize">
-               <size>
-                <width>16777215</width>
-                <height>350</height>
-               </size>
-              </property>
-              <property name="title">
-               <string>Joint Offset Data</string>
-              </property>
-              <layout class="QGridLayout" name="gridLayout">
-               <item row="1" column="4" alignment="Qt::AlignHCenter">
-                <widget class="QLabel" name="r_arm_present_pos">
-                 <property name="text">
-                  <string>Present Pos.</string>
-                 </property>
-                </widget>
-               </item>
-               <item row="2" column="2" alignment="Qt::AlignHCenter">
-                <widget class="QLabel" name="r_arm_deg_2">
-                 <property name="text">
-                  <string>[deg]</string>
-                 </property>
-                </widget>
-               </item>
-               <item row="1" column="3" alignment="Qt::AlignHCenter">
-                <widget class="QLabel" name="r_arm_modval">
-                 <property name="text">
-                  <string>ModVal</string>
-                 </property>
-                </widget>
-               </item>
-               <item row="1" column="2" alignment="Qt::AlignHCenter">
-                <widget class="QLabel" name="r_arm_offset">
-                 <property name="text">
-                  <string>Offset </string>
-                 </property>
-                </widget>
-               </item>
-               <item row="2" column="4" alignment="Qt::AlignHCenter">
-                <widget class="QLabel" name="r_arm_deg_4">
-                 <property name="text">
-                  <string>[deg]</string>
-                 </property>
-                </widget>
-               </item>
-               <item row="2" column="3" alignment="Qt::AlignHCenter">
-                <widget class="QLabel" name="r_arm_deg_3">
-                 <property name="text">
-                  <string>[deg]</string>
-                 </property>
-                </widget>
-               </item>
-               <item row="1" column="7" alignment="Qt::AlignHCenter">
-                <widget class="QLabel" name="r_arm_d_gain">
-                 <property name="text">
-                  <string>D Gain</string>
-                 </property>
-                </widget>
-               </item>
-               <item row="1" column="5" alignment="Qt::AlignHCenter">
-                <widget class="QLabel" name="r_arm_p_gain">
-                 <property name="text">
-                  <string>P Gain</string>
-                 </property>
-                </widget>
-               </item>
-               <item row="1" column="6" alignment="Qt::AlignHCenter">
-                <widget class="QLabel" name="r_arm_i_gain">
-                 <property name="text">
-                  <string>I Gain</string>
-                 </property>
-                </widget>
-               </item>
-               <item row="1" column="1" alignment="Qt::AlignHCenter">
-                <widget class="QLabel" name="r_arm_goal_pos">
-                 <property name="text">
-                  <string>Goal Pos. </string>
-                 </property>
-                </widget>
-               </item>
-               <item row="2" column="1" alignment="Qt::AlignHCenter|Qt::AlignBottom">
-                <widget class="QLabel" name="r_arm_deg_1">
-                 <property name="text">
-                  <string>[deg]</string>
-                 </property>
-                </widget>
-               </item>
-               <item row="1" column="0">
-                <widget class="QLabel" name="label">
-                 <property name="text">
-                  <string/>
-                 </property>
-                </widget>
-               </item>
-               <item row="2" column="0">
-                <widget class="QLabel" name="label_2">
-                 <property name="text">
-                  <string/>
-                 </property>
-                </widget>
-               </item>
-              </layout>
-             </widget>
-            </item>
-            <item>
-             <widget class="QGroupBox" name="right_arm_torque">
-              <property name="sizePolicy">
-               <sizepolicy hsizetype="Preferred" vsizetype="Preferred">
-                <horstretch>0</horstretch>
-                <verstretch>0</verstretch>
-               </sizepolicy>
-              </property>
-              <property name="maximumSize">
-               <size>
-                <width>2100</width>
-                <height>200</height>
-               </size>
-              </property>
-              <property name="title">
-               <string>Torque On/Off</string>
-              </property>
-              <layout class="QGridLayout" name="gridLayout_2"/>
-             </widget>
-            </item>
-            <item>
-             <spacer name="verticalSpacer">
-              <property name="orientation">
-               <enum>Qt::Vertical</enum>
-              </property>
-              <property name="sizeHint" stdset="0">
-               <size>
-                <width>20</width>
-                <height>40</height>
-               </size>
-              </property>
-             </spacer>
-            </item>
-           </layout>
-          </widget>
-          <widget class="QWidget" name="left_arm_tab">
-           <attribute name="title">
-            <string>Left Arm</string>
-           </attribute>
-           <layout class="QVBoxLayout" name="verticalLayout_5">
-            <item alignment="Qt::AlignRight">
-             <widget class="QLabel" name="left_arm_modval">
-              <property name="text">
-               <string>(Modval = Goal Pos. + Offset) </string>
-              </property>
-             </widget>
-            </item>
-            <item>
-             <widget class="QGroupBox" name="left_arm_group">
-              <property name="sizePolicy">
-               <sizepolicy hsizetype="Minimum" vsizetype="Minimum">
-                <horstretch>0</horstretch>
-                <verstretch>0</verstretch>
-               </sizepolicy>
-              </property>
-              <property name="maximumSize">
-               <size>
-                <width>16777215</width>
-                <height>350</height>
-               </size>
-              </property>
-              <property name="title">
-               <string>Joint Offset Data</string>
-              </property>
-              <layout class="QGridLayout" name="gridLayout_4">
-               <item row="0" column="6" alignment="Qt::AlignHCenter">
-                <widget class="QLabel" name="l_arm_i_gain">
-                 <property name="text">
-                  <string>I Gain</string>
-                 </property>
-                </widget>
-               </item>
-               <item row="0" column="4" alignment="Qt::AlignHCenter">
-                <widget class="QLabel" name="l_arm_present_pos">
-                 <property name="text">
-                  <string>Present Pos.</string>
-                 </property>
-                </widget>
-               </item>
-               <item row="0" column="1" alignment="Qt::AlignHCenter">
-                <widget class="QLabel" name="l_arm_goal_pos">
-                 <property name="text">
-                  <string>Goal Pos.</string>
-                 </property>
-                </widget>
-               </item>
-               <item row="0" column="3" alignment="Qt::AlignHCenter">
-                <widget class="QLabel" name="l_arm_modval">
-                 <property name="text">
-                  <string>ModVal</string>
-                 </property>
-                </widget>
-               </item>
-               <item row="0" column="5" alignment="Qt::AlignHCenter">
-                <widget class="QLabel" name="l_arm_p_gain">
-                 <property name="text">
-                  <string>P Gain</string>
-                 </property>
-                </widget>
-               </item>
-               <item row="1" column="1" alignment="Qt::AlignHCenter">
-                <widget class="QLabel" name="l_arm_deg_1">
-                 <property name="text">
-                  <string>[deg]</string>
-                 </property>
-                </widget>
-               </item>
-               <item row="0" column="2" alignment="Qt::AlignHCenter">
-                <widget class="QLabel" name="l_arm_offset">
-                 <property name="text">
-                  <string>Offset</string>
-                 </property>
-                </widget>
-               </item>
-               <item row="1" column="4" alignment="Qt::AlignHCenter">
-                <widget class="QLabel" name="l_arm_deg_4">
-                 <property name="text">
-                  <string>[deg]</string>
-                 </property>
-                </widget>
-               </item>
-               <item row="1" column="3" alignment="Qt::AlignHCenter">
-                <widget class="QLabel" name="l_arm_deg_3">
-                 <property name="text">
-                  <string>[deg]</string>
-                 </property>
-                </widget>
-               </item>
-               <item row="1" column="2" alignment="Qt::AlignHCenter">
-                <widget class="QLabel" name="l_arm_deg_2">
-                 <property name="text">
-                  <string>[deg]</string>
-                 </property>
-                </widget>
-               </item>
-               <item row="0" column="7" alignment="Qt::AlignHCenter">
-                <widget class="QLabel" name="l_arm_d_gain">
-                 <property name="text">
-                  <string>D Gain</string>
-                 </property>
-                </widget>
-               </item>
-               <item row="1" column="0">
-                <widget class="QLabel" name="label_4">
-                 <property name="text">
-                  <string/>
-                 </property>
-                </widget>
-               </item>
-               <item row="0" column="0">
-                <widget class="QLabel" name="label_3">
-                 <property name="text">
-                  <string/>
-                 </property>
-                </widget>
-               </item>
-              </layout>
-             </widget>
-            </item>
-            <item>
-             <widget class="QGroupBox" name="left_arm_torque">
-              <property name="maximumSize">
-               <size>
-                <width>2000</width>
-                <height>150</height>
-               </size>
-              </property>
-              <property name="title">
-               <string>Torque On/Off</string>
-              </property>
-              <layout class="QGridLayout" name="gridLayout_5"/>
-             </widget>
-            </item>
-            <item>
-             <spacer name="verticalSpacer_2">
-              <property name="orientation">
-               <enum>Qt::Vertical</enum>
-              </property>
-              <property name="sizeHint" stdset="0">
-               <size>
-                <width>20</width>
-                <height>40</height>
-               </size>
-              </property>
-             </spacer>
-            </item>
-           </layout>
-          </widget>
-          <widget class="QWidget" name="leg_tab">
-           <attribute name="title">
-            <string>Legs</string>
-           </attribute>
-           <layout class="QGridLayout" name="gridLayout_6">
-            <item row="0" column="0" alignment="Qt::AlignRight">
-             <widget class="QLabel" name="leg_modval">
-              <property name="text">
-               <string>(Modval = Goal Pos. + Offset) </string>
-              </property>
-             </widget>
-            </item>
-            <item row="3" column="0">
-             <spacer name="verticalSpacer_3">
-              <property name="orientation">
-               <enum>Qt::Vertical</enum>
-              </property>
-              <property name="sizeHint" stdset="0">
-               <size>
-                <width>20</width>
-                <height>40</height>
-               </size>
-              </property>
-             </spacer>
-            </item>
-            <item row="1" column="0">
-             <widget class="QGroupBox" name="leg_group">
-              <property name="title">
-               <string>Joint Offset Data</string>
-              </property>
-              <layout class="QGridLayout" name="gridLayout_7">
-               <item row="1" column="4" alignment="Qt::AlignHCenter">
-                <widget class="QLabel" name="leg_deg_4">
-                 <property name="text">
-                  <string>[deg]</string>
-                 </property>
-                </widget>
-               </item>
-               <item row="0" column="3" alignment="Qt::AlignHCenter">
-                <widget class="QLabel" name="leg_modval_2">
-                 <property name="text">
-                  <string>Modval</string>
-                 </property>
-                </widget>
-               </item>
-               <item row="0" column="2" alignment="Qt::AlignHCenter">
-                <widget class="QLabel" name="leg_offset">
-                 <property name="text">
-                  <string>Offset</string>
-                 </property>
-                </widget>
-               </item>
-               <item row="1" column="3" alignment="Qt::AlignHCenter">
-                <widget class="QLabel" name="leg_deg_3">
-                 <property name="text">
-                  <string>[deg]</string>
-                 </property>
-                </widget>
-               </item>
-               <item row="0" column="5" alignment="Qt::AlignHCenter">
-                <widget class="QLabel" name="leg_p_gain">
-                 <property name="text">
-                  <string>P Gain</string>
-                 </property>
-                </widget>
-               </item>
-               <item row="1" column="2" alignment="Qt::AlignHCenter">
-                <widget class="QLabel" name="leg_deg_2">
-                 <property name="text">
-                  <string>[deg]</string>
-                 </property>
-                </widget>
-               </item>
-               <item row="0" column="6" alignment="Qt::AlignHCenter">
-                <widget class="QLabel" name="leg_i_gain">
-                 <property name="text">
-                  <string>I Gain</string>
-                 </property>
-                </widget>
-               </item>
-               <item row="1" column="1" alignment="Qt::AlignHCenter">
-                <widget class="QLabel" name="leg_deg_1">
-                 <property name="text">
-                  <string>[deg]</string>
-                 </property>
-                </widget>
-               </item>
-               <item row="0" column="4" alignment="Qt::AlignHCenter">
-                <widget class="QLabel" name="leg_present_pos">
-                 <property name="text">
-                  <string>Present Pos.</string>
-                 </property>
-                </widget>
-               </item>
-               <item row="0" column="1" alignment="Qt::AlignHCenter">
-                <widget class="QLabel" name="leg_goal_pos">
-                 <property name="text">
-                  <string>Goal Pos.</string>
-                 </property>
-                </widget>
-               </item>
-               <item row="0" column="7" alignment="Qt::AlignHCenter">
-                <widget class="QLabel" name="leg_d_gain">
-                 <property name="text">
-                  <string>D Gain</string>
-                 </property>
-                </widget>
-               </item>
-               <item row="1" column="0">
-                <widget class="QLabel" name="label_6">
-                 <property name="text">
-                  <string/>
-                 </property>
-                </widget>
-               </item>
-               <item row="0" column="0">
-                <widget class="QLabel" name="label_5">
-                 <property name="text">
-                  <string/>
-                 </property>
-                </widget>
-               </item>
-              </layout>
-             </widget>
-            </item>
-            <item row="2" column="0">
-             <widget class="QGroupBox" name="leg_torque">
-              <property name="title">
-               <string>Torque On/Off</string>
-              </property>
-              <layout class="QGridLayout" name="gridLayout_8"/>
-             </widget>
-            </item>
-           </layout>
-          </widget>
-          <widget class="QWidget" name="body_tab">
-           <attribute name="title">
-            <string>Body</string>
-           </attribute>
-           <layout class="QGridLayout" name="gridLayout_9">
-            <item row="3" column="0">
-             <spacer name="verticalSpacer_4">
-              <property name="orientation">
-               <enum>Qt::Vertical</enum>
-              </property>
-              <property name="sizeHint" stdset="0">
-               <size>
-                <width>20</width>
-                <height>40</height>
-               </size>
-              </property>
-             </spacer>
-            </item>
-            <item row="0" column="0" alignment="Qt::AlignRight">
-             <widget class="QLabel" name="body_modval">
-              <property name="text">
-               <string>(Modval = Goal Pos. + Offset) </string>
-              </property>
-             </widget>
-            </item>
-            <item row="1" column="0">
-             <widget class="QGroupBox" name="body_group">
-              <property name="title">
-               <string>Joint Offset Data</string>
-              </property>
-              <layout class="QGridLayout" name="gridLayout_10">
-               <item row="0" column="6" alignment="Qt::AlignHCenter">
-                <widget class="QLabel" name="body_i_gain">
-                 <property name="text">
-                  <string>I Gain</string>
-                 </property>
-                </widget>
-               </item>
-               <item row="0" column="5" alignment="Qt::AlignHCenter">
-                <widget class="QLabel" name="body_p_gain">
-                 <property name="text">
-                  <string>P Gain</string>
-                 </property>
-                </widget>
-               </item>
-               <item row="0" column="4" alignment="Qt::AlignHCenter">
-                <widget class="QLabel" name="body_preset_pos">
-                 <property name="text">
-                  <string>Present Pos.</string>
-                 </property>
-                </widget>
-               </item>
-               <item row="1" column="3" alignment="Qt::AlignHCenter">
-                <widget class="QLabel" name="body_deg_3">
-                 <property name="text">
-                  <string>[deg]</string>
-                 </property>
-                </widget>
-               </item>
-               <item row="0" column="3" alignment="Qt::AlignHCenter">
-                <widget class="QLabel" name="body_modval_2">
-                 <property name="text">
-                  <string>Modval</string>
-                 </property>
-                </widget>
-               </item>
-               <item row="1" column="2" alignment="Qt::AlignHCenter">
-                <widget class="QLabel" name="body_deg_2">
-                 <property name="text">
-                  <string>[deg]</string>
-                 </property>
-                </widget>
-               </item>
-               <item row="0" column="7" alignment="Qt::AlignHCenter">
-                <widget class="QLabel" name="body_d_gain">
-                 <property name="text">
-                  <string>D Gain</string>
-                 </property>
-                </widget>
-               </item>
-               <item row="0" column="2" alignment="Qt::AlignHCenter">
-                <widget class="QLabel" name="body_offset">
-                 <property name="text">
-                  <string>Offset</string>
-                 </property>
-                </widget>
-               </item>
-               <item row="0" column="1" alignment="Qt::AlignHCenter">
-                <widget class="QLabel" name="body_goal_pos">
-                 <property name="text">
-                  <string>Goal Pos.</string>
-                 </property>
-                </widget>
-               </item>
-               <item row="1" column="1" alignment="Qt::AlignHCenter">
-                <widget class="QLabel" name="body_deg_1">
-                 <property name="text">
-                  <string>[deg]</string>
-                 </property>
-                </widget>
-               </item>
-               <item row="1" column="4" alignment="Qt::AlignHCenter">
-                <widget class="QLabel" name="body_deg_4">
-                 <property name="text">
-                  <string>[deg]</string>
-                 </property>
-                </widget>
-               </item>
-               <item row="0" column="0">
-                <widget class="QLabel" name="label_7">
-                 <property name="text">
-                  <string/>
-                 </property>
-                </widget>
-               </item>
-               <item row="1" column="0">
-                <widget class="QLabel" name="label_8">
-                 <property name="text">
-                  <string/>
-                 </property>
-                </widget>
-               </item>
-              </layout>
-             </widget>
-            </item>
-            <item row="2" column="0">
-             <widget class="QGroupBox" name="body_torque">
-              <property name="title">
-               <string>Torque On/Off</string>
-              </property>
-              <layout class="QGridLayout" name="gridLayout_11">
-               <item row="0" column="0">
-                <widget class="QLabel" name="empty_1">
-                 <property name="text">
-                  <string/>
-                 </property>
-                </widget>
-               </item>
-               <item row="0" column="2">
-                <widget class="QLabel" name="empty_3">
-                 <property name="text">
-                  <string/>
-                 </property>
-                </widget>
-               </item>
-               <item row="0" column="1">
-                <widget class="QLabel" name="empty_2">
-                 <property name="text">
-                  <string/>
-                 </property>
-                </widget>
-               </item>
-              </layout>
-             </widget>
-            </item>
-           </layout>
-          </widget>
-         </widget>
-        </item>
-       </layout>
-      </widget>
-     </item>
-     <item>
-      <widget class="QWidget" name="widget" native="true">
-       <property name="sizePolicy">
-        <sizepolicy hsizetype="Minimum" vsizetype="Minimum">
-         <horstretch>0</horstretch>
-         <verstretch>0</verstretch>
-        </sizepolicy>
-       </property>
-       <property name="maximumSize">
-        <size>
-         <width>16777215</width>
-         <height>50</height>
-        </size>
-       </property>
-       <layout class="QHBoxLayout" name="horizontalLayout">
-        <item>
-         <widget class="QPushButton" name="inipose_button">
-          <property name="text">
-           <string>Initial Pose</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QPushButton" name="refresh_button">
-          <property name="text">
-           <string>Refresh</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QPushButton" name="save_button">
-          <property name="text">
-           <string>Save</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QPushButton" name="quit_button">
-          <property name="text">
-           <string>Quit</string>
-          </property>
-         </widget>
-        </item>
-       </layout>
-      </widget>
-     </item>
-    </layout>
-   </widget>
-  </widget>
-  <action name="action_Quit">
-   <property name="text">
-    <string>&amp;Quit</string>
-   </property>
-   <property name="shortcut">
-    <string>Ctrl+Q</string>
-   </property>
-   <property name="shortcutContext">
-    <enum>Qt::ApplicationShortcut</enum>
-   </property>
-  </action>
-  <action name="action_Preferences">
-   <property name="text">
-    <string>&amp;Preferences</string>
-   </property>
-  </action>
-  <action name="actionAbout">
-   <property name="text">
-    <string>&amp;About</string>
-   </property>
-  </action>
-  <action name="actionAbout_Qt">
-   <property name="text">
-    <string>About &amp;Qt</string>
-   </property>
-  </action>
- </widget>
- <resources>
-  <include location="../resources/images.qrc"/>
- </resources>
- <connections>
-  <connection>
-   <sender>action_Quit</sender>
-   <signal>triggered()</signal>
-   <receiver>MainWindowDesign</receiver>
-   <slot>close()</slot>
-   <hints>
-    <hint type="sourcelabel">
-     <x>-1</x>
-     <y>-1</y>
-    </hint>
-    <hint type="destinationlabel">
-     <x>399</x>
-     <y>299</y>
-    </hint>
-   </hints>
-  </connection>
-  <connection>
-   <sender>quit_button</sender>
-   <signal>clicked()</signal>
-   <receiver>MainWindowDesign</receiver>
-   <slot>close()</slot>
-   <hints>
-    <hint type="sourcelabel">
-     <x>859</x>
-     <y>552</y>
-    </hint>
-    <hint type="destinationlabel">
-     <x>469</x>
-     <y>299</y>
-    </hint>
-   </hints>
-  </connection>
- </connections>
-</ui>
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_opc/CHANGELOG.rst b/ROBOTIS-THORMANG-OPC-for-git/thormang3_opc/CHANGELOG.rst
deleted file mode 100644
index 27430f4..0000000
--- a/ROBOTIS-THORMANG-OPC-for-git/thormang3_opc/CHANGELOG.rst
+++ /dev/null
@@ -1,11 +0,0 @@
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-Changelog for package thormang3_opc
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-0.2.0 (2016-08-19)
------------
-* added thormang3_offset_tuner_client package
-
-0.1.0 (2016-08-18)
------------
-* first public release for Kinetic
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_opc/CMakeLists.txt b/ROBOTIS-THORMANG-OPC-for-git/thormang3_opc/CMakeLists.txt
deleted file mode 100644
index d523795..0000000
--- a/ROBOTIS-THORMANG-OPC-for-git/thormang3_opc/CMakeLists.txt
+++ /dev/null
@@ -1,4 +0,0 @@
-cmake_minimum_required(VERSION 2.8.3)
-project(thormang3_opc)
-find_package(catkin REQUIRED)
-catkin_metapackage()
diff --git a/ROBOTIS-THORMANG-OPC-for-git/thormang3_opc/package.xml b/ROBOTIS-THORMANG-OPC-for-git/thormang3_opc/package.xml
deleted file mode 100644
index a4724d0..0000000
--- a/ROBOTIS-THORMANG-OPC-for-git/thormang3_opc/package.xml
+++ /dev/null
@@ -1,19 +0,0 @@
-<?xml version="1.0"?>
-<package>
-  <name>thormang3_opc</name>
-  <version>0.2.0</version>
-  <description>ROS packages for the thormang3_opc (meta package)</description>
-  <license>BSD</license>
-  <author email="hjsong@robotis.com">Jay Song</author>
-  <author email="sch@robotis.com">SCH</author>
-  <author email="kmjung@robotis.com">Kayman</author>
-  <maintainer email="pyo@robotis.com">Pyo</maintainer>
-  <url type="bugtracker">https://github.com/ROBOTIS-GIT/ROBOTIS-THORMANG-OPC/issues</url>
-  <url type="repository">https://github.com/ROBOTIS-GIT/ROBOTIS-THORMANG-OPC</url>
-  <url type="website">http://wiki.ros.org/thormang3_opc</url>
-  <buildtool_depend>catkin</buildtool_depend>
-  <run_depend>thormang3_action_script_player</run_depend>
-  <run_depend>thormang3_foot_step_generator</run_depend>
-  <run_depend>thormang3_offset_tuner_client</run_depend>
-  <export><metapackage/></export>
-</package>
diff --git a/ROBOTIS-THORMANG-OPC/thormang3_foot_step_generator/src/robotis_foot_step_generator.cpp b/ROBOTIS-THORMANG-OPC/thormang3_foot_step_generator/src/robotis_foot_step_generator.cpp
index ae0f7a1..1907f1d 100644
--- a/ROBOTIS-THORMANG-OPC/thormang3_foot_step_generator/src/robotis_foot_step_generator.cpp
+++ b/ROBOTIS-THORMANG-OPC/thormang3_foot_step_generator/src/robotis_foot_step_generator.cpp
@@ -62,9 +62,9 @@ FootStepGenerator::FootStepGenerator()
 
   step_time_sec_ = 1.0;
   start_end_time_sec_ = 1.6;
-  dsp_ratio_ = 0.2;
+  dsp_ratio_ = 1.2;
 
-  foot_z_swap_m_ = 0.1;
+  foot_z_swap_m_ = 0.08;
   body_z_swap_m_ = 0.01;
 
   default_y_feet_offset_m_ = 0.186;
diff --git a/exo2/CMakeLists.txt b/exo2/CMakeLists.txt
deleted file mode 100644
index 6e2dba6..0000000
--- a/exo2/CMakeLists.txt
+++ /dev/null
@@ -1,14 +0,0 @@
-cmake_minimum_required(VERSION 2.8.3)
-
-project(exo2)
-
-find_package(catkin REQUIRED)
-
-catkin_package()
-
-find_package(roslaunch)
-
-foreach(dir config launch meshes urdf)
-	install(DIRECTORY ${dir}/
-		DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}/${dir})
-endforeach(dir)
diff --git a/exo2/config/joint_names_exo2.yaml b/exo2/config/joint_names_exo2.yaml
deleted file mode 100644
index 02f8b8a..0000000
--- a/exo2/config/joint_names_exo2.yaml
+++ /dev/null
@@ -1 +0,0 @@
-controller_joint_names: ['l_leg_hip_y', 'l_leg_hip_r', 'l_leg_hip_p', 'l_leg_kn_p', 'l_leg_an_p', 'l_leg_an_r', 'r_leg_hip_y', 'r_leg_hip_r', 'r_leg_hip_p', 'r_leg_kn_p', 'r_leg_an_p', 'r_leg_an_r', ]
diff --git a/exo2/launch/display.launch b/exo2/launch/display.launch
deleted file mode 100644
index 7494fa7..0000000
--- a/exo2/launch/display.launch
+++ /dev/null
@@ -1,26 +0,0 @@
-<launch>
-  <arg
-    name="model" />
-  <arg
-    name="gui"
-    default="False" />
-  <param
-    name="robot_description"
-    textfile="$(find exo2)/robots/exo2.urdf" />
-  <param
-    name="use_gui"
-    value="$(arg gui)" />
-  <node
-    name="joint_state_publisher"
-    pkg="joint_state_publisher"
-    type="joint_state_publisher" />
-  <node
-    name="robot_state_publisher"
-    pkg="robot_state_publisher"
-    type="state_publisher" />
-  <node
-    name="rviz"
-    pkg="rviz"
-    type="rviz"
-    args="-d $(find exo2)/urdf.rviz" />
-</launch>
\ No newline at end of file
diff --git a/exo2/launch/gazebo.launch b/exo2/launch/gazebo.launch
deleted file mode 100644
index 5f04433..0000000
--- a/exo2/launch/gazebo.launch
+++ /dev/null
@@ -1,20 +0,0 @@
-<launch>
-  <include
-    file="$(find gazebo_ros)/launch/empty_world.launch" />
-  <node
-    name="tf_footprint_base"
-    pkg="tf"
-    type="static_transform_publisher"
-    args="0 0 0 0 0 0 base_link base_footprint 40" />
-  <node
-    name="spawn_model"
-    pkg="gazebo_ros"
-    type="spawn_model"
-    args="-file $(find exo2)/robots/exo2.urdf -urdf -model exo2"
-    output="screen" />
-  <node
-    name="fake_joint_calibration"
-    pkg="rostopic"
-    type="rostopic"
-    args="pub /calibrated std_msgs/Bool true" />
-</launch>
\ No newline at end of file
diff --git a/exo2/meshes/l_leg_an_p_link.STL b/exo2/meshes/l_leg_an_p_link.STL
deleted file mode 100644
index b443fa5..0000000
Binary files a/exo2/meshes/l_leg_an_p_link.STL and /dev/null differ
diff --git a/exo2/meshes/l_leg_an_r_link.STL b/exo2/meshes/l_leg_an_r_link.STL
deleted file mode 100644
index abb58f4..0000000
Binary files a/exo2/meshes/l_leg_an_r_link.STL and /dev/null differ
diff --git a/exo2/meshes/l_leg_hip_p_link.STL b/exo2/meshes/l_leg_hip_p_link.STL
deleted file mode 100644
index 2960358..0000000
Binary files a/exo2/meshes/l_leg_hip_p_link.STL and /dev/null differ
diff --git a/exo2/meshes/l_leg_hip_r_link.STL b/exo2/meshes/l_leg_hip_r_link.STL
deleted file mode 100644
index e6cfe29..0000000
Binary files a/exo2/meshes/l_leg_hip_r_link.STL and /dev/null differ
diff --git a/exo2/meshes/l_leg_hip_y_link.STL b/exo2/meshes/l_leg_hip_y_link.STL
deleted file mode 100644
index 990c446..0000000
Binary files a/exo2/meshes/l_leg_hip_y_link.STL and /dev/null differ
diff --git a/exo2/meshes/l_leg_kn_p_link.STL b/exo2/meshes/l_leg_kn_p_link.STL
deleted file mode 100644
index 1532e33..0000000
Binary files a/exo2/meshes/l_leg_kn_p_link.STL and /dev/null differ
diff --git a/exo2/meshes/pelvis_link.STL b/exo2/meshes/pelvis_link.STL
deleted file mode 100644
index c29caa4..0000000
Binary files a/exo2/meshes/pelvis_link.STL and /dev/null differ
diff --git a/exo2/meshes/r_leg_an_p_link.STL b/exo2/meshes/r_leg_an_p_link.STL
deleted file mode 100644
index 7d75b1d..0000000
Binary files a/exo2/meshes/r_leg_an_p_link.STL and /dev/null differ
diff --git a/exo2/meshes/r_leg_an_r_link.STL b/exo2/meshes/r_leg_an_r_link.STL
deleted file mode 100644
index ea1468f..0000000
Binary files a/exo2/meshes/r_leg_an_r_link.STL and /dev/null differ
diff --git a/exo2/meshes/r_leg_hip_p_link.STL b/exo2/meshes/r_leg_hip_p_link.STL
deleted file mode 100644
index 373c4bf..0000000
Binary files a/exo2/meshes/r_leg_hip_p_link.STL and /dev/null differ
diff --git a/exo2/meshes/r_leg_hip_r_link.STL b/exo2/meshes/r_leg_hip_r_link.STL
deleted file mode 100644
index 041b7e2..0000000
Binary files a/exo2/meshes/r_leg_hip_r_link.STL and /dev/null differ
diff --git a/exo2/meshes/r_leg_hip_y_link.STL b/exo2/meshes/r_leg_hip_y_link.STL
deleted file mode 100644
index 17cedc5..0000000
Binary files a/exo2/meshes/r_leg_hip_y_link.STL and /dev/null differ
diff --git a/exo2/meshes/r_leg_kn_p_link.STL b/exo2/meshes/r_leg_kn_p_link.STL
deleted file mode 100644
index aab6907..0000000
Binary files a/exo2/meshes/r_leg_kn_p_link.STL and /dev/null differ
diff --git a/exo2/package.xml b/exo2/package.xml
deleted file mode 100644
index 45369fb..0000000
--- a/exo2/package.xml
+++ /dev/null
@@ -1,21 +0,0 @@
-<package>
-  <name>exo2</name>
-  <version>1.0.0</version>
-  <description>
-    <p>URDF Description package for exo2</p>
-    <p>This package contains configuration data, 3D models and launch files
-for exo2 robot</p>
-  </description>
-  <author>me</author>
-  <maintainer email="me@email.com" />
-  <license>BSD</license>
-  <buildtool_depend>catkin</buildtool_depend>
-  <build_depend>roslaunch</build_depend>
-  <run_depend>robot_state_publisher</run_depend>
-  <run_depend>rviz</run_depend>
-  <run_depend>joint_state_publisher</run_depend>
-  <run_depend>gazebo</run_depend>
-  <export>
-    <architecture_independent />
-  </export>
-</package>
\ No newline at end of file
diff --git a/exo2/urdf/exo2.urdf b/exo2/urdf/exo2.urdf
deleted file mode 100644
index 986c3f2..0000000
--- a/exo2/urdf/exo2.urdf
+++ /dev/null
@@ -1,717 +0,0 @@
-<robot
-  name="exo2">
-  <link
-    name="pelvis_link">
-    <inertial>
-      <origin
-        xyz="-0.0229570391634381 9.79841631494616E-06 -0.0791579286364338"
-        rpy="0 0 0" />
-      <mass
-        value="0.876180506785054" />
-      <inertia
-        ixx="0.0018274599707449"
-        ixy="2.77946712790357E-06"
-        ixz="-2.82148369387848E-05"
-        iyy="0.000542716087592878"
-        iyz="-1.88988098707461E-06"
-        izz="0.00181893616699862" />
-    </inertial>
-    <visual>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo2/meshes/pelvis_link.STL" />
-      </geometry>
-      <material
-        name="">
-        <color
-          rgba="0.792156862745098 0.819607843137255 0.933333333333333 1" />
-      </material>
-    </visual>
-    <collision>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo2/meshes/pelvis_link.STL" />
-      </geometry>
-    </collision>
-  </link>
-  <link
-    name="l_leg_hip_y_link">
-    <inertial>
-      <origin
-        xyz="0.000194867122171649 3.9899573725577E-05 0.00285846708477097"
-        rpy="0 0 0" />
-      <mass
-        value="0.0865282073086405" />
-      <inertia
-        ixx="1.13911348666239E-06"
-        ixy="-1.11411307071077E-10"
-        ixz="-2.37227170803843E-08"
-        iyy="6.28995782612359E-06"
-        iyz="-4.85729089952576E-09"
-        izz="5.15088996299801E-06" />
-    </inertial>
-    <visual>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo2/meshes/l_leg_hip_y_link.STL" />
-      </geometry>
-      <material
-        name="">
-        <color
-          rgba="0.792156862745098 0.819607843137255 0.933333333333333 1" />
-      </material>
-    </visual>
-    <collision>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo2/meshes/l_leg_hip_y_link.STL" />
-      </geometry>
-    </collision>
-  </link>
-  <joint
-    name="l_leg_hip_y"
-    type="revolute">
-    <origin
-      xyz="0.023 0.125 -0.0813"
-      rpy="0 0 0" />
-    <parent
-      link="pelvis_link" />
-    <child
-      link="l_leg_hip_y_link" />
-    <axis
-      xyz="0 0 1" />
-    <limit
-      effort="0"
-      velocity="0" />
-    <dynamics
-      damping="0.1" />
-  </joint>
-  <link
-    name="l_leg_hip_r_link">
-    <inertial>
-      <origin
-        xyz="-0.0228672098615241 0.026657202473467 -0.0578970138026583"
-        rpy="0 0 0" />
-      <mass
-        value="0.57732261179279" />
-      <inertia
-        ixx="0.0018145712595036"
-        ixy="-1.42788361438729E-05"
-        ixz="-0.000341806477751158"
-        iyy="0.00199151436868998"
-        iyz="-4.24239917577191E-06"
-        izz="0.000385603527413131" />
-    </inertial>
-    <visual>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo2/meshes/l_leg_hip_r_link.STL" />
-      </geometry>
-      <material
-        name="">
-        <color
-          rgba="0.792156862745098 0.819607843137255 0.933333333333333 1" />
-      </material>
-    </visual>
-    <collision>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo2/meshes/l_leg_hip_r_link.STL" />
-      </geometry>
-    </collision>
-  </link>
-  <joint
-    name="l_leg_hip_r"
-    type="revolute">
-    <origin
-      xyz="0 0 0"
-      rpy="0 0 0" />
-    <parent
-      link="l_leg_hip_y_link" />
-    <child
-      link="l_leg_hip_r_link" />
-    <axis
-      xyz="1 0 0" />
-    <limit
-      effort="0"
-      velocity="0" />
-  </joint>
-  <link
-    name="l_leg_hip_p_link">
-    <inertial>
-      <origin
-        xyz="0.03268 0.0184 -0.15583"
-        rpy="0 0 0" />
-      <mass
-        value="0.28668" />
-      <inertia
-        ixx="0.0010977"
-        ixy="-4.3367E-05"
-        ixz="0.00021162"
-        iyy="0.0010532"
-        iyz="0.0002017"
-        izz="0.00013617" />
-    </inertial>
-    <visual>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo2/meshes/l_leg_hip_p_link.STL" />
-      </geometry>
-      <material
-        name="">
-        <color
-          rgba="0.79216 0.81961 0.93333 1" />
-      </material>
-    </visual>
-    <collision>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo2/meshes/l_leg_hip_p_link.STL" />
-      </geometry>
-    </collision>
-  </link>
-  <joint
-    name="l_leg_hip_p"
-    type="revolute">
-    <origin
-      xyz="0.000765 -0.00018721 -0.14104"
-      rpy="0 0 0" />
-    <parent
-      link="l_leg_hip_r_link" />
-    <child
-      link="l_leg_hip_p_link" />
-    <axis
-      xyz="0 1 0" />
-    <limit
-      effort="0"
-      velocity="0" />
-  </joint>
-  <link
-    name="l_leg_kn_p_link">
-    <inertial>
-      <origin
-        xyz="-0.0371195392851587 -0.0290806755044972 -0.127161963516106"
-        rpy="0 0 0" />
-      <mass
-        value="0.501847197637487" />
-      <inertia
-        ixx="0.000743351806811496"
-        ixy="-5.28895214340804E-05"
-        ixz="-4.63291190421771E-05"
-        iyy="0.00096853459109235"
-        iyz="-0.000141414322901002"
-        izz="0.00058448391041593" />
-    </inertial>
-    <visual>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo2/meshes/l_leg_kn_p_link.STL" />
-      </geometry>
-      <material
-        name="">
-        <color
-          rgba="0.792156862745098 0.819607843137255 0.933333333333333 1" />
-      </material>
-    </visual>
-    <collision>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo2/meshes/l_leg_kn_p_link.STL" />
-      </geometry>
-    </collision>
-  </link>
-  <joint
-    name="l_leg_kn_p"
-    type="revolute">
-    <origin
-      xyz="0.050381 -0.00051236 -0.23986"
-      rpy="0 0 0" />
-    <parent
-      link="l_leg_hip_p_link" />
-    <child
-      link="l_leg_kn_p_link" />
-    <axis
-      xyz="0 1 0" />
-    <limit
-      effort="0"
-      velocity="0" />
-  </joint>
-  <link
-    name="l_leg_an_p_link">
-    <inertial>
-      <origin
-        xyz="0.029948 -0.00049014 -0.031986"
-        rpy="0 0 0" />
-      <mass
-        value="0.032575" />
-      <inertia
-        ixx="4.1828E-06"
-        ixy="4.3165E-08"
-        ixz="-1.5865E-12"
-        iyy="6.8195E-06"
-        iyz="2.5966E-14"
-        izz="2.6382E-06" />
-    </inertial>
-    <visual>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo2/meshes/l_leg_an_p_link.STL" />
-      </geometry>
-      <material
-        name="">
-        <color
-          rgba="0.79216 0.81961 0.93333 1" />
-      </material>
-    </visual>
-    <collision>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo2/meshes/l_leg_an_p_link.STL" />
-      </geometry>
-    </collision>
-  </link>
-  <joint
-    name="l_leg_an_p"
-    type="revolute">
-    <origin
-      xyz="-0.0035327 -0.00026509 -0.20997"
-      rpy="0 0 0" />
-    <parent
-      link="l_leg_kn_p_link" />
-    <child
-      link="l_leg_an_p_link" />
-    <axis
-      xyz="0 0 1" />
-    <limit
-      effort="0"
-      velocity="0" />
-  </joint>
-  <link
-    name="l_leg_an_r_link">
-    <inertial>
-      <origin
-        xyz="-0.036963 -0.04546 -0.032546"
-        rpy="0 0 0" />
-      <mass
-        value="0.20448" />
-      <inertia
-        ixx="2.9051E-05"
-        ixy="-6.5131E-06"
-        ixz="-2.3906E-06"
-        iyy="7.4234E-05"
-        iyz="-9.8229E-08"
-        izz="7.3588E-05" />
-    </inertial>
-    <visual>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo2/meshes/l_leg_an_r_link.STL" />
-      </geometry>
-      <material
-        name="">
-        <color
-          rgba="0.79216 0.81961 0.93333 1" />
-      </material>
-    </visual>
-    <collision>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo2/meshes/l_leg_an_r_link.STL" />
-      </geometry>
-    </collision>
-  </link>
-  <joint
-    name="l_leg_an_r"
-    type="revolute">
-    <origin
-      xyz="0 0 0"
-      rpy="0 0 0" />
-    <parent
-      link="l_leg_an_p_link" />
-    <child
-      link="l_leg_an_r_link" />
-    <axis
-      xyz="-1 0 0" />
-    <limit
-      effort="0"
-      velocity="0" />
-  </joint>
-  <link
-    name="r_leg_hip_y_link">
-    <inertial>
-      <origin
-        xyz="0.000194859023416288 -3.99011003911834E-05 0.0028585007264543"
-        rpy="0 0 0" />
-      <mass
-        value="0.0865285747250378" />
-      <inertia
-        ixx="1.13912095207425E-06"
-        ixy="1.11410861161273E-10"
-        ixz="-2.37218084077287E-08"
-        iyy="6.28996524419591E-06"
-        iyz="4.85749257153188E-09"
-        izz="5.15088991911781E-06" />
-    </inertial>
-    <visual>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo2/meshes/r_leg_hip_y_link.STL" />
-      </geometry>
-      <material
-        name="">
-        <color
-          rgba="0.792156862745098 0.819607843137255 0.933333333333333 1" />
-      </material>
-    </visual>
-    <collision>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo2/meshes/r_leg_hip_y_link.STL" />
-      </geometry>
-    </collision>
-  </link>
-  <joint
-    name="r_leg_hip_y"
-    type="revolute">
-    <origin
-      xyz="0.023 -0.125 -0.0813"
-      rpy="0 0 0" />
-    <parent
-      link="pelvis_link" />
-    <child
-      link="r_leg_hip_y_link" />
-    <axis
-      xyz="0 0 1" />
-    <limit
-      effort="0"
-      velocity="0" />
-  </joint>
-  <link
-    name="r_leg_hip_r_link">
-    <inertial>
-      <origin
-        xyz="-0.023877 -0.025876 -0.058251"
-        rpy="0 0 0" />
-      <mass
-        value="0.57733" />
-      <inertia
-        ixx="0.0018146"
-        ixy="1.867E-05"
-        ixz="-0.00034128"
-        iyy="0.0019908"
-        iyz="2.5832E-05"
-        izz="0.00038573" />
-    </inertial>
-    <visual>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo2/meshes/r_leg_hip_r_link.STL" />
-      </geometry>
-      <material
-        name="">
-        <color
-          rgba="0.79216 0.81961 0.93333 1" />
-      </material>
-    </visual>
-    <collision>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo2/meshes/r_leg_hip_r_link.STL" />
-      </geometry>
-    </collision>
-  </link>
-  <joint
-    name="r_leg_hip_r"
-    type="revolute">
-    <origin
-      xyz="0 0 0"
-      rpy="0 0 0" />
-    <parent
-      link="r_leg_hip_y_link" />
-    <child
-      link="r_leg_hip_r_link" />
-    <axis
-      xyz="1 0 0" />
-    <limit
-      effort="0"
-      velocity="0" />
-  </joint>
-  <link
-    name="r_leg_hip_p_link">
-    <inertial>
-      <origin
-        xyz="0.0119162167049423 -0.0160889612900433 -0.159019579168821"
-        rpy="0 0 0" />
-      <mass
-        value="0.286678786770336" />
-      <inertia
-        ixx="0.00113459314865265"
-        ixy="1.62949619200087E-05"
-        ixz="8.0589762179723E-05"
-        iyy="0.00105887331308655"
-        iyz="-0.000191213526187752"
-        izz="9.08598704249653E-05" />
-    </inertial>
-    <visual>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo2/meshes/r_leg_hip_p_link.STL" />
-      </geometry>
-      <material
-        name="">
-        <color
-          rgba="0.792156862745098 0.819607843137255 0.933333333333333 1" />
-      </material>
-    </visual>
-    <collision>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo2/meshes/r_leg_hip_p_link.STL" />
-      </geometry>
-    </collision>
-  </link>
-  <joint
-    name="r_leg_hip_p"
-    type="revolute">
-    <origin
-      xyz="-0.000235 0.0020842 -0.14103"
-      rpy="0 0 0" />
-    <parent
-      link="r_leg_hip_r_link" />
-    <child
-      link="r_leg_hip_p_link" />
-    <axis
-      xyz="0 1 0" />
-    <limit
-      effort="0"
-      velocity="0" />
-  </joint>
-  <link
-    name="r_leg_kn_p_link">
-    <inertial>
-      <origin
-        xyz="-0.0252867564411306 0.0309808685867933 -0.129705092898571"
-        rpy="0 0 0" />
-      <mass
-        value="0.501849157200272" />
-      <inertia
-        ixx="0.000749537517045051"
-        ixy="3.60981923292368E-05"
-        ixz="-3.22295673042344E-05"
-        iyy="0.000965520862241441"
-        iyz="0.000150693128088655"
-        izz="0.000581130320590493" />
-    </inertial>
-    <visual>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo2/meshes/r_leg_kn_p_link.STL" />
-      </geometry>
-      <material
-        name="">
-        <color
-          rgba="0.792156862745098 0.819607843137255 0.933333333333333 1" />
-      </material>
-    </visual>
-    <collision>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo2/meshes/r_leg_kn_p_link.STL" />
-      </geometry>
-    </collision>
-  </link>
-  <joint
-    name="r_leg_kn_p"
-    type="revolute">
-    <origin
-      xyz="0.017958 0.0039708 -0.2444"
-      rpy="0 0 0" />
-    <parent
-      link="r_leg_hip_p_link" />
-    <child
-      link="r_leg_kn_p_link" />
-    <axis
-      xyz="0 1 0" />
-    <limit
-      effort="0"
-      velocity="0" />
-  </joint>
-  <link
-    name="r_leg_an_p_link">
-    <inertial>
-      <origin
-        xyz="-0.029942 -0.00060381 0.00047371"
-        rpy="0 0 0" />
-      <mass
-        value="0.032575" />
-      <inertia
-        ixx="4.1822E-06"
-        ixy="3.0143E-08"
-        ixz="4.2942E-08"
-        iyy="2.6397E-06"
-        iyz="-6.0941E-08"
-        izz="6.8187E-06" />
-    </inertial>
-    <visual>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo2/meshes/r_leg_an_p_link.STL" />
-      </geometry>
-      <material
-        name="">
-        <color
-          rgba="0.79216 0.81961 0.93333 1" />
-      </material>
-    </visual>
-    <collision>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo2/meshes/r_leg_an_p_link.STL" />
-      </geometry>
-    </collision>
-  </link>
-  <joint
-    name="r_leg_an_p"
-    type="revolute">
-    <origin
-      xyz="0.015862 0.035899 -0.20884"
-      rpy="0 0 0" />
-    <parent
-      link="r_leg_kn_p_link" />
-    <child
-      link="r_leg_an_p_link" />
-    <axis
-      xyz="0 1 0" />
-    <limit
-      effort="0"
-      velocity="0" />
-  </joint>
-  <link
-    name="r_leg_an_r_link">
-    <inertial>
-      <origin
-        xyz="0.0358712048271737 0.000136366291676838 -0.0464921621721352"
-        rpy="0 0 0" />
-      <mass
-        value="0.199852749313157" />
-      <inertia
-        ixx="2.90585598164805E-05"
-        ixy="-2.59676895045742E-06"
-        ixz="8.99497426057764E-06"
-        iyy="6.35160118369035E-05"
-        iyz="3.33981797429722E-07"
-        izz="6.364590008288E-05" />
-    </inertial>
-    <visual>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo2/meshes/r_leg_an_r_link.STL" />
-      </geometry>
-      <material
-        name="">
-        <color
-          rgba="0.792156862745098 0.819607843137255 0.933333333333333 1" />
-      </material>
-    </visual>
-    <collision>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo2/meshes/r_leg_an_r_link.STL" />
-      </geometry>
-    </collision>
-  </link>
-  <joint
-    name="r_leg_an_r"
-    type="revolute">
-    <origin
-      xyz="0 0 0"
-      rpy="0 0 0" />
-    <parent
-      link="r_leg_an_p_link" />
-    <child
-      link="r_leg_an_r_link" />
-    <axis
-      xyz="1 0 0" />
-    <limit
-      effort="0"
-      velocity="0" />
-  </joint>
-</robot>
\ No newline at end of file
diff --git a/exo_n2/CMakeLists.txt b/exo_n2/CMakeLists.txt
deleted file mode 100644
index 495dcfd..0000000
--- a/exo_n2/CMakeLists.txt
+++ /dev/null
@@ -1,14 +0,0 @@
-cmake_minimum_required(VERSION 2.8.3)
-
-project(exo_n2)
-
-find_package(catkin REQUIRED)
-
-catkin_package()
-
-find_package(roslaunch)
-
-foreach(dir config launch meshes urdf)
-	install(DIRECTORY ${dir}/
-		DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}/${dir})
-endforeach(dir)
diff --git a/exo_n2/config/joint_names_all_exo_new_urdf_7_4.yaml b/exo_n2/config/joint_names_all_exo_new_urdf_7_4.yaml
deleted file mode 100644
index 02f8b8a..0000000
--- a/exo_n2/config/joint_names_all_exo_new_urdf_7_4.yaml
+++ /dev/null
@@ -1 +0,0 @@
-controller_joint_names: ['l_leg_hip_y', 'l_leg_hip_r', 'l_leg_hip_p', 'l_leg_kn_p', 'l_leg_an_p', 'l_leg_an_r', 'r_leg_hip_y', 'r_leg_hip_r', 'r_leg_hip_p', 'r_leg_kn_p', 'r_leg_an_p', 'r_leg_an_r', ]
diff --git a/exo_n2/launch/display.launch b/exo_n2/launch/display.launch
deleted file mode 100644
index 0f0a1cb..0000000
--- a/exo_n2/launch/display.launch
+++ /dev/null
@@ -1,26 +0,0 @@
-<launch>
-  <arg
-    name="model" />
-  <arg
-    name="gui"
-    default="False" />
-  <param
-    name="robot_description"
-    textfile="$(find exo_n2)/urdf/exo_n2.urdf" />
-  <param
-    name="use_gui"
-    value="$(arg gui)" />
-  <node
-    name="joint_state_publisher"
-    pkg="joint_state_publisher"
-    type="joint_state_publisher" />
-  <node
-    name="robot_state_publisher"
-    pkg="robot_state_publisher"
-    type="state_publisher" />
-  <node
-    name="rviz"
-    pkg="rviz"
-    type="rviz"
-    args="-d $(find exo_n2)/urdf.rviz" />
-</launch>
\ No newline at end of file
diff --git a/exo_n2/launch/gazebo.launch b/exo_n2/launch/gazebo.launch
deleted file mode 100644
index 8abdb12..0000000
--- a/exo_n2/launch/gazebo.launch
+++ /dev/null
@@ -1,20 +0,0 @@
-<launch>
-  <include
-    file="$(find gazebo_ros)/launch/empty_world.launch" />
-  <node
-    name="tf_footprint_base"
-    pkg="tf"
-    type="static_transform_publisher"
-    args="0 0 0 0 0 0 base_link base_footprint 40" />
-  <node
-    name="spawn_model"
-    pkg="gazebo_ros"
-    type="spawn_model"
-    args="-file $(find exo_n2)/urdf/exo_n2.urdf -urdf -model exo_n2"
-    output="screen" />
-  <node
-    name="fake_joint_calibration"
-    pkg="rostopic"
-    type="rostopic"
-    args="pub /calibrated std_msgs/Bool true" />
-</launch>
\ No newline at end of file
diff --git a/exo_n2/meshes/l_leg_an_p_link.STL b/exo_n2/meshes/l_leg_an_p_link.STL
deleted file mode 100644
index 183c13a..0000000
Binary files a/exo_n2/meshes/l_leg_an_p_link.STL and /dev/null differ
diff --git a/exo_n2/meshes/l_leg_an_r_link.STL b/exo_n2/meshes/l_leg_an_r_link.STL
deleted file mode 100644
index 422182c..0000000
Binary files a/exo_n2/meshes/l_leg_an_r_link.STL and /dev/null differ
diff --git a/exo_n2/meshes/l_leg_hip_p_link.STL b/exo_n2/meshes/l_leg_hip_p_link.STL
deleted file mode 100644
index 9651024..0000000
Binary files a/exo_n2/meshes/l_leg_hip_p_link.STL and /dev/null differ
diff --git a/exo_n2/meshes/l_leg_hip_r_link.STL b/exo_n2/meshes/l_leg_hip_r_link.STL
deleted file mode 100644
index 1ebc236..0000000
Binary files a/exo_n2/meshes/l_leg_hip_r_link.STL and /dev/null differ
diff --git a/exo_n2/meshes/l_leg_hip_y_link.STL b/exo_n2/meshes/l_leg_hip_y_link.STL
deleted file mode 100644
index d4fbdad..0000000
Binary files a/exo_n2/meshes/l_leg_hip_y_link.STL and /dev/null differ
diff --git a/exo_n2/meshes/l_leg_kn_p_link.STL b/exo_n2/meshes/l_leg_kn_p_link.STL
deleted file mode 100644
index 0de1a52..0000000
Binary files a/exo_n2/meshes/l_leg_kn_p_link.STL and /dev/null differ
diff --git a/exo_n2/meshes/pelvis_link.STL b/exo_n2/meshes/pelvis_link.STL
deleted file mode 100644
index 01bff16..0000000
Binary files a/exo_n2/meshes/pelvis_link.STL and /dev/null differ
diff --git a/exo_n2/meshes/r_leg_an_p_link.STL b/exo_n2/meshes/r_leg_an_p_link.STL
deleted file mode 100644
index 6623a30..0000000
Binary files a/exo_n2/meshes/r_leg_an_p_link.STL and /dev/null differ
diff --git a/exo_n2/meshes/r_leg_an_r_link.STL b/exo_n2/meshes/r_leg_an_r_link.STL
deleted file mode 100644
index b0b632f..0000000
Binary files a/exo_n2/meshes/r_leg_an_r_link.STL and /dev/null differ
diff --git a/exo_n2/meshes/r_leg_hip_p_link.STL b/exo_n2/meshes/r_leg_hip_p_link.STL
deleted file mode 100644
index 6cd6559..0000000
Binary files a/exo_n2/meshes/r_leg_hip_p_link.STL and /dev/null differ
diff --git a/exo_n2/meshes/r_leg_hip_r_link.STL b/exo_n2/meshes/r_leg_hip_r_link.STL
deleted file mode 100644
index bf98e7b..0000000
Binary files a/exo_n2/meshes/r_leg_hip_r_link.STL and /dev/null differ
diff --git a/exo_n2/meshes/r_leg_hip_y_link.STL b/exo_n2/meshes/r_leg_hip_y_link.STL
deleted file mode 100644
index 135fe9e..0000000
Binary files a/exo_n2/meshes/r_leg_hip_y_link.STL and /dev/null differ
diff --git a/exo_n2/meshes/r_leg_kn_p_link.STL b/exo_n2/meshes/r_leg_kn_p_link.STL
deleted file mode 100644
index 7556e28..0000000
Binary files a/exo_n2/meshes/r_leg_kn_p_link.STL and /dev/null differ
diff --git a/exo_n2/package.xml b/exo_n2/package.xml
deleted file mode 100644
index 6998f3d..0000000
--- a/exo_n2/package.xml
+++ /dev/null
@@ -1,21 +0,0 @@
-<package>
-  <name>exo_n2</name>
-  <version>1.0.0</version>
-  <description>
-    <p>URDF Description package for all_exo_new_urdf_7_4</p>
-    <p>This package contains configuration data, 3D models and launch files
-for all_exo_new_urdf_7_4 robot</p>
-  </description>
-  <author>me</author>
-  <maintainer email="me@email.com" />
-  <license>BSD</license>
-  <buildtool_depend>catkin</buildtool_depend>
-  <build_depend>roslaunch</build_depend>
-  <run_depend>robot_state_publisher</run_depend>
-  <run_depend>rviz</run_depend>
-  <run_depend>joint_state_publisher</run_depend>
-  <run_depend>gazebo</run_depend>
-  <export>
-    <architecture_independent />
-  </export>
-</package>
\ No newline at end of file
diff --git a/exo_n2/urdf/exo_n2.urdf b/exo_n2/urdf/exo_n2.urdf
deleted file mode 100644
index 2c68edf..0000000
--- a/exo_n2/urdf/exo_n2.urdf
+++ /dev/null
@@ -1,775 +0,0 @@
-<robot
-  name="exo_n2">
-  <link
-    name="pelvis_link">
-    <inertial>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <mass
-        value="0.87618" />
-      <inertia
-        ixx="0.00054272"
-        ixy="-2.7795E-06"
-        ixz="-1.8899E-06"
-        iyy="0.0018275"
-        iyz="2.8215E-05"
-        izz="0.0018189" />
-    </inertial>
-    <visual>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_n2/meshes/pelvis_link.STL" />
-      </geometry>
-      <material
-        name="">
-        <color
-          rgba="0.79216 0.81961 0.93333 1" />
-      </material>
-    </visual>
-    <collision>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_n2/meshes/pelvis_link.STL" />
-      </geometry>
-    </collision>
-  </link>
-  <link
-    name="l_leg_hip_y_link">
-    <inertial>
-      <origin
-        xyz="3.91489940153311E-05 0.064658467084771 0.000195019300466948"
-        rpy="0 0 0" />
-      <mass
-        value="0.0865282073086405" />
-      <inertia
-        ixx="6.28988232637541E-06"
-        ixy="-4.76591689072165E-09"
-        ixz="1.97203996620393E-08"
-        iyy="5.15088996299801E-06"
-        iyz="-2.37412429486974E-08"
-        izz="1.13918898641058E-06" />
-    </inertial>
-    <visual>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_n2/meshes/l_leg_hip_y_link.STL" />
-      </geometry>
-      <material
-        name="">
-        <color
-          rgba="0.792156862745098 0.819607843137255 0.933333333333333 1" />
-      </material>
-    </visual>
-    <collision>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_n2/meshes/l_leg_hip_y_link.STL" />
-      </geometry>
-    </collision>
-  </link>
-  <joint
-    name="l_leg_hip_y"
-    type="revolute">
-    <origin
-      xyz="0.22985 -0.24294 0.078481"
-      rpy="1.5708 0 0" />
-    <parent
-      link="pelvis_link" />
-    <child
-      link="l_leg_hip_y_link" />
-    <axis
-      xyz="0 1 0" />
-    <limit
-      lower="0"
-      upper="6.28"
-      effort="1000"
-      velocity="6.5" />
-    <dynamics
-      damping="0.1"
-      friction="0" />
-  </joint>
-  <link
-    name="l_leg_hip_r_link">
-    <inertial>
-      <origin
-        xyz="0.0267450489884957 -0.0578970138026583 -0.022764403905338"
-        rpy="0 0 0" />
-      <mass
-        value="0.57732261179279" />
-      <inertia
-        ixx="0.00199162169853065"
-        ixy="-2.92633289726119E-06"
-        ixz="-1.35971455170849E-05"
-        iyy="0.000385603527413131"
-        iyz="-0.000341820278449353"
-        izz="0.00181446392966293" />
-    </inertial>
-    <visual>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_n2/meshes/l_leg_hip_r_link.STL" />
-      </geometry>
-      <material
-        name="">
-        <color
-          rgba="0.792156862745098 0.819607843137255 0.933333333333333 1" />
-      </material>
-    </visual>
-    <collision>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_n2/meshes/l_leg_hip_r_link.STL" />
-      </geometry>
-    </collision>
-  </link>
-  <joint
-    name="l_leg_hip_r"
-    type="revolute">
-    <origin
-      xyz="0 0.0618 0"
-      rpy="0 0 0" />
-    <parent
-      link="l_leg_hip_y_link" />
-    <child
-      link="l_leg_hip_r_link" />
-    <axis
-      xyz="-0.0038502 0 0.99999" />
-    <limit
-      lower="0"
-      upper="6.28"
-      effort="1000"
-      velocity="6.5" />
-    <dynamics
-      damping="0.1"
-      friction="0" />
-  </joint>
-  <link
-    name="l_leg_hip_p_link">
-    <inertial>
-      <origin
-        xyz="0.000116188399237854 -0.159183576861761 0.018732669909887"
-        rpy="0 0 0" />
-      <mass
-        value="0.286678555449467" />
-      <inertia
-        ixx="0.00114218476024795"
-        ixy="4.17774250045668E-07"
-        ixz="6.6659846718969E-07"
-        iyy="9.2518603710799E-05"
-        iyz="0.000208313587693521"
-        izz="0.00105234705913894" />
-    </inertial>
-    <visual>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_n2/meshes/l_leg_hip_p_link.STL" />
-      </geometry>
-      <material
-        name="">
-        <color
-          rgba="0.792156862745098 0.819607843137255 0.933333333333333 1" />
-      </material>
-    </visual>
-    <collision>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_n2/meshes/l_leg_hip_p_link.STL" />
-      </geometry>
-    </collision>
-  </link>
-  <joint
-    name="l_leg_hip_p"
-    type="revolute">
-    <origin
-      xyz="-0.00019015 -0.14104 0.00076427"
-      rpy="-1.5521 1.3637 -1.5538" />
-    <parent
-      link="l_leg_hip_r_link" />
-    <child
-      link="l_leg_hip_p_link" />
-    <axis
-      xyz="0 0 1" />
-    <limit
-      lower="0"
-      upper="6.28"
-      effort="1000"
-      velocity="6.5" />
-    <dynamics
-      damping="0.1"
-      friction="0" />
-  </joint>
-  <link
-    name="l_leg_kn_p_link">
-    <inertial>
-      <origin
-        xyz="-0.029092 -0.12792 -0.034415"
-        rpy="0 0 0" />
-      <mass
-        value="0.50185" />
-      <inertia
-        ixx="0.00096851"
-        ixy="-0.00014254"
-        ixz="-4.989E-05"
-        iyy="0.00058261"
-        iyz="-4.2913E-05"
-        izz="0.00074525" />
-    </inertial>
-    <visual>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_n2/meshes/l_leg_kn_p_link.STL" />
-      </geometry>
-      <material
-        name="">
-        <color
-          rgba="0.79216 0.81961 0.93333 1" />
-      </material>
-    </visual>
-    <collision>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_n2/meshes/l_leg_kn_p_link.STL" />
-      </geometry>
-    </collision>
-  </link>
-  <joint
-    name="l_leg_kn_p"
-    type="revolute">
-    <origin
-      xyz="0 -0.2451 0"
-      rpy="-0.33198 -1.5667 0.56022" />
-    <parent
-      link="l_leg_hip_p_link" />
-    <child
-      link="l_leg_kn_p_link" />
-    <axis
-      xyz="0.99999 -0.0013273 0.0038502" />
-    <limit
-      lower="0"
-      upper="6.28"
-      effort="1000"
-      velocity="6.5" />
-    <dynamics
-      damping="0.1"
-      friction="0" />
-  </joint>
-  <link
-    name="l_leg_an_p_link">
-    <inertial>
-      <origin
-        xyz="0.029948 -0.00049014 -0.031986"
-        rpy="0 0 0" />
-      <mass
-        value="0.032575" />
-      <inertia
-        ixx="4.1828E-06"
-        ixy="4.3165E-08"
-        ixz="-1.5865E-12"
-        iyy="6.8195E-06"
-        iyz="2.5966E-14"
-        izz="2.6382E-06" />
-    </inertial>
-    <visual>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_n2/meshes/l_leg_an_p_link.STL" />
-      </geometry>
-      <material
-        name="">
-        <color
-          rgba="0.79216 0.81961 0.93333 1" />
-      </material>
-    </visual>
-    <collision>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_n2/meshes/l_leg_an_p_link.STL" />
-      </geometry>
-    </collision>
-  </link>
-  <joint
-    name="l_leg_an_p"
-    type="revolute">
-    <origin
-      xyz="-0.00028227 -0.20999 0.00091884"
-      rpy="-1.0239 1.5634 -1.0252" />
-    <parent
-      link="l_leg_kn_p_link" />
-    <child
-      link="l_leg_an_p_link" />
-    <axis
-      xyz="0 0 1" />
-    <limit
-      lower="0"
-      upper="6.28"
-      effort="1000"
-      velocity="6.5" />
-    <dynamics
-      damping="0.1"
-      friction="0" />
-  </joint>
-  <link
-    name="l_leg_an_r_link">
-    <inertial>
-      <origin
-        xyz="-0.036963 -0.045461 0.00047949"
-        rpy="0 0 0" />
-      <mass
-        value="0.20448" />
-      <inertia
-        ixx="2.905E-05"
-        ixy="-6.5652E-06"
-        ixz="-2.2266E-06"
-        iyy="7.423E-05"
-        iyz="-1.1026E-07"
-        izz="7.3595E-05" />
-    </inertial>
-    <visual>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_n2/meshes/l_leg_an_r_link.STL" />
-      </geometry>
-      <material
-        name="">
-        <color
-          rgba="0.79216 0.81961 0.93333 1" />
-      </material>
-    </visual>
-    <collision>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_n2/meshes/l_leg_an_r_link.STL" />
-      </geometry>
-    </collision>
-  </link>
-  <joint
-    name="l_leg_an_r"
-    type="revolute">
-    <origin
-      xyz="0 0 -0.031986"
-      rpy="0.022566 -0.00036929 -4.1669E-06" />
-    <parent
-      link="l_leg_an_p_link" />
-    <child
-      link="l_leg_an_r_link" />
-    <axis
-      xyz="-0.99987 0.016364 0" />
-    <limit
-      lower="0"
-      upper="6.28"
-      effort="1000"
-      velocity="6.5" />
-    <dynamics
-      damping="0.1"
-      friction="0" />
-  </joint>
-  <link
-    name="r_leg_hip_y_link">
-    <inertial>
-      <origin
-        xyz="-3.60098880210595E-05 0.0646585007264543 0.000195615502412011"
-        rpy="0 0 0" />
-      <mass
-        value="0.0865285747250378" />
-      <inertia
-        ixx="6.28792400897117E-06"
-        ixy="4.38378294955236E-09"
-        ixz="-1.02517952463626E-07"
-        iyy="5.15088991911781E-06"
-        iyz="-2.38139008830233E-08"
-        izz="1.14116218729898E-06" />
-    </inertial>
-    <visual>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_n2/meshes/r_leg_hip_y_link.STL" />
-      </geometry>
-      <material
-        name="">
-        <color
-          rgba="0.792156862745098 0.819607843137255 0.933333333333333 1" />
-      </material>
-    </visual>
-    <collision>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_n2/meshes/r_leg_hip_y_link.STL" />
-      </geometry>
-    </collision>
-  </link>
-  <joint
-    name="r_leg_hip_y"
-    type="revolute">
-    <origin
-      xyz="-0.020151 -0.24294 0.078481"
-      rpy="1.5708 0 0" />
-    <parent
-      link="pelvis_link" />
-    <child
-      link="r_leg_hip_y_link" />
-    <axis
-      xyz="0 1 0" />
-    <limit
-      lower="0"
-      upper="6.28"
-      effort="1000"
-      velocity="6.5" />
-    <dynamics
-      damping="0.1"
-      friction="0" />
-  </joint>
-  <link
-    name="r_leg_hip_r_link">
-    <inertial>
-      <origin
-        xyz="-0.0281204156627468 -0.0574298724097849 -0.0233214951273973"
-        rpy="0 0 0" />
-      <mass
-        value="0.577328048094972" />
-      <inertia
-        ixx="0.0019911506063478"
-        ixy="-3.02166901134013E-05"
-        ixz="4.67708719458105E-06"
-        iyy="0.000385657690986369"
-        iyz="-0.000341155469876317"
-        izz="0.00181430252622785" />
-    </inertial>
-    <visual>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_n2/meshes/r_leg_hip_r_link.STL" />
-      </geometry>
-      <material
-        name="">
-        <color
-          rgba="0.792156862745098 0.819607843137255 0.933333333333333 1" />
-      </material>
-    </visual>
-    <collision>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_n2/meshes/r_leg_hip_r_link.STL" />
-      </geometry>
-    </collision>
-  </link>
-  <joint
-    name="r_leg_hip_r"
-    type="revolute">
-    <origin
-      xyz="0 0.0618 0"
-      rpy="0.00061113 -1.5247E-19 0.030665" />
-    <parent
-      link="r_leg_hip_y_link" />
-    <child
-      link="r_leg_hip_r_link" />
-    <axis
-      xyz="0.019919 0 0.9998" />
-    <limit
-      lower="0"
-      upper="6.28"
-      effort="1000"
-      velocity="6.5" />
-    <dynamics
-      damping="0.1"
-      friction="0" />
-  </joint>
-  <link
-    name="r_leg_hip_p_link">
-    <inertial>
-      <origin
-        xyz="-0.000119618394748278 -0.159183675797561 0.0186713820055504"
-        rpy="0 0 0" />
-      <mass
-        value="0.286678786770336" />
-      <inertia
-        ixx="0.00114082283895834"
-        ixy="-4.92449747489993E-07"
-        ixz="-6.32813919597127E-07"
-        iyy="9.11577765871152E-05"
-        iyz="0.000207600861223223"
-        izz="0.00105234571661871" />
-    </inertial>
-    <visual>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_n2/meshes/r_leg_hip_p_link.STL" />
-      </geometry>
-      <material
-        name="">
-        <color
-          rgba="0.792156862745098 0.819607843137255 0.933333333333333 1" />
-      </material>
-    </visual>
-    <collision>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_n2/meshes/r_leg_hip_p_link.STL" />
-      </geometry>
-    </collision>
-  </link>
-  <joint
-    name="r_leg_hip_p"
-    type="revolute">
-    <origin
-      xyz="-0.0022456 -0.14102 -0.00019031"
-      rpy="-1.3075 -1.4942 1.2923" />
-    <parent
-      link="r_leg_hip_r_link" />
-    <child
-      link="r_leg_hip_p_link" />
-    <axis
-      xyz="0 0 -1" />
-    <limit
-      lower="0"
-      upper="6.28"
-      effort="1000"
-      velocity="6.5" />
-    <dynamics
-      damping="0.1"
-      friction="0" />
-  </joint>
-  <link
-    name="r_leg_kn_p_link">
-    <inertial>
-      <origin
-        xyz="0.026877 -0.12913 -0.032014"
-        rpy="0 0 0" />
-      <mass
-        value="0.50185" />
-      <inertia
-        ixx="0.00097462"
-        ixy="0.00013623"
-        ixz="4.2383E-05"
-        iyy="0.0005759"
-        iyz="-4.2272E-05"
-        izz="0.00074567" />
-    </inertial>
-    <visual>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_n2/meshes/r_leg_kn_p_link.STL" />
-      </geometry>
-      <material
-        name="">
-        <color
-          rgba="0.79216 0.81961 0.93333 1" />
-      </material>
-    </visual>
-    <collision>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_n2/meshes/r_leg_kn_p_link.STL" />
-      </geometry>
-    </collision>
-  </link>
-  <joint
-    name="r_leg_kn_p"
-    type="revolute">
-    <origin
-      xyz="0 -0.2451 0"
-      rpy="0.67324 1.5453 0.65202" />
-    <parent
-      link="r_leg_hip_p_link" />
-    <child
-      link="r_leg_kn_p_link" />
-    <axis
-      xyz="0.99968 -0.015892 -0.019926" />
-    <limit
-      lower="0"
-      upper="6.28"
-      effort="1000"
-      velocity="6.5" />
-    <dynamics
-      damping="0.1"
-      friction="0" />
-  </joint>
-  <link
-    name="r_leg_an_p_link">
-    <inertial>
-      <origin
-        xyz="0.0299500118317793 -0.0003527129613492 0.032486237708059"
-        rpy="0 0 0" />
-      <mass
-        value="0.0325752783592806" />
-      <inertia
-        ixx="4.18245398109744E-06"
-        ixy="3.1064678573424E-08"
-        ixz="-1.5602630172373E-12"
-        iyy="6.81988765602678E-06"
-        iyz="1.83746921930297E-14"
-        izz="2.63816535620326E-06" />
-    </inertial>
-    <visual>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_n2/meshes/r_leg_an_p_link.STL" />
-      </geometry>
-      <material
-        name="">
-        <color
-          rgba="0.792156862745098 0.819607843137255 0.933333333333333 1" />
-      </material>
-    </visual>
-    <collision>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_n2/meshes/r_leg_an_p_link.STL" />
-      </geometry>
-    </collision>
-  </link>
-  <joint
-    name="r_leg_an_p"
-    type="revolute">
-    <origin
-      xyz="-0.0032248 -0.2099 0.0056129"
-      rpy="1.8156 1.4885 1.7989" />
-    <parent
-      link="r_leg_kn_p_link" />
-    <child
-      link="r_leg_an_p_link" />
-    <axis
-      xyz="0 0 1" />
-    <limit
-      lower="0"
-      upper="6.28"
-      effort="1000"
-      velocity="6.5" />
-    <dynamics
-      damping="0.1"
-      friction="0" />
-  </joint>
-  <link
-    name="r_leg_an_r_link">
-    <inertial>
-      <origin
-        xyz="-0.0371352402831432 -0.0454478413493261 -0.00193667776316983"
-        rpy="0 0 0" />
-      <mass
-        value="0.199852749313156" />
-      <inertia
-        ixx="2.84966330505607E-05"
-        ixy="-8.0821623992085E-06"
-        ixz="1.6544987600387E-06"
-        iyy="6.41096702074288E-05"
-        iyz="1.12058650825974E-07"
-        izz="6.36141684782746E-05" />
-    </inertial>
-    <visual>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_n2/meshes/r_leg_an_r_link.STL" />
-      </geometry>
-      <material
-        name="">
-        <color
-          rgba="0.792156862745098 0.819607843137255 0.933333333333333 1" />
-      </material>
-    </visual>
-    <collision>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_n2/meshes/r_leg_an_r_link.STL" />
-      </geometry>
-    </collision>
-  </link>
-  <joint
-    name="r_leg_an_r"
-    type="revolute">
-    <origin
-      xyz="0 0 0.032486"
-      rpy="-0.014623 0.00017221 -1.2591E-06" />
-    <parent
-      link="r_leg_an_p_link" />
-    <child
-      link="r_leg_an_r_link" />
-    <axis
-      xyz="-0.99993 0.011776 0" />
-    <limit
-      lower="0"
-      upper="6.28"
-      effort="1000"
-      velocity="6.5" />
-    <dynamics
-      damping="0.1"
-      friction="0" />
-  </joint>
-</robot>
\ No newline at end of file
diff --git a/exo_ros_33/CMakeLists.txt b/exo_ros_33/CMakeLists.txt
deleted file mode 100644
index 40ec94f..0000000
--- a/exo_ros_33/CMakeLists.txt
+++ /dev/null
@@ -1,14 +0,0 @@
-cmake_minimum_required(VERSION 2.8.3)
-
-project(exo_ros_33)
-
-find_package(catkin REQUIRED)
-
-catkin_package()
-
-find_package(roslaunch)
-
-foreach(dir config launch meshes urdf)
-	install(DIRECTORY ${dir}/
-		DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}/${dir})
-endforeach(dir)
diff --git a/exo_ros_33/config/joint_names_exo_ros_33.yaml b/exo_ros_33/config/joint_names_exo_ros_33.yaml
deleted file mode 100644
index cbed3c9..0000000
--- a/exo_ros_33/config/joint_names_exo_ros_33.yaml
+++ /dev/null
@@ -1 +0,0 @@
-controller_joint_names: ['hip_left_y_j', 'hip_left_r_j', 'hip_left_p_j', 'kn_left_p_j', 'an_left_p', 'foot_left_r_j', 'hip_right_y_jt', 'hip_right_r_j', 'hip_right_p_j', 'kn_right_p_j', 'an_right_p_j', 'foot_right_r_j', ]
diff --git a/exo_ros_33/config/position_controller.yaml b/exo_ros_33/config/position_controller.yaml
deleted file mode 100644
index 61e2453..0000000
--- a/exo_ros_33/config/position_controller.yaml
+++ /dev/null
@@ -1,76 +0,0 @@
-exo_ros_33:
-  # Publish all joint states -----------------------------------
-  joint_state_controller:
-    type: joint_state_controller/JointStateController
-    publish_rate: 125  
-  
-  # Position Controllers ---------------------------------------
-  
-  # Body ------
-
-
-  # Left Leg -----
-
-  l_leg_hip_y_position:
-    type: effort_controllers/JointPositionController
-    joint: l_leg_hip_y
-    pid: {p: 8000.0, i: 0.1, d: 500.0}
-
-  l_leg_hip_r_position:
-    type: effort_controllers/JointPositionController
-    joint: l_leg_hip_r
-    pid: {p: 10000.0, i: 0.1, d: 500.0}
-
-  l_leg_hip_p_position:
-    type: effort_controllers/JointPositionController
-    joint: l_leg_hip_p
-    pid: {p: 8000.0, i: 0.1, d: 500.0}
-
-  l_leg_kn_p_position:
-    type: effort_controllers/JointPositionController
-    joint: l_leg_kn_p
-    pid: {p: 10000.0, i: 0.1, d: 500.0}
-
-  l_leg_an_p_position:
-    type: effort_controllers/JointPositionController
-    joint: l_leg_an_p
-    pid: {p: 8000.0, i: 0.1, d: 400.0}
-
-  l_leg_an_r_position:
-    type: effort_controllers/JointPositionController
-    joint: l_leg_an_r
-    pid: {p: 10000.0, i: 0.1, d: 400.0}
-
-  # Right Leg -----
-
-  r_leg_hip_y_position:
-    type: effort_controllers/JointPositionController
-    joint: r_leg_hip_y
-    pid: {p: 8000.0, i: 0.1, d: 500.0}
-
-  r_leg_hip_r_position:
-    type: effort_controllers/JointPositionController
-    joint: r_leg_hip_r
-    pid: {p: 10000.0, i: 0.1, d: 500.0}
-
-  r_leg_hip_p_position:
-    type: effort_controllers/JointPositionController
-    joint: r_leg_hip_p
-    pid: {p: 8000.0, i: 0.1, d: 500.0}
-
-  r_leg_kn_p_position:
-    type: effort_controllers/JointPositionController
-    joint: r_leg_kn_p
-    pid: {p: 10000.0, i: 0.1, d: 500.0}
-
-  r_leg_an_p_position:
-    type: effort_controllers/JointPositionController
-    joint:  r_leg_an_p
-    pid: {p: 8000.0, i: 0.1, d: 400.0}
-
-  r_leg_an_r_position:
-    type: effort_controllers/JointPositionController
-    joint: r_leg_an_r
-    pid: {p: 10000.0, i: 0.1, d: 400.0}
-
- 
diff --git a/exo_ros_33/launch/display.launch b/exo_ros_33/launch/display.launch
deleted file mode 100644
index 81294d0..0000000
--- a/exo_ros_33/launch/display.launch
+++ /dev/null
@@ -1,26 +0,0 @@
-<launch>
-  <arg
-    name="model" />
-  <arg
-    name="gui"
-    default="False" />
-  <param
-    name="robot_description"
-    textfile="$(find exo_ros_33)/robots/exo_ros_33.urdf" />
-  <param
-    name="use_gui"
-    value="$(arg gui)" />
-  <node
-    name="joint_state_publisher"
-    pkg="joint_state_publisher"
-    type="joint_state_publisher" />
-  <node
-    name="robot_state_publisher"
-    pkg="robot_state_publisher"
-    type="state_publisher" />
-  <node
-    name="rviz"
-    pkg="rviz"
-    type="rviz"
-    args="-d $(find exo_ros_33)/urdf.rviz" />
-</launch>
\ No newline at end of file
diff --git a/exo_ros_33/launch/gazebo.launch b/exo_ros_33/launch/gazebo.launch
deleted file mode 100644
index a6a1fe1..0000000
--- a/exo_ros_33/launch/gazebo.launch
+++ /dev/null
@@ -1,74 +0,0 @@
-<?xml version="1.0" ?>
-
-<!--launch>
-  <include
-    file="$(find gazebo_ros)/launch/empty_world.launch" />
-  <node
-    name="tf_footprint_base"
-    pkg="tf"
-    type="static_transform_publisher"
-    args="0 0 0 0 0 0 base_link base_footprint 40" />
-  <node
-    name="spawn_model"
-    pkg="gazebo_ros"
-    type="spawn_model"
-    args="-file $(find exo_ros_33)/robots/exo_ros_33.urdf -urdf -model exo_ros_33"
-    output="screen" />
-  <node
-    name="fake_joint_calibration"
-    pkg="rostopic"
-    type="rostopic"
-    args="pub /calibrated std_msgs/Bool true" />
-</launch-->
-
-<launch>
-<include file="$(find gazebo_ros)/launch/empty_world.launch">
-  </include>
-
-
-  <!-- Load the URDF into the ROS Parameter Server -->
-  <param name="robot_description"
-   command="$(find xacro)/xacro.py '$(find exo_ros_33)/robots/exo_ros_33.xacro'" />
-
-  <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
-  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
-  args="-urdf -model exo_ros_33 -z 0.9 -param robot_description"/>
-
-    <!--node
-    name="fake_joint_calibration"
-    pkg="rostopic"
-    type="rostopic"
-    args="pub /calibrated std_msgs/Bool true" /-->
-
-  <!--node
-    name="tf_footprint_base"
-    pkg="tf"
-    type="static_transform_publisher"
-    args="0 0 0 0 0 0 base_link base_footprint 40" /-->
-  <!-- ros_control robotis humanoid launch file -->
-  <!--group if ="$(arg position_controller)">
-    <include file="$(find thormang3_gazebo)/launch/position_controller.launch" />
-  </group-->
-
-  <rosparam file="$(find exo_ros_33)/config/position_controller.yaml" command="load"/>
-
-  <!-- load the controllers -->
-  <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
-  output="screen" ns="/exo_ros_33" args="joint_state_controller
-
-                 
-                 l_leg_hip_y_position
-                 l_leg_hip_r_position
-                 l_leg_hip_p_position
-                 l_leg_kn_p_position
-                 l_leg_an_p_position
-                 l_leg_an_r_position
-                 r_leg_hip_y_position
-                 r_leg_hip_r_position
-                 r_leg_hip_p_position
-                 r_leg_kn_p_position
-                 r_leg_an_p_position
-                 r_leg_an_r_position
-              " />
-
-  </launch>
\ No newline at end of file
diff --git a/exo_ros_33/meshes/an_left_p.STL b/exo_ros_33/meshes/an_left_p.STL
deleted file mode 100644
index 183c13a..0000000
Binary files a/exo_ros_33/meshes/an_left_p.STL and /dev/null differ
diff --git a/exo_ros_33/meshes/an_right_p.STL b/exo_ros_33/meshes/an_right_p.STL
deleted file mode 100644
index 6623a30..0000000
Binary files a/exo_ros_33/meshes/an_right_p.STL and /dev/null differ
diff --git a/exo_ros_33/meshes/foot_left_r.STL b/exo_ros_33/meshes/foot_left_r.STL
deleted file mode 100644
index 422182c..0000000
Binary files a/exo_ros_33/meshes/foot_left_r.STL and /dev/null differ
diff --git a/exo_ros_33/meshes/foot_right_r.STL b/exo_ros_33/meshes/foot_right_r.STL
deleted file mode 100644
index aca9441..0000000
Binary files a/exo_ros_33/meshes/foot_right_r.STL and /dev/null differ
diff --git a/exo_ros_33/meshes/hip_left_p.STL b/exo_ros_33/meshes/hip_left_p.STL
deleted file mode 100644
index 72c5128..0000000
Binary files a/exo_ros_33/meshes/hip_left_p.STL and /dev/null differ
diff --git a/exo_ros_33/meshes/hip_left_r.STL b/exo_ros_33/meshes/hip_left_r.STL
deleted file mode 100644
index 1ebc236..0000000
Binary files a/exo_ros_33/meshes/hip_left_r.STL and /dev/null differ
diff --git a/exo_ros_33/meshes/hip_left_y.STL b/exo_ros_33/meshes/hip_left_y.STL
deleted file mode 100644
index d4fbdad..0000000
Binary files a/exo_ros_33/meshes/hip_left_y.STL and /dev/null differ
diff --git a/exo_ros_33/meshes/hip_right_p.STL b/exo_ros_33/meshes/hip_right_p.STL
deleted file mode 100644
index 95b9130..0000000
Binary files a/exo_ros_33/meshes/hip_right_p.STL and /dev/null differ
diff --git a/exo_ros_33/meshes/hip_right_r.STL b/exo_ros_33/meshes/hip_right_r.STL
deleted file mode 100644
index bf98e7b..0000000
Binary files a/exo_ros_33/meshes/hip_right_r.STL and /dev/null differ
diff --git a/exo_ros_33/meshes/hip_right_y.STL b/exo_ros_33/meshes/hip_right_y.STL
deleted file mode 100644
index 135fe9e..0000000
Binary files a/exo_ros_33/meshes/hip_right_y.STL and /dev/null differ
diff --git a/exo_ros_33/meshes/kn_left_p.STL b/exo_ros_33/meshes/kn_left_p.STL
deleted file mode 100644
index 2ef134d..0000000
Binary files a/exo_ros_33/meshes/kn_left_p.STL and /dev/null differ
diff --git a/exo_ros_33/meshes/kn_right_p.STL b/exo_ros_33/meshes/kn_right_p.STL
deleted file mode 100644
index 329fa2a..0000000
Binary files a/exo_ros_33/meshes/kn_right_p.STL and /dev/null differ
diff --git a/exo_ros_33/meshes/pelviz.STL b/exo_ros_33/meshes/pelviz.STL
deleted file mode 100644
index 01bff16..0000000
Binary files a/exo_ros_33/meshes/pelviz.STL and /dev/null differ
diff --git a/exo_ros_33/package.xml b/exo_ros_33/package.xml
deleted file mode 100644
index 6a4368a..0000000
--- a/exo_ros_33/package.xml
+++ /dev/null
@@ -1,21 +0,0 @@
-<package>
-  <name>exo_ros_33</name>
-  <version>1.0.0</version>
-  <description>
-    <p>URDF Description package for exo_ros_33</p>
-    <p>This package contains configuration data, 3D models and launch files
-for exo_ros_33 robot</p>
-  </description>
-  <author>me</author>
-<maintainer email="pyo@robotis.com">Pyo</maintainer>
-  <license>BSD</license>
-  <buildtool_depend>catkin</buildtool_depend>
-  <build_depend>roslaunch</build_depend>
-  <run_depend>robot_state_publisher</run_depend>
-  <run_depend>rviz</run_depend>
-  <run_depend>joint_state_publisher</run_depend>
-  <run_depend>gazebo</run_depend>
-  <export>
-    <architecture_independent />
-  </export>
-</package>
\ No newline at end of file
diff --git a/exo_ros_33/robots/exo_ros_33.xacro b/exo_ros_33/robots/exo_ros_33.xacro
deleted file mode 100644
index 6c93ffb..0000000
--- a/exo_ros_33/robots/exo_ros_33.xacro
+++ /dev/null
@@ -1,694 +0,0 @@
-<?xml version="1.0"?>
-<robot
-  name="exo_ros_33" xmlns:xacro="http://ros.org/wiki/xacro">
-  <xacro:property name="pi" value="3.141592654" />
-  <link
-    name="pelviz">
-    <inertial>
-      <origin
-        xyz="0.104858925832825 0.142423098334833 0.196983763816381"
-        rpy="0 0 0" />
-      <mass
-        value="0.876180506785054" />
-      <inertia
-        ixx="0.000542716087592879"
-        ixy="-1.88988098707544E-06"
-        ixz="2.77946712790327E-06"
-        iyy="0.00181893616699862"
-        iyz="-2.82148369387847E-05"
-        izz="0.0018274599707449" />
-    </inertial>
-    <visual>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_ros_33/meshes/pelviz.STL" />
-      </geometry>
-      <material
-        name="">
-        <color
-          rgba="0.792156862745098 0.819607843137255 0.933333333333333 1" />
-      </material>
-    </visual>
-    <collision>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_ros_33/meshes/pelviz.STL" />
-      </geometry>
-    </collision>
-  </link>
-  <link
-    name="hip_left_y">
-    <inertial>
-      <origin
-        xyz="3.91489940153311E-05 0.064658467084771 0.00019501930046692"
-        rpy="0 0 0" />
-      <mass
-        value="0.0865282073086405" />
-      <inertia
-        ixx="6.2898823263754E-06"
-        ixy="-4.76591689072289E-09"
-        ixz="1.97203996620386E-08"
-        iyy="5.150889962998E-06"
-        iyz="-2.37412429486962E-08"
-        izz="1.13918898641058E-06" />
-    </inertial>
-    <visual>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_ros_33/meshes/hip_left_y.STL" />
-      </geometry>
-      <material
-        name="">
-        <color
-          rgba="0.792156862745098 0.819607843137255 0.933333333333333 1" />
-      </material>
-    </visual>
-    <collision>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_ros_33/meshes/hip_left_y.STL" />
-      </geometry>
-    </collision>
-  </link>
-  <joint
-    name="l_leg_hip_y"
-    type="revolute">
-    <origin
-      xyz="0.22985 -0.24294 0.078481"
-      rpy="1.5708 0 0" />
-    <parent
-      link="pelviz" />
-    <child
-      link="hip_left_y" />
-    <axis
-      xyz="0 1 0" />
-    <limit velocity="6.5" effort="1000" lower="${-pi*0.45}" upper="${pi*0.45}" />
-  </joint>
-  <link
-    name="hip_left_r">
-    <inertial>
-      <origin
-        xyz="0.0267450489884958 -0.0578970138026583 -0.022764403905338"
-        rpy="0 0 0" />
-      <mass
-        value="0.577322611792791" />
-      <inertia
-        ixx="0.00199162169853065"
-        ixy="-2.92633289726122E-06"
-        ixz="-1.3597145517085E-05"
-        iyy="0.000385603527413131"
-        iyz="-0.000341820278449354"
-        izz="0.00181446392966294" />
-    </inertial>
-    <visual>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_ros_33/meshes/hip_left_r.STL" />
-      </geometry>
-      <material
-        name="">
-        <color
-          rgba="0.792156862745098 0.819607843137255 0.933333333333333 1" />
-      </material>
-    </visual>
-    <collision>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_ros_33/meshes/hip_left_r.STL" />
-      </geometry>
-    </collision>
-  </link>
-  <joint
-    name="l_leg_hip_r"
-    type="revolute">
-    <origin
-      xyz="0 0.0618 0"
-      rpy="0 0 0" />
-    <parent
-      link="hip_left_y" />
-    <child
-      link="hip_left_r" />
-    <axis
-      xyz="-0.0038502 0 0.99999" />
-    <limit velocity="6.5" effort="1000" lower="${-pi*0.2}" upper="${pi*0.3}" />
-  </joint>
-  <link
-    name="hip_left_p">
-    <inertial>
-      <origin
-        xyz="0.000116188399237882 -0.159183576861761 0.018732669909887"
-        rpy="0 0 0" />
-      <mass
-        value="0.286678555449467" />
-      <inertia
-        ixx="0.00114218476024795"
-        ixy="4.17774250045193E-07"
-        ixz="6.66598467189894E-07"
-        iyy="9.25186037107998E-05"
-        iyz="0.000208313587693522"
-        izz="0.00105234705913894" />
-    </inertial>
-    <visual>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_ros_33/meshes/hip_left_p.STL" />
-      </geometry>
-      <material
-        name="">
-        <color
-          rgba="0.792156862745098 0.819607843137255 0.933333333333333 1" />
-      </material>
-    </visual>
-    <collision>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_ros_33/meshes/hip_left_p.STL" />
-      </geometry>
-    </collision>
-  </link>
-  <joint
-    name="l_leg_hip_p"
-    type="revolute">
-    <origin
-      xyz="-0.000190151250868298 -0.141040740535492 0.000764273538165411"
-      rpy="-1.5520679122256 1.36372537683641 -1.55379524725434" />
-    <axis xyz="0 1 0" />
-    <parent
-      link="hip_left_r" />
-    <child
-      link="hip_left_p" />
-    <axis
-      xyz="0 0 1" />
-    <limit velocity="6.5" effort="1000" lower="${-pi*0.4}" upper="${pi*0.4}" />
-  </joint>
-  <link
-    name="kn_left_p">
-    <inertial>
-      <origin
-        xyz="-0.0290920923453293 -0.127917844640058 -0.0344149100743372"
-        rpy="0 0 0" />
-      <mass
-        value="0.501847197637487" />
-      <inertia
-        ixx="0.000968508521631296"
-        ixy="-0.00014253644827161"
-        ixz="-4.98896343566965E-05"
-        iyy="0.000582614975689886"
-        iyz="-4.29126917684989E-05"
-        izz="0.000745246810998592" />
-    </inertial>
-    <visual>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_ros_33/meshes/kn_left_p.STL" />
-      </geometry>
-      <material
-        name="">
-        <color
-          rgba="0.792156862745098 0.819607843137255 0.933333333333333 1" />
-      </material>
-    </visual>
-    <collision>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_ros_33/meshes/kn_left_p.STL" />
-      </geometry>
-    </collision>
-  </link>
-  <joint
-    name="l_leg_kn_p"
-    type="revolute">
-    <origin
-      xyz="0 -0.2451 0"
-      rpy="-0.33198 -1.5667 0.56022" />
-    <parent
-      link="hip_left_p" />
-    <child
-      link="kn_left_p" />
-    <axis
-      xyz="0.99999 -0.0013273 0.0038502" />
-  <limit velocity="6.5" effort="1000" lower="${-pi*0.1}" upper="${pi*0.7}" />
-  </joint>
-  <link
-    name="an_left_p">
-    <inertial>
-      <origin
-        xyz="0.0299480772894787 -0.000490139450893934 -0.0319861956901267"
-        rpy="0 0 0" />
-      <mass
-        value="0.0325752781010226" />
-      <inertia
-        ixx="4.1827946008887E-06"
-        ixy="4.3165498514171E-08"
-        ixz="-1.58654211807752E-12"
-        iyy="6.81954692472972E-06"
-        iyz="2.59657199417668E-14"
-        izz="2.63816524469735E-06" />
-    </inertial>
-    <visual>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_ros_33/meshes/an_left_p.STL" />
-      </geometry>
-      <material
-        name="">
-        <color
-          rgba="0.792156862745098 0.819607843137255 0.933333333333333 1" />
-      </material>
-    </visual>
-    <collision>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_ros_33/meshes/an_left_p.STL" />
-      </geometry>
-    </collision>
-  </link>
-  <joint
-    name="l_leg_an_p"
-    type="revolute">
-    <origin
-      xyz="-0.00028227 -0.20999 0.00091884"
-      rpy="-1.0239 1.5634 -1.0252" />
-    <parent
-      link="kn_left_p" />
-    <child
-      link="an_left_p" />
-    <axis
-      xyz="0 0 1" />
-    <limit velocity="6.5" effort="1000" lower="${-pi*0.45}" upper="${pi*0.45}" />
-  </joint>
-  <link
-    name="foot_left_r">
-    <inertial>
-      <origin
-        xyz="-0.0369632419415512 -0.04546124148597 0.000479491277962624"
-        rpy="0 0 0" />
-      <mass
-        value="0.204475860340454" />
-      <inertia
-        ixx="2.90497073208471E-05"
-        ixy="-6.56522208553928E-06"
-        ixz="-2.22662489505551E-06"
-        iyy="7.42295471484823E-05"
-        iyz="-1.10264062070131E-07"
-        izz="7.35948390317777E-05" />
-    </inertial>
-    <visual>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_ros_33/meshes/foot_left_r.STL" />
-      </geometry>
-      <material
-        name="">
-        <color
-          rgba="0.792156862745098 0.819607843137255 0.933333333333333 1" />
-      </material>
-    </visual>
-    <collision>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_ros_33/meshes/foot_left_r.STL" />
-      </geometry>
-    </collision>
-  </link>
-  <joint
-    name="l_leg_an_r"
-    type="revolute">
-    <origin
-      xyz="0 0 -0.0319862168751982"
-      rpy="0.0225659260994187 -0.000369291604219776 -4.16688040508173E-06" />
-    <parent
-      link="an_left_p" />
-    <child
-      link="foot_left_r" />
-    <axis
-      xyz="-0.999866097381136 0.0163642081328786 0" />
-    <limit velocity="6.5" effort="1000" lower="${-pi*0.5}" upper="${pi*0.4}" />
-  </joint>
-  <link
-    name="hip_right_y">
-    <inertial>
-      <origin
-        xyz="-3.60098880210595E-05 0.0646585007264542 0.000195615502412039"
-        rpy="0 0 0" />
-      <mass
-        value="0.0865285747250378" />
-      <inertia
-        ixx="6.28792400897118E-06"
-        ixy="4.38378294955236E-09"
-        ixz="-1.02517952463626E-07"
-        iyy="5.15088991911782E-06"
-        iyz="-2.3813900883028E-08"
-        izz="1.14116218729898E-06" />
-    </inertial>
-    <visual>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_ros_33/meshes/hip_right_y.STL" />
-      </geometry>
-      <material
-        name="">
-        <color
-          rgba="0.792156862745098 0.819607843137255 0.933333333333333 1" />
-      </material>
-    </visual>
-    <collision>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_ros_33/meshes/hip_right_y.STL" />
-      </geometry>
-    </collision>
-  </link>
-  <joint
-    name="r_leg_hip_y"
-    type="revolute">
-    <origin
-      xyz="-0.0201508725834897 -0.242940802979819 0.078481026971267"
-      rpy="1.5707963267949 0 0" />
-    <parent
-      link="pelviz" />
-    <child
-      link="hip_right_y" />
-    <axis
-      xyz="0 1 0" />
-    <limit velocity="6.5" effort="1000" lower="${-pi*0.45}" upper="${pi*0.45}" />
-  </joint>
-  <link
-    name="hip_right_r">
-    <inertial>
-      <origin
-        xyz="-0.0281204156627468 -0.0574298724097848 -0.0233214951273971"
-        rpy="0 0 0" />
-      <mass
-        value="0.577328048094972" />
-      <inertia
-        ixx="0.0019911506063478"
-        ixy="-3.02166901134011E-05"
-        ixz="4.67708719458098E-06"
-        iyy="0.000385657690986371"
-        iyz="-0.000341155469876319"
-        izz="0.00181430252622785" />
-    </inertial>
-    <visual>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_ros_33/meshes/hip_right_r.STL" />
-      </geometry>
-      <material
-        name="">
-        <color
-          rgba="0.792156862745098 0.819607843137255 0.933333333333333 1" />
-      </material>
-    </visual>
-    <collision>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_ros_33/meshes/hip_right_r.STL" />
-      </geometry>
-    </collision>
-  </link>
-  <joint
-    name="r_leg_hip_r"
-    type="revolute">
-    <origin
-      xyz="0 0.0617999999999999 0"
-      rpy="0.000611129957313708 -1.52465930505774E-19 0.03066452600196" />
-    <parent
-      link="hip_right_y" />
-    <child
-      link="hip_right_r" />
-    <axis
-      xyz="0.0199193369534882 0 0.999801590324467" />
-    <limit velocity="6.5" effort="1000" lower="${-pi*0.3}" upper="${pi*0.2}" />
-  </joint>
-  <link
-    name="hip_right_p">
-    <inertial>
-      <origin
-        xyz="-0.000119618394748305 -0.159183675797561 0.0186713820055504"
-        rpy="0 0 0" />
-      <mass
-        value="0.286678786770336" />
-      <inertia
-        ixx="0.00114082283895834"
-        ixy="-4.92449747490006E-07"
-        ixz="-6.32813919597187E-07"
-        iyy="9.11577765871152E-05"
-        iyz="0.000207600861223223"
-        izz="0.00105234571661871" />
-    </inertial>
-    <visual>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_ros_33/meshes/hip_right_p.STL" />
-      </geometry>
-      <material
-        name="">
-        <color
-          rgba="0.792156862745098 0.819607843137255 0.933333333333333 1" />
-      </material>
-    </visual>
-    <collision>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_ros_33/meshes/hip_right_p.STL" />
-      </geometry>
-    </collision>
-  </link>
-  <joint
-    name="r_leg_hip_p"
-    type="revolute">
-    <origin
-      xyz="-0.00224563414996934 -0.141023053693907 -0.000190306199193579"
-      rpy="-1.30747180450226 -1.49420421154988 1.29231310022966" />
-    <parent
-      link="hip_right_r" />
-    <child
-      link="hip_right_p" />
-    <axis
-      xyz="0 0 -1" />
-    <limit velocity="6.5" effort="1000" lower="${-pi*0.4}" upper="${pi*0.4}" />
-  </joint>
-  <link
-    name="kn_right_p">
-    <inertial>
-      <origin
-        xyz="0.0268771429724586 -0.129133258163332 -0.0320135317528766"
-        rpy="0 0 0" />
-      <mass
-        value="0.501849157200272" />
-      <inertia
-        ixx="0.000974619665860643"
-        ixy="0.000136228288494725"
-        ixz="4.23829899706871E-05"
-        iyy="0.000575898524589217"
-        iyz="-4.22724491114263E-05"
-        izz="0.000745670509427132" />
-    </inertial>
-    <visual>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_ros_33/meshes/kn_right_p.STL" />
-      </geometry>
-      <material
-        name="">
-        <color
-          rgba="0.792156862745098 0.819607843137255 0.933333333333333 1" />
-      </material>
-    </visual>
-    <collision>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_ros_33/meshes/kn_right_p.STL" />
-      </geometry>
-    </collision>
-  </link>
-  <joint
-    name="r_leg_kn_p"
-    type="revolute">
-    <origin
-      xyz="0 -0.245095328703611 0"
-      rpy="0.673236241644809 1.54530624534361 0.652019335309999" />
-    <parent
-      link="hip_right_p" />
-    <child
-      link="kn_right_p" />
-    <axis
-      xyz="0.999675145463739 -0.0158918383837859 -0.0199261891699496" />
-    <limit velocity="6.5" effort="1000" lower="${-pi*0.7}" upper="${pi*0.1}" />
-  </joint>
-  <link
-    name="an_right_p">
-    <inertial>
-      <origin
-        xyz="0.02995 -0.00035271 0.032486"
-        rpy="0 0 0" />
-      <mass
-        value="0.032575" />
-      <inertia
-        ixx="4.1825E-06"
-        ixy="3.1065E-08"
-        ixz="-1.5603E-12"
-        iyy="6.8199E-06"
-        iyz="1.8375E-14"
-        izz="2.6382E-06" />
-    </inertial>
-    <visual>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_ros_33/meshes/an_right_p.STL" />
-      </geometry>
-      <material
-        name="">
-        <color
-          rgba="0.79216 0.81961 0.93333 1" />
-      </material>
-    </visual>
-    <collision>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_ros_33/meshes/an_right_p.STL" />
-      </geometry>
-    </collision>
-  </link>
-  <joint
-    name="r_leg_an_p"
-    type="revolute">
-    <origin
-      xyz="-0.0032248 -0.2099 0.0056129"
-      rpy="1.8156 1.4885 1.7989" />
-    <parent
-      link="kn_right_p" />
-    <child
-      link="an_right_p" />
-    <axis
-      xyz="0 0 1" />
-    <limit velocity="6.5" effort="1000" lower="${-pi*0.45}" upper="${pi*0.45}" />
-  </joint>
-  <link
-    name="foot_right_r">
-    <inertial>
-      <origin
-        xyz="-0.037135 -0.045448 -0.0019367"
-        rpy="0 0 0" />
-      <mass
-        value="0.19985" />
-      <inertia
-        ixx="2.8497E-05"
-        ixy="-8.0822E-06"
-        ixz="1.6545E-06"
-        iyy="6.411E-05"
-        iyz="1.1206E-07"
-        izz="6.3614E-05" />
-    </inertial>
-    <visual>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_ros_33/meshes/foot_right_r.STL" />
-      </geometry>
-      <material
-        name="">
-        <color
-          rgba="0.79216 0.81961 0.93333 1" />
-      </material>
-    </visual>
-    <collision>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_ros_33/meshes/foot_right_r.STL" />
-      </geometry>
-    </collision>
-  </link>
-  <joint
-    name="r_leg_an_r"
-    type="revolute">
-    <origin
-      xyz="0 0 0.032486"
-      rpy="-0.014623 0.00017221 -1.2591E-06" />
-    <parent
-      link="an_right_p" />
-    <child
-      link="foot_right_r" />
-    <axis
-      xyz="-0.99993 0.011776 0" />
-    <limit velocity="6.5" effort="1000" lower="${-pi*0.45}" upper="${pi*0.45}" />>
-  </joint>
-</robot>
\ No newline at end of file
diff --git a/exo_ros_33/urdf/exo_ros_33.urdf b/exo_ros_33/urdf/exo_ros_33.urdf
deleted file mode 100644
index 1a7979b..0000000
--- a/exo_ros_33/urdf/exo_ros_33.urdf
+++ /dev/null
@@ -1,697 +0,0 @@
-<robot
-  name="exo_ros_33">
-  <link
-    name="pelviz">
-    <inertial>
-      <origin
-        xyz="0.104858925832825 0.142423098334833 0.196983763816381"
-        rpy="0 0 0" />
-      <mass
-        value="0.876180506785054" />
-      <inertia
-        ixx="0.000542716087592879"
-        ixy="-1.88988098707544E-06"
-        ixz="2.77946712790327E-06"
-        iyy="0.00181893616699862"
-        iyz="-2.82148369387847E-05"
-        izz="0.0018274599707449" />
-    </inertial>
-    <visual>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_ros_33/meshes/pelviz.STL" />
-      </geometry>
-      <material
-        name="">
-        <color
-          rgba="0.792156862745098 0.819607843137255 0.933333333333333 1" />
-      </material>
-    </visual>
-    <collision>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_ros_33/meshes/pelviz.STL" />
-      </geometry>
-    </collision>
-  </link>
-  <link
-    name="hip_left_y">
-    <inertial>
-      <origin
-        xyz="3.91489940153311E-05 0.064658467084771 0.00019501930046692"
-        rpy="0 0 0" />
-      <mass
-        value="0.0865282073086405" />
-      <inertia
-        ixx="6.2898823263754E-06"
-        ixy="-4.76591689072289E-09"
-        ixz="1.97203996620386E-08"
-        iyy="5.150889962998E-06"
-        iyz="-2.37412429486962E-08"
-        izz="1.13918898641058E-06" />
-    </inertial>
-    <visual>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_ros_33/meshes/hip_left_y.STL" />
-      </geometry>
-      <material
-        name="">
-        <color
-          rgba="0.792156862745098 0.819607843137255 0.933333333333333 1" />
-      </material>
-    </visual>
-    <collision>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_ros_33/meshes/hip_left_y.STL" />
-      </geometry>
-    </collision>
-  </link>
-  <joint
-    name="hip_left_y_j"
-    type="revolute">
-    <origin
-      xyz="0.22985 -0.24294 0.078481"
-      rpy="1.5708 0 0" />
-    <parent
-      link="pelviz" />
-    <child
-      link="hip_left_y" />
-    <axis
-      xyz="0 1 0" />
-    <limit
-      effort="0"
-      velocity="0" />
-  </joint>
-  <link
-    name="hip_left_r">
-    <inertial>
-      <origin
-        xyz="0.0267450489884958 -0.0578970138026583 -0.022764403905338"
-        rpy="0 0 0" />
-      <mass
-        value="0.577322611792791" />
-      <inertia
-        ixx="0.00199162169853065"
-        ixy="-2.92633289726122E-06"
-        ixz="-1.3597145517085E-05"
-        iyy="0.000385603527413131"
-        iyz="-0.000341820278449354"
-        izz="0.00181446392966294" />
-    </inertial>
-    <visual>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_ros_33/meshes/hip_left_r.STL" />
-      </geometry>
-      <material
-        name="">
-        <color
-          rgba="0.792156862745098 0.819607843137255 0.933333333333333 1" />
-      </material>
-    </visual>
-    <collision>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_ros_33/meshes/hip_left_r.STL" />
-      </geometry>
-    </collision>
-  </link>
-  <joint
-    name="hip_left_r_j"
-    type="revolute">
-    <origin
-      xyz="0 0.0618 0"
-      rpy="0 0 0" />
-    <parent
-      link="hip_left_y" />
-    <child
-      link="hip_left_r" />
-    <axis
-      xyz="-0.0038502 0 0.99999" />
-    <limit
-      effort="0"
-      velocity="0" />
-  </joint>
-  <link
-    name="hip_left_p">
-    <inertial>
-      <origin
-        xyz="0.000116188399237882 -0.159183576861761 0.018732669909887"
-        rpy="0 0 0" />
-      <mass
-        value="0.286678555449467" />
-      <inertia
-        ixx="0.00114218476024795"
-        ixy="4.17774250045193E-07"
-        ixz="6.66598467189894E-07"
-        iyy="9.25186037107998E-05"
-        iyz="0.000208313587693522"
-        izz="0.00105234705913894" />
-    </inertial>
-    <visual>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_ros_33/meshes/hip_left_p.STL" />
-      </geometry>
-      <material
-        name="">
-        <color
-          rgba="0.792156862745098 0.819607843137255 0.933333333333333 1" />
-      </material>
-    </visual>
-    <collision>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_ros_33/meshes/hip_left_p.STL" />
-      </geometry>
-    </collision>
-  </link>
-  <joint
-    name="hip_left_p_j"
-    type="revolute">
-    <origin
-      xyz="-0.000190151250868298 -0.141040740535492 0.000764273538165411"
-      rpy="-1.5520679122256 1.36372537683641 -1.55379524725434" />
-    <parent
-      link="hip_left_r" />
-    <child
-      link="hip_left_p" />
-    <axis
-      xyz="0 0 1" />
-  </joint>
-  <link
-    name="kn_left_p">
-    <inertial>
-      <origin
-        xyz="-0.0290920923453293 -0.127917844640058 -0.0344149100743372"
-        rpy="0 0 0" />
-      <mass
-        value="0.501847197637487" />
-      <inertia
-        ixx="0.000968508521631296"
-        ixy="-0.00014253644827161"
-        ixz="-4.98896343566965E-05"
-        iyy="0.000582614975689886"
-        iyz="-4.29126917684989E-05"
-        izz="0.000745246810998592" />
-    </inertial>
-    <visual>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_ros_33/meshes/kn_left_p.STL" />
-      </geometry>
-      <material
-        name="">
-        <color
-          rgba="0.792156862745098 0.819607843137255 0.933333333333333 1" />
-      </material>
-    </visual>
-    <collision>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_ros_33/meshes/kn_left_p.STL" />
-      </geometry>
-    </collision>
-  </link>
-  <joint
-    name="kn_left_p_j"
-    type="revolute">
-    <origin
-      xyz="0 -0.2451 0"
-      rpy="-0.33198 -1.5667 0.56022" />
-    <parent
-      link="hip_left_p" />
-    <child
-      link="kn_left_p" />
-    <axis
-      xyz="0.99999 -0.0013273 0.0038502" />
-    <limit
-      effort="0"
-      velocity="0" />
-  </joint>
-  <link
-    name="an_left_p">
-    <inertial>
-      <origin
-        xyz="0.0299480772894787 -0.000490139450893934 -0.0319861956901267"
-        rpy="0 0 0" />
-      <mass
-        value="0.0325752781010226" />
-      <inertia
-        ixx="4.1827946008887E-06"
-        ixy="4.3165498514171E-08"
-        ixz="-1.58654211807752E-12"
-        iyy="6.81954692472972E-06"
-        iyz="2.59657199417668E-14"
-        izz="2.63816524469735E-06" />
-    </inertial>
-    <visual>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_ros_33/meshes/an_left_p.STL" />
-      </geometry>
-      <material
-        name="">
-        <color
-          rgba="0.792156862745098 0.819607843137255 0.933333333333333 1" />
-      </material>
-    </visual>
-    <collision>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_ros_33/meshes/an_left_p.STL" />
-      </geometry>
-    </collision>
-  </link>
-  <joint
-    name="an_left_p"
-    type="revolute">
-    <origin
-      xyz="-0.00028227 -0.20999 0.00091884"
-      rpy="-1.0239 1.5634 -1.0252" />
-    <parent
-      link="kn_left_p" />
-    <child
-      link="an_left_p" />
-    <axis
-      xyz="0 0 1" />
-    <limit
-      effort="0"
-      velocity="0" />
-  </joint>
-  <link
-    name="foot_left_r">
-    <inertial>
-      <origin
-        xyz="-0.0369632419415512 -0.04546124148597 0.000479491277962624"
-        rpy="0 0 0" />
-      <mass
-        value="0.204475860340454" />
-      <inertia
-        ixx="2.90497073208471E-05"
-        ixy="-6.56522208553928E-06"
-        ixz="-2.22662489505551E-06"
-        iyy="7.42295471484823E-05"
-        iyz="-1.10264062070131E-07"
-        izz="7.35948390317777E-05" />
-    </inertial>
-    <visual>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_ros_33/meshes/foot_left_r.STL" />
-      </geometry>
-      <material
-        name="">
-        <color
-          rgba="0.792156862745098 0.819607843137255 0.933333333333333 1" />
-      </material>
-    </visual>
-    <collision>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_ros_33/meshes/foot_left_r.STL" />
-      </geometry>
-    </collision>
-  </link>
-  <joint
-    name="foot_left_r_j"
-    type="revolute">
-    <origin
-      xyz="0 0 -0.0319862168751982"
-      rpy="0.0225659260994187 -0.000369291604219776 -4.16688040508173E-06" />
-    <parent
-      link="an_left_p" />
-    <child
-      link="foot_left_r" />
-    <axis
-      xyz="-0.999866097381136 0.0163642081328786 0" />
-  </joint>
-  <link
-    name="hip_right_y">
-    <inertial>
-      <origin
-        xyz="-3.60098880210595E-05 0.0646585007264542 0.000195615502412039"
-        rpy="0 0 0" />
-      <mass
-        value="0.0865285747250378" />
-      <inertia
-        ixx="6.28792400897118E-06"
-        ixy="4.38378294955236E-09"
-        ixz="-1.02517952463626E-07"
-        iyy="5.15088991911782E-06"
-        iyz="-2.3813900883028E-08"
-        izz="1.14116218729898E-06" />
-    </inertial>
-    <visual>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_ros_33/meshes/hip_right_y.STL" />
-      </geometry>
-      <material
-        name="">
-        <color
-          rgba="0.792156862745098 0.819607843137255 0.933333333333333 1" />
-      </material>
-    </visual>
-    <collision>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_ros_33/meshes/hip_right_y.STL" />
-      </geometry>
-    </collision>
-  </link>
-  <joint
-    name="hip_right_y_jt"
-    type="revolute">
-    <origin
-      xyz="-0.0201508725834897 -0.242940802979819 0.078481026971267"
-      rpy="1.5707963267949 0 0" />
-    <parent
-      link="pelviz" />
-    <child
-      link="hip_right_y" />
-    <axis
-      xyz="0 1 0" />
-  </joint>
-  <link
-    name="hip_right_r">
-    <inertial>
-      <origin
-        xyz="-0.0281204156627468 -0.0574298724097848 -0.0233214951273971"
-        rpy="0 0 0" />
-      <mass
-        value="0.577328048094972" />
-      <inertia
-        ixx="0.0019911506063478"
-        ixy="-3.02166901134011E-05"
-        ixz="4.67708719458098E-06"
-        iyy="0.000385657690986371"
-        iyz="-0.000341155469876319"
-        izz="0.00181430252622785" />
-    </inertial>
-    <visual>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_ros_33/meshes/hip_right_r.STL" />
-      </geometry>
-      <material
-        name="">
-        <color
-          rgba="0.792156862745098 0.819607843137255 0.933333333333333 1" />
-      </material>
-    </visual>
-    <collision>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_ros_33/meshes/hip_right_r.STL" />
-      </geometry>
-    </collision>
-  </link>
-  <joint
-    name="hip_right_r_j"
-    type="revolute">
-    <origin
-      xyz="0 0.0617999999999999 0"
-      rpy="0.000611129957313708 -1.52465930505774E-19 0.03066452600196" />
-    <parent
-      link="hip_right_y" />
-    <child
-      link="hip_right_r" />
-    <axis
-      xyz="0.0199193369534882 0 0.999801590324467" />
-  </joint>
-  <link
-    name="hip_right_p">
-    <inertial>
-      <origin
-        xyz="-0.000119618394748305 -0.159183675797561 0.0186713820055504"
-        rpy="0 0 0" />
-      <mass
-        value="0.286678786770336" />
-      <inertia
-        ixx="0.00114082283895834"
-        ixy="-4.92449747490006E-07"
-        ixz="-6.32813919597187E-07"
-        iyy="9.11577765871152E-05"
-        iyz="0.000207600861223223"
-        izz="0.00105234571661871" />
-    </inertial>
-    <visual>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_ros_33/meshes/hip_right_p.STL" />
-      </geometry>
-      <material
-        name="">
-        <color
-          rgba="0.792156862745098 0.819607843137255 0.933333333333333 1" />
-      </material>
-    </visual>
-    <collision>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_ros_33/meshes/hip_right_p.STL" />
-      </geometry>
-    </collision>
-  </link>
-  <joint
-    name="hip_right_p_j"
-    type="revolute">
-    <origin
-      xyz="-0.00224563414996934 -0.141023053693907 -0.000190306199193579"
-      rpy="-1.30747180450226 -1.49420421154988 1.29231310022966" />
-    <parent
-      link="hip_right_r" />
-    <child
-      link="hip_right_p" />
-    <axis
-      xyz="0 0 -1" />
-  </joint>
-  <link
-    name="kn_right_p">
-    <inertial>
-      <origin
-        xyz="0.0268771429724586 -0.129133258163332 -0.0320135317528766"
-        rpy="0 0 0" />
-      <mass
-        value="0.501849157200272" />
-      <inertia
-        ixx="0.000974619665860643"
-        ixy="0.000136228288494725"
-        ixz="4.23829899706871E-05"
-        iyy="0.000575898524589217"
-        iyz="-4.22724491114263E-05"
-        izz="0.000745670509427132" />
-    </inertial>
-    <visual>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_ros_33/meshes/kn_right_p.STL" />
-      </geometry>
-      <material
-        name="">
-        <color
-          rgba="0.792156862745098 0.819607843137255 0.933333333333333 1" />
-      </material>
-    </visual>
-    <collision>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_ros_33/meshes/kn_right_p.STL" />
-      </geometry>
-    </collision>
-  </link>
-  <joint
-    name="kn_right_p_j"
-    type="revolute">
-    <origin
-      xyz="0 -0.245095328703611 0"
-      rpy="0.673236241644809 1.54530624534361 0.652019335309999" />
-    <parent
-      link="hip_right_p" />
-    <child
-      link="kn_right_p" />
-    <axis
-      xyz="0.999675145463739 -0.0158918383837859 -0.0199261891699496" />
-  </joint>
-  <link
-    name="an_right_p">
-    <inertial>
-      <origin
-        xyz="0.02995 -0.00035271 0.032486"
-        rpy="0 0 0" />
-      <mass
-        value="0.032575" />
-      <inertia
-        ixx="4.1825E-06"
-        ixy="3.1065E-08"
-        ixz="-1.5603E-12"
-        iyy="6.8199E-06"
-        iyz="1.8375E-14"
-        izz="2.6382E-06" />
-    </inertial>
-    <visual>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_ros_33/meshes/an_right_p.STL" />
-      </geometry>
-      <material
-        name="">
-        <color
-          rgba="0.79216 0.81961 0.93333 1" />
-      </material>
-    </visual>
-    <collision>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_ros_33/meshes/an_right_p.STL" />
-      </geometry>
-    </collision>
-  </link>
-  <joint
-    name="an_right_p_j"
-    type="revolute">
-    <origin
-      xyz="-0.0032248 -0.2099 0.0056129"
-      rpy="1.8156 1.4885 1.7989" />
-    <parent
-      link="kn_right_p" />
-    <child
-      link="an_right_p" />
-    <axis
-      xyz="0 0 1" />
-    <limit
-      effort="0"
-      velocity="0" />
-  </joint>
-  <link
-    name="foot_right_r">
-    <inertial>
-      <origin
-        xyz="-0.037135 -0.045448 -0.0019367"
-        rpy="0 0 0" />
-      <mass
-        value="0.19985" />
-      <inertia
-        ixx="2.8497E-05"
-        ixy="-8.0822E-06"
-        ixz="1.6545E-06"
-        iyy="6.411E-05"
-        iyz="1.1206E-07"
-        izz="6.3614E-05" />
-    </inertial>
-    <visual>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_ros_33/meshes/foot_right_r.STL" />
-      </geometry>
-      <material
-        name="">
-        <color
-          rgba="0.79216 0.81961 0.93333 1" />
-      </material>
-    </visual>
-    <collision>
-      <origin
-        xyz="0 0 0"
-        rpy="0 0 0" />
-      <geometry>
-        <mesh
-          filename="package://exo_ros_33/meshes/foot_right_r.STL" />
-      </geometry>
-    </collision>
-  </link>
-  <joint
-    name="foot_right_r_j"
-    type="revolute">
-    <origin
-      xyz="0 0 0.032486"
-      rpy="-0.014623 0.00017221 -1.2591E-06" />
-    <parent
-      link="an_right_p" />
-    <child
-      link="foot_right_r" />
-    <axis
-      xyz="-0.99993 0.011776 0" />
-    <limit
-      effort="0"
-      velocity="0" />
-  </joint>
-</robot>
\ No newline at end of file
diff --git a/humanoid_navigation-for-git/README.md b/humanoid_navigation-for-git/README.md
deleted file mode 100644
index 770f1c7..0000000
--- a/humanoid_navigation-for-git/README.md
+++ /dev/null
@@ -1,4 +0,0 @@
-humanoid_navigation
-===================
-
-ROS stack with footstep planning and localization for humanoid robots: http://wiki.ros.org/humanoid_navigation
diff --git a/humanoid_navigation-for-git/footstep_planner/CHANGELOG.rst b/humanoid_navigation-for-git/footstep_planner/CHANGELOG.rst
deleted file mode 100644
index 1103b0f..0000000
--- a/humanoid_navigation-for-git/footstep_planner/CHANGELOG.rst
+++ /dev/null
@@ -1,164 +0,0 @@
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-Changelog for package footstep_planner
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-0.4.1 (2016-09-05)
-------------------
-* Added include files for footstep_planner and gridmap_2d for install.
-* uses double 2.0 and makes style locally consistent
-* catkinize the stack
-* Add service to (re)plan between feet as start and goal.
-* Requires newest humanoid_msgs.
-* Merge plan and replan functions
-* RViz launch file / config Groovy
-* mark heuristic as expired when map is updated
-* removed code in the destructor that gets already cleaned up in the super class
-* use pre-increment instead of post-increment (faster + post-increment for iterators not always optimizable)
-* fixed sbpl exception catch
-* introduced new functionality to totally reset the planning environment
-* storing environment params in new struct -- get rid of unnecessary member variables
-* more detailed information when sbpl planning was successful but only the old path is returned
-* wait 0.5 sec before updating the start (robot) pose
-* bug fix in path cost heuristic
-* make footsteps smaller; +  std::max
-* handle receiving of foot transformations differently
-* implemented the polygon-intersection-check for the navigation as well; not used so far due to some usability issues
-* bug resolved: free the execution log when planning failed; use ros::Time(0) instead of ros::Time::now() since when using the latter sometimes the tf cannot be received (now sometimes an outdated step is received but this works better anyhow)
-* bug resulting in segfaulting thread now (probably) resolved
-* replaced old reachable check by a new more smoother grid based approach
-* small fix in the replanning logic
-* enforce planning from scratch when necessary (e.g. goal changed when using backward planning)
-* added assertion to enforce correct heuristic calculation
-* applied ROS code style
-* reorganized the way FootstepNavigation invokes the planner and starts the execution; changed FootstepPlanner::updateMap
-
-* Contributors: Armin Hornung, Johannes Garimort, Pramuditha Aravinda, Vincent Rabaud, enriquefernandez
-
-0.4.0 (2013-01-10)
-------------------
-* Updated stack.xml & CMakeLists, new version 0.4.0 to release
-* adjusted robot translation in z dir
-* footstep execution now aborted when map changes + replanning and new execution is started; again use ALL calculated steps when extracting the path
-* Changes in R* launch file params
-* using only the new launch file from pkg nao_driver
-* Fixed odometry lookup error (wrong frame)
-* Indenting / code style according to ROS style
-* fixed SBPL in CMakeListe for custom-installed location
-* fixed out of map check in R*
-* cleanup of R* code
-* manifest/CMakeLists now compatible with fuerte and electric compilation, includes should work better now
-* integrated the new footstep set
-* fix: spelling error (don't forget to update nao_driver and humanoid_nav_msgs)
-* navigation parameters in extra config file; using new launch file in nao_driver
-* handle situations where both start feet are part of the calculated solution
-* method rearrangement in the navigation
-* got rid of get_footstep in helper
-* added test to check whether all footsteps can be performed by the NAO robot; adjusted invalid footstep
-* now able to switch between protective and fast footstep execution via the 'protective_execution' param + various smaller changes
-* Finished fluid footstep execution for the NAO; has still to be tested for simulation/real robot
-* added footstep_planner_walls to read in separate wall map (larger clearing)
-* expanded states is now a hash map on x,y => vis.better in RVIZ, only one expanded state per (x,y)
-* heuristic_scale parameter to increase under-estimating heuristics
-* GetSuccsTo for improved R* functionality
-* nao_path_follower now accepts paths
-* Fixed PathCostHeuristic for non-square maps
-* reaching right goal foot faster, only left goal state absorbs now.
-* also show expanded states when failing; R* optimized (exact ==)
-* PathCostHeuristic is now inflated by foot incircle
-
-* Contributors: Armin Hornung, Daniel Maier, Johannes Garimort
-
-0.3.1 (2012-06-15)
-------------------
-* preparing for fuerte release and sbpl package
-* replanning based on old planning info in cases of a changed map disabled for now (instead: complete new planning in such a case)
-* approx. comparison for R*
-* footstep-feedback synchronization now handled in the action client (in FootstepNavigation.cpp)
-* cost calculation directly based on the discrete planning states
-* during the planning the reachability check is now based on the discrete position and orientation of the state (planning speed up)
-* temp. simplification of the path cost heuristic calculation
-* temp simplification of heuristic calculation
-* code cleanup
-* updated RViz config, launch file for R*
-* slightly expanded large footstep set
-
-* Contributors: Armin Hornung, Johannes Garimort
-
-0.3.0 (2012-05-29)
-------------------
-* changed default planning params: 1cm res, PathCostHeuristic
-* synchronized with footstep action server
-* PathCostHeuristic fixed
-* added fake localization launch file
-* documentation update
-* got rid of FootstepPlannerEnvironment::setUp - this is now done in the resp. updateGoal/updateStart-method (this makes it possible to reduce FootstepPlanner::run to its actual functionality)
-* Removed ANAPlanner (testing, requires newer SBPL)
-* Functions (stubs) added for R*
-* changed names of the robot feet (according to ROS standards); integrate actionlib to perform footsteps
-* corrected foot box for the nao robot
-* corrected footsteps (w.r.t the new step model and the old footstep sets)
-* footstep navigation debug and footstep execution debug update
-* some bugs affecting footstep execution fixed
-* footstep execution now completely discrete
-* new function for lengths (to distinct between grid cell discretization and length discretization; footstep calculation fully based on discrete footsteps (can be further optimized by calculating reverse footstep on the fly)
-* update of start pose in own function: used before planning and replanning
-* bugfix: set gready footstep
-* map callback subscription
-* add missing goal pose callback subscription
-* footstep robot navigation integration finished
-* replaced double-ptr returns with references in get_footstep() / getFootstep()
-* Added execution functions from old footstep planner code to FootstepNavigation
-* FootstepNavigation stub added
-
-* Contributors: Armin Hornung, Johannes Garimort
-
-0.2.0 (2011-11-28)
-------------------
-* automatic replanning after map change
-* reset planner when to many states changed after map change
-* 2nd changed sample map added
-* inserted stubs for R* env. functions.
-* using old information in replanning after map change
-* fixed invalid states appearing on border of map during expansion
-* fixed corner cases for angles heuristic
-* added foundation for map change detection
-* get rid of last continuous planning state variable
-* orientation cost
-* fix on path cost heuristic and the recalculation w.r.t correct search direction
-* path cost heuristic implementation finished
-* footstep_planner now uses SBPL instead of D* lite, enabling ARA* and AD* for search with anytime capabilities
-* Moved the PlanFootsteps service into humanoid_nav_msgs
-
-* Contributors: Armin Hornung, Johannes Garimort
-
-0.1.0 (2011-05-03)
-------------------
-* more maps added, adjusted launch files
-* Added call to clear previous visualization
-* Display of planning time in Dstar
-* added Python node to plan from the command line
-* added "PlanFootstep" service to FootstepPlanner
-* added override for default marker namespace
-* method to initiate heuristic values update from outside
-* documentation
-* private namespace for vis msgs
-* A* heuristic implemented and integrated
-
-* enhancements:
-
-  * cleanup of param files
-  * State, Footstep, Dstar classes separated
-  * Got rid of rounding => huge speedup in planner
-  * Better results with subgoal_distance=0.2
-  * added Heuristic path visualization
-  * helper functions inlined
-  * replaced constants with step constants
-  * access to Dstar path properties in FootstepPlanner
-  * getPathCosts, getNumExpandedStates, getNumFootsteps added to receive planning information
-
-* fixes:
-
-  * fixed heuristic update after goal update in Dstar
-  * fixed foot width for Astar heuristic
-
-* Contributors: Armin Hornung, Johannes Garimort
diff --git a/humanoid_navigation-for-git/footstep_planner/CMakeLists.txt b/humanoid_navigation-for-git/footstep_planner/CMakeLists.txt
deleted file mode 100644
index 54bda27..0000000
--- a/humanoid_navigation-for-git/footstep_planner/CMakeLists.txt
+++ /dev/null
@@ -1,58 +0,0 @@
-cmake_minimum_required(VERSION 2.8.3)
-project(footstep_planner)
-
-find_package(catkin REQUIRED COMPONENTS actionlib angles gridmap_2d humanoid_nav_msgs map_server roscpp rospy tf visualization_msgs)
-
-find_package(OpenCV REQUIRED)
-
-#find_package(sbpl REQUIRED)
-find_package(PkgConfig REQUIRED)
-pkg_check_modules(SBPL REQUIRED sbpl)
-include_directories(${SBPL_INCLUDE_DIRS})
-link_directories(${SBPL_LIBRARY_DIRS})
-
-catkin_package(
-  INCLUDE_DIRS include
-  LIBRARIES ${PROJECT_NAME}
-)
-
-set(FOOTSTEP_PLANNER_FILES src/FootstepPlanner.cpp
-	src/FootstepNavigation.cpp
-    src/FootstepPlannerNode.cpp
-    src/FootstepPlannerEnvironment.cpp 
-    src/Footstep.cpp
-    src/PlanningState.cpp
-    src/Heuristic.cpp 
-    src/helper.cpp
-    src/PathCostHeuristic.cpp
-    src/PlanningStateChangeQuery.cpp
-    src/State.cpp
-)
-
-include_directories(include)
-include_directories(${catkin_INCLUDE_DIRS})
-
-
-add_library(${PROJECT_NAME} ${FOOTSTEP_PLANNER_FILES})
-target_link_libraries(${PROJECT_NAME} ${SBPL_LIBRARIES} ${catkin_LIBRARIES})
-
-add_executable(footstep_planner_node src/footstep_planner.cpp)
-target_link_libraries(footstep_planner_node ${PROJECT_NAME} ${SBPL_LIBRARIES})
-
-add_executable(footstep_planner_walls src/footstep_planner_walls.cpp)
-target_link_libraries(footstep_planner_walls ${PROJECT_NAME} ${SBPL_LIBRARIES} ${OpenCV_LIBS})
-
-add_executable(footstep_navigation_node src/footstep_navigation.cpp)
-target_link_libraries(footstep_navigation_node ${PROJECT_NAME} ${SBPL_LIBRARIES})
-
-# install
-install(TARGETS ${PROJECT_NAME} footstep_planner_node footstep_planner_walls 
-        DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
-)
-install(TARGETS footstep_navigation_node
-        DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
-)
-install(DIRECTORY include/${PROJECT_NAME}/
-  DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
-  FILES_MATCHING PATTERN "*.h"
-)
diff --git a/humanoid_navigation-for-git/footstep_planner/config/footsteps_asimo.yaml b/humanoid_navigation-for-git/footstep_planner/config/footsteps_asimo.yaml
deleted file mode 100644
index 874c3cd..0000000
--- a/humanoid_navigation-for-git/footstep_planner/config/footsteps_asimo.yaml
+++ /dev/null
@@ -1,29 +0,0 @@
-### Footstep parameterization for a large humanoid, similar to ASIMO or HRP-2 #
-
-### footstep settings #########################################################
-# Footstep displacement vectors (in meter / rad)
-# WARNING: data type has to be float/double, integers will cause an exception
-footsteps:
-  x:     [0.00, 0.22, 0.00,-0.08, 0.12, 0.15, 0.08,-0.04,-0.10, 0.00, 0.15, 0.12, 0.12, 0.06]
-  y:     [0.14, 0.14, 0.26, 0.12, 0.22, 0.11, 0.22, 0.22, 0.14, 0.12, 0.14, 0.12, 0.18, 0.14]
-  theta: [0.00, 0.00, 0.00, 0.70, 0.30,-0.40, 0.00, 0.30, 0.00, 0.00, 0.00, 0.00, 0.00,-0.25]
-
-
-### foot settings #############################################################
-foot:
-  size: {x: 0.16, y: 0.10, z: 0.015}
-  separation: 0.14
-  origin_shift: {x: 0.02, y: 0.0}
-  max:
-    step: {x: 0.22, y: 0.28, theta: 0.7}
-    inverse:
-      step: {x: -0.1, y: 0.12, theta: -0.4}
-
-
-### step range ################################################################
-
-# more accurate than the bounding box defined by the max/max inverse step
-step_range:
-  x: [0.22, 0.22,-0.10,-0.10]
-  y: [0.28, 0.12, 0.12, 0.28]
-
diff --git a/humanoid_navigation-for-git/footstep_planner/config/footsteps_nao.yaml b/humanoid_navigation-for-git/footstep_planner/config/footsteps_nao.yaml
deleted file mode 100644
index 09d7cbc..0000000
--- a/humanoid_navigation-for-git/footstep_planner/config/footsteps_nao.yaml
+++ /dev/null
@@ -1,28 +0,0 @@
-### Footstep parameterization for the Aldebaran Robotics Nao humanoid #########
-
-### footstep settings #########################################################
-# Footstep displacement vectors (in meter / rad)
-# WARNING: data type has to be float since integers will cause an exception
-footsteps:
-  x:     [0.00, 0.08,-0.04, 0.00, 0.05, 0.01, 0.015, 0.04,-0.03, 0.06, 0.04,-0.02]
-  y:     [0.16, 0.09, 0.09, 0.12, 0.14, 0.13, 0.100, 0.12, 0.12, 0.12, 0.10, 0.12]
-  theta: [0.00, 0.00, 0.00, 0.00, 0.00,-0.50, 0.500, 0.30, 0.50, 0.00, 0.00, 0.00]
-
-
-### foot settings #############################################################
-foot:
-  size: {x: 0.16, y: 0.088, z: 0.015}
-  separation: 0.095
-  origin_shift: {x: 0.02, y: 0.006}
-  max:
-    step: {x: 0.08, y: 0.16, theta: 0.3}
-    inverse:
-      step: {x: -0.04, y: 0.09, theta: -0.3}
-
-
-### step range ################################################################
-
-# more accurate than the bounding box defined by the max/max inverse step
-step_range:
-  x: [0.00, 0.01, 0.02, 0.03, 0.05, 0.06, 0.07, 0.07,-0.03,-0.03,-0.02,-0.01]
-  y: [0.15, 0.15, 0.15, 0.14, 0.13, 0.13, 0.12, 0.09, 0.09, 0.13, 0.14, 0.15]
diff --git a/humanoid_navigation-for-git/footstep_planner/config/footsteps_nao_OUTDATED.yaml b/humanoid_navigation-for-git/footstep_planner/config/footsteps_nao_OUTDATED.yaml
deleted file mode 100644
index 0044497..0000000
--- a/humanoid_navigation-for-git/footstep_planner/config/footsteps_nao_OUTDATED.yaml
+++ /dev/null
@@ -1,5 +0,0 @@
-footsteps:
-  x:     [0.000,0.040,0.026,0.040,0.026,-0.014,0.000,-0.014,-0.040,-0.054,-0.040,-0.054,0.000,0.030]
-  y:     [0.095,0.095,0.093,0.135,0.133, 0.093,0.135, 0.133, 0.095, 0.093, 0.135, 0.133,0.088,0.088]
-  theta: [0.000,0.000,0.300,0.000,0.300, 0.300,0.000, 0.300, 0.000, 0.300, 0.000, 0.300,0.000,0.000]
-
diff --git a/humanoid_navigation-for-git/footstep_planner/config/footsteps_nao_navigation.yaml b/humanoid_navigation-for-git/footstep_planner/config/footsteps_nao_navigation.yaml
deleted file mode 100644
index 5f214d6..0000000
--- a/humanoid_navigation-for-git/footstep_planner/config/footsteps_nao_navigation.yaml
+++ /dev/null
@@ -1,33 +0,0 @@
-### Footstep parameterization for the Aldebaran Robotics Nao humanoid #########
-
-### footstep settings #########################################################
-
-# Footstep displacement vectors (in meter / rad)
-# NOTE: not all footsteps within the max values can be performed since the
-#       boundary of allowd footsteps is an ellipse
-# WARNING: data type has to be float since integers will cause an exception
-footsteps:
-  x:     [0.0,0.05,0.02,0.04,0.02,0.00,-0.02,-0.03,-0.03,-0.02,0.00,0.03, 0.0]
-  y:     [0.1,0.10,0.10,0.13,0.13,0.14, 0.13, 0.10, 0.10, 0.13,0.09,0.09, 0.12]
-  theta: [0.0,0.00,0.30,0.00,0.30,0.00, 0.30, 0.00, 0.30, 0.00,0.00,0.00,-0.3]
-
-
-### foot settings #############################################################
-
-foot:
-  size: {x: 0.16, y: 0.088, z: 0.015}
-  separation: 0.095
-  origin_shift: {x: 0.02, y: 0.006}
-  # bounding box of allowed footsteps; refined by the more accurate step range
-  max:
-    step: {x: 0.07, y: 0.15, theta: 0.3}
-    inverse:
-      step: {x: -0.03, y: 0.095, theta: -0.1}
-
-
-### step range ################################################################
-
-# more accurate than the bounding box defined by the max/max inverse step
-step_range:
-  x: [0.00, 0.01, 0.02, 0.03, 0.05, 0.06, 0.07, 0.070,-0.030,-0.03,-0.02,-0.01]
-  y: [0.15, 0.15, 0.15, 0.14, 0.13, 0.13, 0.12, 0.095, 0.095, 0.13, 0.14, 0.15]
diff --git a/humanoid_navigation-for-git/footstep_planner/config/navigation_params.yaml b/humanoid_navigation-for-git/footstep_planner/config/navigation_params.yaml
deleted file mode 100644
index 2d341c9..0000000
--- a/humanoid_navigation-for-git/footstep_planner/config/navigation_params.yaml
+++ /dev/null
@@ -1,12 +0,0 @@
-### navigation settings ########################################################
-
-# whether NAO should execute its footsteps slow but accurate or fast and
-# inaccurate
-safe_execution: True
-
-# feedback rate of the action server
-feedback_frequency: 5.0
-
-accuracy:
-  # the smaller the better a performed footstep has to fit into a planned one
-  footstep: {x: 0.01, y: 0.01, theta: 0.1}
diff --git a/humanoid_navigation-for-git/footstep_planner/config/planning_params.yaml b/humanoid_navigation-for-git/footstep_planner/config/planning_params.yaml
deleted file mode 100644
index d4ff4fb..0000000
--- a/humanoid_navigation-for-git/footstep_planner/config/planning_params.yaml
+++ /dev/null
@@ -1,33 +0,0 @@
-### planner environment settings ##############################################
-
-# the size of the used hash map (the bigger the better); should be something
-# with 2^X (initially 2^16=65536)
-max_hash_size: 65536
-
-# the heuristic that should be used to estimate the step costs of a planning 
-# state possible choices: 
-# EuclideanHeuristic, EuclStepCostHeuristic, PathCostHeuristic
-heuristic_type: PathCostHeuristic
-
-
-### planner settings ###########################################################
-
-# define the planner of choice provided by the SBPL package
-# - ARAPlanner
-# - ADPlanner
-# - RSTARPlanner
-planner_type: ARAPlanner
-
-# search until a specific time limit is reached or first solution is found
-search_until_first_solution: False
-
-# the maximum search time if search_until_first_solution is set to False
-allocated_time: 7.0
-
-initial_epsilon: 8.0
-
-forward_search: False
-
-# the limit of changed states that decides whether to replan or to start a hole
-# new planning task
-changed_cells_limit: 20000
diff --git a/humanoid_navigation-for-git/footstep_planner/config/planning_params_asimo.yaml b/humanoid_navigation-for-git/footstep_planner/config/planning_params_asimo.yaml
deleted file mode 100644
index e74ef02..0000000
--- a/humanoid_navigation-for-git/footstep_planner/config/planning_params_asimo.yaml
+++ /dev/null
@@ -1,20 +0,0 @@
-### Planning parameterization for a large humanoid, similar to ASIMO or HRP-2 ##
-
-# cost to perform one footstep (in addition to distance costs, corresponds to 'meters')
-step_cost: 0.1
-
-# cost to estimate the difference between the current orientation and the goal
-# orientation; used in the heuristic it can easily overestimate the true path
-# cost since this cost is not incorporated in each step
-diff_angle_cost: 0.0
-
-accuracy:
-  # footstep collision check accuracy
-  # - 0 (just the circumcircle of the foot)
-  # - 1 (just the incircle of the foot)
-  # - 2 (circumcircle and incircle recursivly checked for the whole foot)
-  collision_check: 2
-
-  cell_size: 0.01
-
-  num_angle_bins: 64
diff --git a/humanoid_navigation-for-git/footstep_planner/config/planning_params_nao.yaml b/humanoid_navigation-for-git/footstep_planner/config/planning_params_nao.yaml
deleted file mode 100644
index 590b969..0000000
--- a/humanoid_navigation-for-git/footstep_planner/config/planning_params_nao.yaml
+++ /dev/null
@@ -1,20 +0,0 @@
-### Planning parameterization for the Aldebaran Robotics Nao humanoid ##########
-
-# cost to perform one footstep (in addition to distance costs, corresponds to 'meters')
-step_cost: 0.01
-
-# cost to estimate the difference between the current orientation and the goal
-# orientation; used in the heuristic it can easily overestimate the true path
-# cost since this cost is not incorporated in each step
-diff_angle_cost: 0.0
-
-accuracy:
-  # footstep collision check accuracy
-  # - 0 (just the circumcircle of the foot)
-  # - 1 (just the incircle of the foot)
-  # - 2 (circumcircle and incircle recursivly checked for the whole foot)
-  collision_check: 2
-
-  cell_size: 0.01
-
-  num_angle_bins: 128
diff --git a/humanoid_navigation-for-git/footstep_planner/config/rviz_footstep_navigation.vcg b/humanoid_navigation-for-git/footstep_planner/config/rviz_footstep_navigation.vcg
deleted file mode 100644
index 40a8e61..0000000
--- a/humanoid_navigation-for-git/footstep_planner/config/rviz_footstep_navigation.vcg
+++ /dev/null
@@ -1,156 +0,0 @@
-Background\ ColorR=0.878431
-Background\ ColorG=0.878431
-Background\ ColorB=0.878431
-Fixed\ Frame=/map
-Target\ Frame=<Fixed Frame>
-Axes.Enabled=0
-Axes.Length=1
-Axes.Radius=0.03
-Axes.Reference\ Frame=<Fixed Frame>
-ExpandedStates.Alpha=0.5
-ExpandedStates.Billboard\ Size=0.008
-ExpandedStates.Color\ Transformer=Flat Color
-ExpandedStates.Decay\ Time=0
-ExpandedStates.Enabled=0
-ExpandedStates.Position\ Transformer=XYZ
-ExpandedStates.Selectable=0
-ExpandedStates.Style=2
-ExpandedStates.Topic=/footstep_navigation/expanded_states
-ExpandedStates..AxisAutocompute\ Value\ Bounds=1
-ExpandedStates..AxisAxis=2
-ExpandedStates..AxisMax\ Value=10
-ExpandedStates..AxisMin\ Value=-10
-ExpandedStates..AxisUse\ Fixed\ Frame=1
-ExpandedStates..Flat\ ColorColorR=0.0509804
-ExpandedStates..Flat\ ColorColorG=0.0901961
-ExpandedStates..Flat\ ColorColorB=0.941176
-ExpandedStates..IntensityAutocompute\ Intensity\ Bounds=1
-ExpandedStates..IntensityChannel\ Name=intensity
-ExpandedStates..IntensityMax\ ColorR=1
-ExpandedStates..IntensityMax\ ColorG=1
-ExpandedStates..IntensityMax\ ColorB=1
-ExpandedStates..IntensityMax\ Intensity=4096
-ExpandedStates..IntensityMin\ ColorR=0
-ExpandedStates..IntensityMin\ ColorG=0
-ExpandedStates..IntensityMin\ ColorB=0
-ExpandedStates..IntensityMin\ Intensity=0
-ExpandedStates..IntensityUse\ full\ RGB\ spectrum=0
-FootstepPath.Enabled=1
-FootstepPath.Marker\ Topic=footstep_navigation/footsteps
-GoalPose.Alpha=1
-GoalPose.ColorR=0
-GoalPose.ColorG=1
-GoalPose.ColorB=0
-GoalPose.Enabled=1
-GoalPose.Head\ Length=0.05
-GoalPose.Head\ Radius=0.08
-GoalPose.Shaft\ Length=0.12
-GoalPose.Shaft\ Radius=0.03
-GoalPose.Shape=0
-GoalPose.Topic=/goal
-Grid.Alpha=0.5
-Grid.Cell\ Size=1
-Grid.ColorR=0.5
-Grid.ColorG=0.5
-Grid.ColorB=0.5
-Grid.Enabled=1
-Grid.Line\ Style=0
-Grid.Line\ Width=0.03
-Grid.Normal\ Cell\ Count=0
-Grid.OffsetX=0
-Grid.OffsetY=0
-Grid.OffsetZ=0
-Grid.Plane=0
-Grid.Plane\ Cell\ Count=200
-Grid.Reference\ Frame=<Fixed Frame>
-HeuristcPath.Alpha=1
-HeuristcPath.ColorR=0
-HeuristcPath.ColorG=0.0901961
-HeuristcPath.ColorB=1
-HeuristcPath.Enabled=0
-HeuristcPath.Topic=/footstep_navigation/heuristic_path
-Map.Alpha=1
-Map.Draw\ Behind=1
-Map.Enabled=1
-Map.Topic=/map
-Path.Alpha=1
-Path.ColorR=1
-Path.ColorG=0
-Path.ColorB=0
-Path.Enabled=1
-Path.Topic=/footstep_navigation/path
-Robot\ Model.Alpha=1
-Robot\ Model.Collision\ Enabled=0
-Robot\ Model.Enabled=0
-Robot\ Model.Robot\ Description=robot_description
-Robot\ Model.TF\ Prefix=
-Robot\ Model.Update\ Interval=0
-Robot\ Model.Visual\ Enabled=1
-StartPose.Alpha=1
-StartPose.ColorR=1
-StartPose.ColorG=0
-StartPose.ColorB=0
-StartPose.Enabled=1
-StartPose.Head\ Length=0.05
-StartPose.Head\ Radius=0.08
-StartPose.Shaft\ Length=0.12
-StartPose.Shaft\ Radius=0.03
-StartPose.Shape=0
-StartPose.Topic=/footstep_navigation/start
-TF.All\ Enabled=0
-TF.Enabled=0
-TF.Frame\ Timeout=15
-TF.Marker\ Scale=1
-TF.Show\ Arrows=0
-TF.Show\ Axes=1
-TF.Show\ Names=0
-TF.Update\ Interval=0
-Tool\ 2D\ Nav\ GoalTopic=goal
-Tool\ 2D\ Pose\ EstimateTopic=initialpose
-Camera\ Type=rviz::XYOrbitViewController
-Camera\ Config=0.655398 0.900398 1.74458 0 0 0
-Property\ Grid\ State=selection=Robot Model.Enabled;expanded=.Global Options,Axes.Enabled.Axes.StatusTopStatus,TF.Enabled.TF.StatusTopStatus,TF.Enabled.TF.Tree,FootstepPath.Enabled.FootstepPath.Namespaces,ExpandedStates.Enabled.ExpandedStates.StatusTopStatus;scrollpos=0,0;splitterpos=136,272;ispageselected=1
-[Display0]
-Name=Grid
-Package=rviz
-ClassName=rviz::GridDisplay
-[Display1]
-Name=Axes
-Package=rviz
-ClassName=rviz::AxesDisplay
-[Display2]
-Name=Map
-Package=rviz
-ClassName=rviz::MapDisplay
-[Display3]
-Name=TF
-Package=rviz
-ClassName=rviz::TFDisplay
-[Display4]
-Name=Robot Model
-Package=rviz
-ClassName=rviz::RobotModelDisplay
-[Display5]
-Name=FootstepPath
-Package=rviz
-ClassName=rviz::MarkerDisplay
-[Display6]
-Name=GoalPose
-Package=rviz
-ClassName=rviz::PoseDisplay
-[Display7]
-Name=StartPose
-Package=rviz
-ClassName=rviz::PoseDisplay
-[Display8]
-Name=Path
-Package=rviz
-ClassName=rviz::PathDisplay
-[Display9]
-Name=ExpandedStates
-Package=rviz
-ClassName=rviz::PointCloudDisplay
-[Display10]
-Name=HeuristcPath
-Package=rviz
-ClassName=rviz::PathDisplay
diff --git a/humanoid_navigation-for-git/footstep_planner/config/rviz_footstep_planning.rviz b/humanoid_navigation-for-git/footstep_planner/config/rviz_footstep_planning.rviz
deleted file mode 100644
index 658edef..0000000
--- a/humanoid_navigation-for-git/footstep_planner/config/rviz_footstep_planning.rviz
+++ /dev/null
@@ -1,179 +0,0 @@
-Panels:
-  - Class: rviz/Displays
-    Help Height: 78
-    Name: Displays
-    Property Tree Widget:
-      Expanded:
-        - /Global Options1
-        - /Status1
-      Splitter Ratio: 0.5
-    Tree Height: 547
-  - Class: rviz/Selection
-    Name: Selection
-  - Class: rviz/Tool Properties
-    Expanded:
-      - /2D Pose Estimate1
-      - /2D Nav Goal1
-      - /Publish Point1
-    Name: Tool Properties
-    Splitter Ratio: 0.588679
-  - Class: rviz/Views
-    Expanded:
-      - /Current View1
-    Name: Views
-    Splitter Ratio: 0.5
-  - Class: rviz/Time
-    Experimental: false
-    Name: Time
-    SyncMode: 0
-    SyncSource: Expanded States
-Visualization Manager:
-  Class: ""
-  Displays:
-    - Alpha: 0.5
-      Cell Size: 1
-      Class: rviz/Grid
-      Color: 160; 160; 164
-      Enabled: true
-      Line Style:
-        Line Width: 0.03
-        Value: Lines
-      Name: Grid
-      Normal Cell Count: 0
-      Offset:
-        X: 0
-        Y: 0
-        Z: 0
-      Plane: XY
-      Plane Cell Count: 10
-      Reference Frame: <Fixed Frame>
-      Value: true
-    - Alpha: 1
-      Class: rviz/Map
-      Draw Behind: false
-      Enabled: true
-      Name: Map
-      Topic: /map
-      Value: true
-    - Class: rviz/MarkerArray
-      Enabled: true
-      Marker Topic: /footstep_planner/footsteps_array
-      Name: Footsteps
-      Namespaces:
-        "": true
-      Queue Size: 100
-      Value: true
-    - Alpha: 1
-      Axes Length: 1
-      Axes Radius: 0.1
-      Class: rviz/Pose
-      Color: 59; 255; 0
-      Enabled: true
-      Head Length: 0.1
-      Head Radius: 0.08
-      Name: Goal
-      Shaft Length: 0.1
-      Shaft Radius: 0.025
-      Shape: Arrow
-      Topic: /goal
-      Value: true
-    - Alpha: 1
-      Axes Length: 1
-      Axes Radius: 0.1
-      Class: rviz/Pose
-      Color: 255; 25; 0
-      Enabled: true
-      Head Length: 0.1
-      Head Radius: 0.08
-      Name: Start
-      Shaft Length: 0.1
-      Shaft Radius: 0.025
-      Shape: Arrow
-      Topic: /footstep_planner/start
-      Value: true
-    - Alpha: 1
-      Buffer Length: 1
-      Class: rviz/Path
-      Color: 255; 0; 0
-      Enabled: true
-      Name: Path
-      Topic: /footstep_planner/path
-      Value: true
-    - Alpha: 1
-      Autocompute Intensity Bounds: true
-      Autocompute Value Bounds:
-        Max Value: 10
-        Min Value: -10
-        Value: true
-      Axis: Z
-      Channel Name: intensity
-      Class: rviz/PointCloud
-      Color: 126; 152; 255
-      Color Transformer: FlatColor
-      Decay Time: 0
-      Enabled: true
-      Max Color: 255; 255; 255
-      Max Intensity: 4096
-      Min Color: 0; 0; 0
-      Min Intensity: 0
-      Name: Expanded States
-      Position Transformer: XYZ
-      Queue Size: 10
-      Selectable: true
-      Size (Pixels): 3
-      Size (m): 0.01
-      Style: Flat Squares
-      Topic: /footstep_planner/expanded_states
-      Use Fixed Frame: true
-      Use rainbow: true
-      Value: true
-  Enabled: true
-  Global Options:
-    Background Color: 48; 48; 48
-    Fixed Frame: /map
-  Name: root
-  Tools:
-    - Class: rviz/Interact
-      Hide Inactive Objects: true
-    - Class: rviz/MoveCamera
-    - Class: rviz/Select
-    - Class: rviz/FocusCamera
-    - Class: rviz/Measure
-    - Class: rviz/SetInitialPose
-      Topic: /initialpose
-    - Class: rviz/SetGoal
-      Topic: /goal
-    - Class: rviz/PublishPoint
-      Single click: true
-      Topic: /clicked_point
-  Value: true
-  Views:
-    Current:
-      Angle: 0
-      Class: rviz/TopDownOrtho
-      Name: Current View
-      Near Clip Distance: 0.01
-      Scale: 151.786
-      Target Frame: <Fixed Frame>
-      Value: TopDownOrtho (rviz)
-      X: 2.12667
-      Y: 1.96679
-    Saved: ~
-Window Geometry:
-  Displays:
-    collapsed: false
-  Height: 839
-  Hide Left Dock: false
-  Hide Right Dock: false
-  QMainWindow State: 000000ff00000000fd00000004000000000000013c000002b0fc0200000007fb0000001200530065006c0065006300740069006f006e00000001e10000009b0000006901000005fb000000120056006900650077007300200054006f006f02000001df000002110000018500000122fb000000200054006f006f006c002000500072006f0070006500720074006900650073003203000002880000011d000002210000017afb000000100044006900730070006c0061007900730100000035000002b0000000da01000005fb0000002000730065006c0065006300740069006f006e00200062007500660066006500720200000138000000aa0000023a00000294fb00000014005700690064006500530074006500720065006f02000000e6000000d2000003ee0000030bfb0000000c004b0069006e0065006300740200000186000001060000030c00000261000000010000010f000002b0fc0200000004fb0000001e0054006f006f006c002000500072006f00700065007200740069006500730100000035000000800000006901000005fb0000001e0054006f006f006c002000500072006f00700065007200740069006500730100000035000000a30000000000000000fb0000000a0056006900650077007301000000b80000022d000000af01000005fb0000001200530065006c0065006300740069006f006e010000025a000000b200000000000000000000000200000490000000a9fc0100000001fb0000000a00560069006500770073030000004e00000080000002e10000019700000003000005a000000040fc0100000002fb0000000800540069006d00650100000000000005a00000023101000005fb0000000800540069006d006501000000000000045000000000000000000000034f000002b000000004000000040000000800000008fc0000000100000002000000010000000a0054006f006f006c00730100000000ffffffff0000000000000000
-  Selection:
-    collapsed: false
-  Time:
-    collapsed: false
-  Tool Properties:
-    collapsed: false
-  Views:
-    collapsed: false
-  Width: 1440
-  X: -2
-  Y: -3
diff --git a/humanoid_navigation-for-git/footstep_planner/config/rviz_footstep_planning_fuerte.vcg b/humanoid_navigation-for-git/footstep_planner/config/rviz_footstep_planning_fuerte.vcg
deleted file mode 100644
index 3fcb1f8..0000000
--- a/humanoid_navigation-for-git/footstep_planner/config/rviz_footstep_planning_fuerte.vcg
+++ /dev/null
@@ -1,205 +0,0 @@
-Axes.Enabled=0
-Axes.Length=1
-Axes.Radius=0.03
-Axes.Reference\ Frame=<Fixed Frame>
-Background\ ColorB=0.878431
-Background\ ColorG=0.878431
-Background\ ColorR=0.878431
-Camera\ Config=128.5 4.05613 3.98887 -5.41918e-07
-Camera\ Type=rviz::FixedOrientationOrthoViewController
-ExpandedStates..AxisColorAutocompute\ Value\ Bounds=1
-ExpandedStates..AxisColorAxis=2
-ExpandedStates..AxisColorMax\ Value=10
-ExpandedStates..AxisColorMin\ Value=-10
-ExpandedStates..AxisColorUse\ Fixed\ Frame=1
-ExpandedStates..FlatColorColorB=1
-ExpandedStates..FlatColorColorG=0
-ExpandedStates..FlatColorColorR=0
-ExpandedStates..IntensityAutocompute\ Intensity\ Bounds=1
-ExpandedStates..IntensityChannel\ Name=intensity
-ExpandedStates..IntensityMax\ ColorB=1
-ExpandedStates..IntensityMax\ ColorG=1
-ExpandedStates..IntensityMax\ ColorR=1
-ExpandedStates..IntensityMax\ Intensity=4096
-ExpandedStates..IntensityMin\ ColorB=0
-ExpandedStates..IntensityMin\ ColorG=0
-ExpandedStates..IntensityMin\ ColorR=0
-ExpandedStates..IntensityMin\ Intensity=0
-ExpandedStates..IntensityUse\ full\ RGB\ spectrum=0
-ExpandedStates.Alpha=0.2
-ExpandedStates.Billboard\ Size=0.01
-ExpandedStates.Color\ Transformer=FlatColor
-ExpandedStates.Decay\ Time=0
-ExpandedStates.Enabled=1
-ExpandedStates.Position\ Transformer=XYZ
-ExpandedStates.Queue\ Size=1
-ExpandedStates.Selectable=1
-ExpandedStates.Style=3
-ExpandedStates.Topic=/footstep_planner/expanded_states
-Fixed\ Frame=/map
-FootstepPath.=1
-FootstepPath.Enabled=1
-FootstepPath.Marker\ Topic=footstep_planner/footsteps
-FootstepPath.Queue\ Size=1
-GoalPose.Alpha=1
-GoalPose.ColorB=0
-GoalPose.ColorG=1
-GoalPose.ColorR=0
-GoalPose.Enabled=1
-GoalPose.Head\ Length=0.05
-GoalPose.Head\ Radius=0.08
-GoalPose.Shaft\ Length=0.12
-GoalPose.Shaft\ Radius=0.03
-GoalPose.Shape=0
-GoalPose.Topic=/goal
-Grid.Alpha=0.5
-Grid.Cell\ Size=1
-Grid.ColorB=0.5
-Grid.ColorG=0.5
-Grid.ColorR=0.5
-Grid.Enabled=0
-Grid.Line\ Style=0
-Grid.Line\ Width=0.03
-Grid.Normal\ Cell\ Count=0
-Grid.OffsetX=0
-Grid.OffsetY=0
-Grid.OffsetZ=0
-Grid.Plane=0
-Grid.Plane\ Cell\ Count=200
-Grid.Reference\ Frame=<Fixed Frame>
-HeuristcPath.Alpha=1
-HeuristcPath.ColorB=1
-HeuristcPath.ColorG=0
-HeuristcPath.ColorR=0
-HeuristcPath.Enabled=0
-HeuristcPath.Topic=/footstep_planner/heuristic_path
-Map.Alpha=1
-Map.Draw\ Behind=1
-Map.Enabled=1
-Map.Topic=/map
-Map2.Alpha=0.5
-Map2.Draw\ Behind=0
-Map2.Enabled=1
-Map2.Topic=/map_walls
-MarkerArray.Enabled=1
-MarkerArray.Marker\ Array\ Topic=visualization_marker_array
-MarkerArray.Queue\ Size=100
-Path.Alpha=1
-Path.ColorB=0
-Path.ColorG=0
-Path.ColorR=1
-Path.Enabled=0
-Path.Topic=/footstep_planner/path
-Property\ Grid\ Splitter=940,76
-Property\ Grid\ State=expanded=.Global Options,FootstepPath.Enabled,Path.Enabled,Random nodes.Enabled,ExpandedStates.Enabled,HeuristcPath.Enabled,MarkerArray.Enabled,Map2.Enabled;splitterratio=0.5
-QMainWindow=000000ff00000000fd0000000200000000000001080000043bfc0200000001fb000000100044006900730070006c00610079007301000000300000043b000000de0100000500000001000001f00000043bfc0200000003fb0000001e0054006f006f006c002000500072006f00700065007200740069006500730100000030000001690000006901000005fb0000000a00560069006500770073010000019c000001b5000000ad01000005fc0000035400000117000000880100001efa000000000100000002fb0000000800540069006d00650100000000ffffffff000001f001000005fb0000001200530065006c0065006300740069006f006e01000006800000010800000052010000050000048a0000043b00000004000000040000000800000008fc0000000100000002000000010000000a0054006f006f006c00730100000000ffffffff0000000000000000
-Random\ nodes..AxisColorAutocompute\ Value\ Bounds=1
-Random\ nodes..AxisColorAxis=2
-Random\ nodes..AxisColorMax\ Value=10
-Random\ nodes..AxisColorMin\ Value=-10
-Random\ nodes..AxisColorUse\ Fixed\ Frame=1
-Random\ nodes..FlatColorColorB=0
-Random\ nodes..FlatColorColorG=0
-Random\ nodes..FlatColorColorR=1
-Random\ nodes..IntensityAutocompute\ Intensity\ Bounds=1
-Random\ nodes..IntensityChannel\ Name=intensity
-Random\ nodes..IntensityMax\ ColorB=1
-Random\ nodes..IntensityMax\ ColorG=1
-Random\ nodes..IntensityMax\ ColorR=1
-Random\ nodes..IntensityMax\ Intensity=4096
-Random\ nodes..IntensityMin\ ColorB=0
-Random\ nodes..IntensityMin\ ColorG=0
-Random\ nodes..IntensityMin\ ColorR=0
-Random\ nodes..IntensityMin\ Intensity=0
-Random\ nodes..IntensityUse\ full\ RGB\ spectrum=0
-Random\ nodes.Alpha=1
-Random\ nodes.Billboard\ Size=0.03
-Random\ nodes.Color\ Transformer=FlatColor
-Random\ nodes.Decay\ Time=0
-Random\ nodes.Enabled=0
-Random\ nodes.Position\ Transformer=XYZ
-Random\ nodes.Queue\ Size=1
-Random\ nodes.Selectable=1
-Random\ nodes.Style=2
-Random\ nodes.Topic=/footstep_planner/random_states
-Robot\ Model.Alpha=1
-Robot\ Model.Collision\ Enabled=0
-Robot\ Model.Enabled=0
-Robot\ Model.Robot\ Description=robot_description
-Robot\ Model.TF\ Prefix=
-Robot\ Model.Update\ Interval=0
-Robot\ Model.Visual\ Enabled=1
-StartPose.Alpha=1
-StartPose.ColorB=0
-StartPose.ColorG=0
-StartPose.ColorR=1
-StartPose.Enabled=1
-StartPose.Head\ Length=0.05
-StartPose.Head\ Radius=0.08
-StartPose.Shaft\ Length=0.12
-StartPose.Shaft\ Radius=0.03
-StartPose.Shape=0
-StartPose.Topic=/footstep_planner/start
-TF.Enabled=0
-TF.Frame\ Timeout=15
-TF.Marker\ Scale=1
-TF.Show\ Arrows=0
-TF.Show\ Axes=1
-TF.Show\ Names=0
-TF.Update\ Interval=0
-Target\ Frame=<Fixed Frame>
-Tool\ 2D\ Nav\ GoalTopic=goal
-Tool\ 2D\ Pose\ EstimateTopic=initialpose
-[Display0]
-ClassName=rviz::GridDisplay
-Name=Grid
-[Display1]
-ClassName=rviz::AxesDisplay
-Name=Axes
-[Display10]
-ClassName=rviz::PointCloudDisplay
-Name=ExpandedStates
-[Display11]
-ClassName=rviz::PathDisplay
-Name=HeuristcPath
-[Display12]
-ClassName=rviz::MarkerArrayDisplay
-Name=MarkerArray
-[Display13]
-ClassName=rviz::MapDisplay
-Name=Map2
-[Display2]
-ClassName=rviz::MapDisplay
-Name=Map
-[Display3]
-ClassName=rviz::TFDisplay
-Name=TF
-[Display4]
-ClassName=rviz::RobotModelDisplay
-Name=Robot Model
-[Display5]
-ClassName=rviz::MarkerDisplay
-Name=FootstepPath
-[Display6]
-ClassName=rviz::PoseDisplay
-Name=GoalPose
-[Display7]
-ClassName=rviz::PoseDisplay
-Name=StartPose
-[Display8]
-ClassName=rviz::PathDisplay
-Name=Path
-[Display9]
-ClassName=rviz::PointCloudDisplay
-Name=Random nodes
-[Views]
-0Name=rooms_view
-[Views/0]
-Config=128.5 4.05613 3.98887 -5.41918e-07
-Target=<Fixed Frame>
-Type=rviz::FixedOrientationOrthoViewController
-[Window]
-Height=1158
-Width=1932
-X=0
-Y=0
diff --git a/humanoid_navigation-for-git/footstep_planner/include/footstep_planner/Footstep.h b/humanoid_navigation-for-git/footstep_planner/include/footstep_planner/Footstep.h
deleted file mode 100644
index 7155ff0..0000000
--- a/humanoid_navigation-for-git/footstep_planner/include/footstep_planner/Footstep.h
+++ /dev/null
@@ -1,129 +0,0 @@
-/*
- * A footstep planner for humanoid robots
- *
- * Copyright 2010-2011 Johannes Garimort, Armin Hornung, University of Freiburg
- * http://www.ros.org/wiki/footstep_planner
- *
- *
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, version 3.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-#ifndef FOOTSTEP_PLANNER_FOOTSTEP_H_
-#define FOOTSTEP_PLANNER_FOOTSTEP_H_
-
-#include <footstep_planner/PlanningState.h>
-
-
-namespace footstep_planner
-{
-/**
- * @brief A class representing a footstep (i.e. a translation and rotation
- * of a specific foot with respect to the supporting leg) that can be
- * performed by a humanoid robot.
- *
- * Since the underlying SBPL is working on discretized states the footsteps
- * are also a discretized translations and rotations.
- */
-class Footstep
-{
-public:
-  /**
-   * @brief The constructor takes the continuous translation and rotation
-   * of the footstep and calculates the respective discretized footstep
-   * based on the parameters of the discretization.
-   *
-   * @param x The (continuous) translation in x direction.
-   * @param y The (continuous) translation in y direction.
-   * @param theta The (continuous) rotation.
-   * @param cell_size Parameter to discretize the translation (see
-   * PlanningState for further explanation).
-   * @param num_angle_bins Parameter to discretize the rotation (see
-   * PlanningState for further explanation).
-   * @param max_hash_size The maximal hash size.
-   */
-  Footstep(double x, double y, double theta,
-           double cell_size, int num_angle_bins, int max_hash_size);
-  ~Footstep();
-
-  /**
-   * @brief Performs this footstep (translation and rotation) on a given
-   * planning state.
-   *
-   * @param current The planning state representing the robot's current
-   * supporting leg.
-   * @return The resulting planning state.
-   */
-  PlanningState performMeOnThisState(const PlanningState& current) const;
-
-  /**
-   * @brief Reverse this footstep on a given planning state.
-   *
-   * @param current The planning state representing the robot's current
-   * supporting leg.
-   * @return The reversed planning state, i.e. the state the robot was in
-   * if this footstep had not been performed.
-   */
-  PlanningState reverseMeOnThisState(const PlanningState& current) const;
-
-private:
-  /// Typedef representing the (discretized) translation of the footstep.
-  typedef std::pair<int, int> footstep_xy;
-
-  /// Initialization method called within the constructor.
-  void init(double x, double y);
-
-  /**
-   * @brief Discretizes the translation of the footstep for a certain
-   * (discretized) orientation of a possible state.
-   *
-   * @param leg The supporting leg of the possible state.
-   * @param global_theta The (discretized) orientation of the possible
-   * state.
-   * @param x The (continuous) translation in x direction.
-   * @param y The (continuous) translation in y direction.
-   * @param footstep_x The resulting (discretized) translation in x
-   * direction.
-   * @param footstep_y The resulting (discretized) translation in y
-   * direction.
-   * @return The (discretized) orientation of the resulting state after
-   * performing the footstep. This is used to calculate the (discretized)
-   * reversed footstep.
-   */
-  int calculateForwardStep(Leg leg, int global_theta,
-                           double x, double y,
-                           int* footstep_x, int* footstep_y) const;
-
-  /// The (discretized) rotation of the footstep.
-  int ivTheta;
-
-  /// The parameter for the discretization of the translation.
-  double ivCellSize;
-  /// The parameter for the discretization of the rotation.
-  int ivNumAngleBins;
-
-  /// The maximal hash size.
-  int ivMaxHashSize;
-
-  /// The (discretized) translation(s) for a left supporting foot.
-  std::vector<footstep_xy> ivDiscSuccessorLeft;
-  /// The (discretized) translation(s) for a right supporting foot.
-  std::vector<footstep_xy> ivDiscSuccessorRight;
-  /// The reversed (discretized) translation(s) for a left supporting foot.
-  std::vector<footstep_xy> ivDiscPredecessorLeft;
-  /// The reversed (discretized) translation(s) for a right supporting foot.
-  std::vector<footstep_xy> ivDiscPredecessorRight;
-};
-} // end of namespace
-
-#endif  // FOOTSTEP_PLANNER_FOOTSTEP_H_
diff --git a/humanoid_navigation-for-git/footstep_planner/include/footstep_planner/FootstepNavigation.h b/humanoid_navigation-for-git/footstep_planner/include/footstep_planner/FootstepNavigation.h
deleted file mode 100644
index 68b4226..0000000
--- a/humanoid_navigation-for-git/footstep_planner/include/footstep_planner/FootstepNavigation.h
+++ /dev/null
@@ -1,255 +0,0 @@
-/*
- * A footstep planner for humanoid robots
- *
- * Copyright 2010-2011 Johannes Garimort, Armin Hornung, University of Freiburg
- * http://www.ros.org/wiki/footstep_planner
- *
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, version 3.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-#ifndef FOOTSTEP_PLANNER_FOOTSTEPNAVIGATION_H_
-#define FOOTSTEP_PLANNER_FOOTSTEPNAVIGATION_H_
-
-#include <actionlib/client/simple_action_client.h>
-#include <footstep_planner/FootstepPlanner.h>
-#include <footstep_planner/State.h>
-#include <geometry_msgs/Pose.h>
-#include <geometry_msgs/PoseStamped.h>
-#include <geometry_msgs/PoseWithCovarianceStamped.h>
-#include <humanoid_nav_msgs/ClipFootstep.h>
-#include <humanoid_nav_msgs/ExecFootstepsAction.h>
-#include <humanoid_nav_msgs/ExecFootstepsFeedback.h>
-#include <humanoid_nav_msgs/PlanFootsteps.h>
-#include <humanoid_nav_msgs/StepTargetService.h>
-#include <nav_msgs/Path.h>
-#include <nav_msgs/OccupancyGrid.h>
-#include <ros/ros.h>
-#include <tf/tf.h>
-#include <tf/transform_listener.h>
-
-#include <assert.h>
-
-
-namespace footstep_planner
-{
-/**
- * @brief A class to control the performance of a planned footstep path on
- * the NAO robot.
- */
-class FootstepNavigation
-{
-public:
-  FootstepNavigation();
-  virtual ~FootstepNavigation();
-
-  /// @brief Wrapper for FootstepPlanner::setGoal.
-  bool setGoal(const geometry_msgs::PoseStampedConstPtr goal_pose);
-
-  /// @brief Wrapper for FootstepPlanner::setGoal.
-  bool setGoal(float x, float y, float theta);
-
-  /**
-   * @brief Callback to set a simulated robot at a certain pose.
-   *
-   * Subscribed to 'goal'.
-   */
-  void goalPoseCallback(
-  const geometry_msgs::PoseStampedConstPtr& goal_pose);
-
-  /**
-   * @brief Callback to set the map.
-   *
-   * Subscribed to 'map'.
-   */
-  void mapCallback(const nav_msgs::OccupancyGridConstPtr& occupancy_map);
-
-protected:
-  /**
-   * @brief Starts the planning task from scratch discarding previous planning
-   * information.
-   *
-   * @return Success of the planning.
-   */
-  bool plan();
-
-  /**
-   * @brief Starts the planning task. First FootstepPlanner::replan() is
-   * called to use planning information from previous tasks. If this fails
-   * FootstepPlanner::plan() is called to plan from scratch. Otherwise
-   * the planning task is unsuccessful.
-   *
-   * @return Success of the planning.
-   */
-  bool replan();
-
-  /// @brief Starts the execution of the calculated path.
-  void startExecution();
-
-  /**
-   * @brief Obtains the pose of the robot's foot from tf.
-   *
-   * @return True if transformation has been received.
-   */
-  bool getFootTransform(const std::string& foot_id,
-                        const std::string& world_frame_id,
-                        const ros::Time& time,
-                        const ros::Duration& waiting_time,
-                        tf::Transform* foot);
-
-  /**
-   * @brief Calculates the footstep necessary to reach 'to' from within
-   * 'from'.
-   *
-   * @return True if the footstep can be performed by the NAO robot.
-   */
-  bool getFootstep(const tf::Pose& from, const State& from_planned,
-		               const State& to, humanoid_nav_msgs::StepTarget* footstep);
-
-  /**
-   * @brief Extracts the footsteps necessary to perform the calculated
-   * path.
-   *
-   * @param current_support_leg The current support leg of the robot. Used
-   * to calculate the footstep necessary to reach the calculated path.
-   * @param starting_step_num Index of the state in the path which has
-   * to be reached first. Usually this is 1 (since state 0 is the current
-   * support leg of the robot) but for readjustments indices different
-   * from 1 are necessary.
-   *
-   * @return False if an extracted footstep is invalid.
-   */
-  bool getFootstepsFromPath(
-      const State& current_support_leg, int starting_step_num,
-      std::vector<humanoid_nav_msgs::StepTarget>& footsteps);
-
-  /// @brief Updates the robot's current pose.
-  bool updateStart();
-
-  /// @brief Executes footsteps as boost::thread.
-  void executeFootsteps();
-
-  /**
-  * @brief Alternative (and more fluid) execution of footsteps using
-  * ROS' actionlib.
-  */
-  void executeFootstepsFast();
-
-  /**
-   * @brief Called from within ROS' actionlib at the start of a new goal
-   * request.
-   */
-  void activeCallback();
-
-  /**
-   * @brief Called from within ROS' actionlib at the end of a goal
-   * request.
-   */
-  void doneCallback(
-  const actionlib::SimpleClientGoalState& state,
-      const humanoid_nav_msgs::ExecFootstepsResultConstPtr& result);
-
-  /**
-   * @brief Called from within ROS' actionlib during the execution of
-   * a goal request.
-   */
-  void feedbackCallback(
-  const humanoid_nav_msgs::ExecFootstepsFeedbackConstPtr& fb);
-
-  bool performable(const humanoid_nav_msgs::StepTarget& footstep);
-  bool performable(float step_x, float step_y);
-
-  /**
-   * @param footstep The response from the clip footstep service (i.e. it
-   * contains the unclipped (calculated) step and the clipped
-   * (performable) step).
-   *
-   * @return True if the footstep can be performed by the robot (i.e. it
-   * is within the robot's max ranges).
-   */
-  bool performanceValid(const humanoid_nav_msgs::ClipFootstep& footstep);
-
-  /// @return True if both states are equal upon some accuracy.
-  bool performanceValid(const State& planned, const State& executed);
-
-  /// @return True if both states are equal upon some accuracy.
-  bool performanceValid(float a_x, float a_y, float a_theta,
-                        float b_x, float b_y, float b_theta);
-
-  FootstepPlanner ivPlanner;
-
-  ros::Subscriber ivGridMapSub;
-  ros::Subscriber ivRobotPoseSub;
-  ros::Subscriber ivGoalPoseSub;
-
-  ros::ServiceClient ivFootstepSrv;
-  ros::ServiceClient ivClipFootstepSrv;
-
-  tf::TransformListener ivTransformListener;
-
-  boost::mutex ivExecutionLock;
-
-  boost::shared_ptr<boost::thread> ivFootstepExecutionPtr;
-
-  std::string ivIdFootRight;
-  std::string ivIdFootLeft;
-  std::string ivIdMapFrame;
-
-  double ivAccuracyX;
-  double ivAccuracyY;
-  double ivAccuracyTheta;
-  double ivCellSize;
-  int    ivNumAngleBins;
-
-  /// Search direction.
-  bool ivForwardSearch;
-
-  /// Used to lock the calculation and execution of footsteps.
-  bool ivExecutingFootsteps;
-
-  /// The rate the action server sends its feedback.
-  double ivFeedbackFrequency;
-
-  /// Simple action client to control a footstep execution.
-  actionlib::SimpleActionClient<
-      humanoid_nav_msgs::ExecFootstepsAction> ivFootstepsExecution;
-
-  /// Fixed delay (=2) of the incoming footsteps.
-  const int ivExecutionShift;
-
-  /**
-   * Index to keep track of the currently executed footstep and the currently
-   * observed one.
-   */
-  int ivControlStepIdx;
-
-  /**
-   * Index used to keep track of the currently observed footstep after
-   * replanning.
-   */
-  int ivResetStepIdx;
-
-  /// Whether to use the slower but more cautious execution or not.
-  bool ivSafeExecution;
-
-  double ivMaxStepX;
-  double ivMaxStepY;
-  double ivMaxStepTheta;
-  double ivMaxInvStepX;
-  double ivMaxInvStepY;
-  double ivMaxInvStepTheta;
-
-  std::vector<std::pair<double, double> > ivStepRange;
-};
-}
-#endif  // FOOTSTEP_PLANNER_FOOTSTEPNAVIGATION_H_
diff --git a/humanoid_navigation-for-git/footstep_planner/include/footstep_planner/FootstepPlanner.h b/humanoid_navigation-for-git/footstep_planner/include/footstep_planner/FootstepPlanner.h
deleted file mode 100644
index cdcd784..0000000
--- a/humanoid_navigation-for-git/footstep_planner/include/footstep_planner/FootstepPlanner.h
+++ /dev/null
@@ -1,317 +0,0 @@
-/*
- * A footstep planner for humanoid robots.
- *
- * Copyright 2010-2011 Johannes Garimort, Armin Hornung, University of Freiburg
- * http://www.ros.org/wiki/footstep_planner
- *
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, version 3.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-
-#ifndef FOOTSTEP_PLANNER_FOOTSTEPPLANNER_H_
-#define FOOTSTEP_PLANNER_FOOTSTEPPLANNER_H_
-
-#include <geometry_msgs/Pose.h>
-#include <geometry_msgs/PoseStamped.h>
-#include <geometry_msgs/PoseWithCovarianceStamped.h>
-#include <humanoid_nav_msgs/PlanFootsteps.h>
-#include <humanoid_nav_msgs/PlanFootstepsBetweenFeet.h>
-#include <footstep_planner/helper.h>
-#include <footstep_planner/PathCostHeuristic.h>
-#include <footstep_planner/FootstepPlannerEnvironment.h>
-#include <footstep_planner/PlanningStateChangeQuery.h>
-#include <footstep_planner/State.h>
-#include <nav_msgs/Path.h>
-#include <nav_msgs/OccupancyGrid.h>
-#include <ros/ros.h>
-#include <sensor_msgs/PointCloud.h>
-#include <tf/tf.h>
-#include <visualization_msgs/Marker.h>
-#include <visualization_msgs/MarkerArray.h>
-#include <XmlRpcValue.h>
-#include <XmlRpcException.h>
-
-#include <assert.h>
-#include <time.h>
-
-
-namespace footstep_planner
-{
-typedef std::vector<State>::const_iterator state_iter_t;
-
-/**
- * @brief A class to control the interaction between ROS and the footstep
- * planner.
- */
-class FootstepPlanner
-{
-public:
-  FootstepPlanner();
-  virtual ~FootstepPlanner();
-
-  /**
-   * @brief Start a planning task from scratch (will delete information
-   * of previous planning tasks). Map and start, goal poses need to be
-   * set beforehand.
-   *
-   * @return Success of planning.
-   */
-  bool plan(bool force_new_plan=true);
-
-  /// @brief Sets start, goal poses and calls FootstepPlanner::plan().
-  bool plan(const geometry_msgs::PoseStampedConstPtr start,
-            const geometry_msgs::PoseStampedConstPtr goal);
-
-  /// @brief Sets start, goal poses and calls FootstepPlanner::plan().
-  bool plan(float start_x, float start_y, float start_theta,
-            float goal_x, float goal_y, float goal_theta);
-
-  /**
-   * @brief Starts a planning task based on previous planning information
-   * (note that this method can also be used when no previous planning was
-   * performed). Map and start, goal poses need to be set beforehand.
-   *
-   * @return Success of planning.
-   */
-  bool replan();
-
-  /// @brief Service handle to plan footsteps.
-  bool planService(humanoid_nav_msgs::PlanFootsteps::Request &req,
-                   humanoid_nav_msgs::PlanFootsteps::Response &resp);
-
-  /// @brief Service handle to plan footsteps.
-  bool planFeetService(humanoid_nav_msgs::PlanFootstepsBetweenFeet::Request &req,
-                   humanoid_nav_msgs::PlanFootstepsBetweenFeet::Response &resp);
-
-  /**
-   * @brief Sets the goal pose as two feet (left / right)
-   *
-   * @return True if the two foot poses have been set successfully.
-   */
-  bool setGoal(const State& left_foot, const State& right_foot);
-
-  /**
-   * @brief Sets the goal pose as a robot pose centered between two feet.
-   *
-   * @return True if the two foot poses have been set successfully.
-   */
-  bool setGoal(const geometry_msgs::PoseStampedConstPtr goal_pose);
-
-  /**
-   * @brief Sets the goal pose as a robot pose centered between two feet.
-   *
-   * @return True if the two foot poses have been set successfully.
-   */
-  bool setGoal(float x, float y, float theta);
-
-  /**
-   * @brief Sets the start pose as a robot pose centered between two feet.
-   *
-   * @return True if the two foot poses have been set successfully.
-   */
-  bool setStart(const geometry_msgs::PoseStampedConstPtr start_pose);
-
-  /**
-   * @brief Sets the start pose as a robot pose centered between two feet.
-   *
-   * @return True if the two foot poses have been set successfully.
-   */
-  bool setStart(float x, float y, float theta);
-
-  /**
-   * @brief Sets the start pose as position of left and right footsteps.
-   *
-   * @return True if the two foot poses have been set successfully.
-   */
-  bool setStart(const State& left_foot, const State& right_foot);
-
-  /**
-   * @brief Updates the map in the planning environment.
-   *
-   * @return True if a replanning is necessary, i.e. the old path is not valid
-   * any more.
-   */
-  bool updateMap(const gridmap_2d::GridMap2DPtr map);
-
-  void setMarkerNamespace(const std::string& ns)
-  {
-    ivMarkerNamespace = ns;
-  }
-
-  /// @brief Set the maximal search time.
-  void setMaxSearchTime(int search_time)
-  {
-    ivMaxSearchTime = search_time;
-  }
-
-  /**
-   * @brief Callback to set the goal pose as a robot pose centered between
-   * two feet. If the start pose has been set previously the planning is
-   * started.
-   *
-   * Subscribed to 'goal'.
-   *
-   * @return True if the two foot poses have been set successfully.
-   */
-  void goalPoseCallback(
-      const geometry_msgs::PoseStampedConstPtr& goal_pose);
-  /**
-   * @brief Callback to set the start pose as a robot pose centered
-   * between two feet. If the goal pose has been set previously the
-   * planning is started.
-   *
-   * Subscribed to 'initialpose'.
-   *
-   * @return True if the two foot poses have been set successfully.
-   */
-  void startPoseCallback(
-      const geometry_msgs::PoseWithCovarianceStampedConstPtr& start_pose);
-
-  /**
-   * @brief Callback to set the map.
-   *
-   * Subscribed to 'map'.
-   */
-  void mapCallback(const nav_msgs::OccupancyGridConstPtr& occupancy_map);
-
-  /**
-   * @brief Clear the footstep path visualization from a previous planning
-   * task.
-   */
-  void clearFootstepPathVis(unsigned num_footsteps=0);
-
-  /// @return Costs of the planned footstep path.
-  double getPathCosts() const { return ivPathCost; }
-
-  /// @return Number of expanded states.
-  size_t getNumExpandedStates() const
-  {
-    return ivPlannerPtr->get_n_expands();
-  }
-
-  /// @return Number of planned foot poses.
-  size_t getNumFootPoses() const { return ivPath.size(); }
-
-  state_iter_t getPathBegin() const { return ivPath.begin(); }
-  state_iter_t getPathEnd() const { return ivPath.end(); }
-
-  /// @return Size of the planned path.
-  int getPathSize() { return ivPath.size(); }
-
-  State getStartFootLeft() { return ivStartFootLeft; }
-  State getStartFootRight() { return ivStartFootRight; }
-
-  /// @brief Reset the previous planning information.
-  void reset();
-
-  /// @brief Reset and reinitialize the environment.
-  void resetTotally();
-
-  /// @return True if for the current start and goal pose a path exists.
-  bool pathExists() { return (bool)ivPath.size(); }
-
-  /// @brief Planning parameters.
-  environment_params ivEnvironmentParams;
-
-protected:
-  void broadcastExpandedNodesVis();
-  void broadcastRandomNodesVis();
-  void broadcastFootstepPathVis();
-  void broadcastHeuristicPathVis();
-  void broadcastPathVis();
-
-  /// helper to create service response
-  void extractFootstepsSrv(std::vector<humanoid_nav_msgs::StepTarget> & footsteps) const;
-
-  /**
-   * @return True if the newly calculated path is different from the existing
-   * one (if one exists).
-   */
-  bool pathIsNew(const std::vector<int>& new_path);
-
-  /**
-   * @brief Extracts the path (list of foot poses) from a list of state
-   * IDs calculated by the SBPL.
-   */
-  bool extractPath(const std::vector<int>& state_ids);
-
-  /// @brief Generates a visualization msgs for a foot pose.
-  void footPoseToMarker(const State& footstep,
-                        visualization_msgs::Marker* marker);
-
-  /**
-   * @brief Starts the planning task in the underlying SBPL.
-   *
-   * NOTE: Never call this directly. Always use either plan() or replan() to
-   * invoke this method.
-   */
-  bool run();
-
-  /// @brief Returns the foot pose of a leg for a given robot pose.
-  State getFootPose(const State& robot, Leg side);
-
-  /// @brief Sets the planning algorithm used by SBPL.
-  void setPlanner();
-
-  /// @brief Updates the environment in case of a changed map.
-  void updateEnvironment(const gridmap_2d::GridMap2DPtr old_map);
-
-  boost::shared_ptr<FootstepPlannerEnvironment> ivPlannerEnvironmentPtr;
-  gridmap_2d::GridMap2DPtr ivMapPtr;
-  boost::shared_ptr<SBPLPlanner> ivPlannerPtr;
-
-  boost::shared_ptr<const PathCostHeuristic> ivPathCostHeuristicPtr;
-
-  std::vector<State> ivPath;
-
-  State ivStartFootLeft;
-  State ivStartFootRight;
-  State ivGoalFootLeft;
-  State ivGoalFootRight;
-
-  ros::Publisher  ivExpandedStatesVisPub;
-  ros::Publisher  ivFootstepPathVisPub;
-  ros::Publisher  ivRandomStatesVisPub;
-  ros::Subscriber ivGridMapSub;
-  ros::Publisher  ivHeuristicPathVisPub;
-  ros::Publisher  ivPathVisPub;
-  ros::Publisher  ivStartPoseVisPub;
-  ros::ServiceServer ivFootstepPlanService;
-  ros::ServiceServer ivFootstepPlanFeetService;
-
-  double ivFootSeparation;
-  double ivMaxStepWidth;
-  int    ivCollisionCheckAccuracy;
-
-  bool   ivStartPoseSetUp, ivGoalPoseSetUp;
-  int    ivLastMarkerMsgSize;
-  double ivPathCost;
-  bool   ivSearchUntilFirstSolution;
-  double ivMaxSearchTime;
-  double ivInitialEpsilon;
-
-  /**
-   * @brief If limit of changed cells is reached the planner starts a new
-   * task from the scratch.
-   */
-   int ivChangedCellsLimit;
-
-  std::string ivPlannerType;
-  std::string ivMarkerNamespace;
-
-  std::vector<int> ivPlanningStatesIds;
-};
-}
-
-#endif  // FOOTSTEP_PLANNER_FOOTSTEPPLANNER_H_
diff --git a/humanoid_navigation-for-git/footstep_planner/include/footstep_planner/FootstepPlannerEnvironment.h b/humanoid_navigation-for-git/footstep_planner/include/footstep_planner/FootstepPlannerEnvironment.h
deleted file mode 100644
index afc7f11..0000000
--- a/humanoid_navigation-for-git/footstep_planner/include/footstep_planner/FootstepPlannerEnvironment.h
+++ /dev/null
@@ -1,464 +0,0 @@
-/*
- * A footstep planner for humanoid robots
- *
- * Copyright 2010-2011 Johannes Garimort, Armin Hornung, University of Freiburg
- * http://www.ros.org/wiki/footstep_planner
- *
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, version 3.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-#ifndef FOOTSTEP_PLANNER_FOOTSTEPPLANNERENVIRONMENT_H_
-#define FOOTSTEP_PLANNER_FOOTSTEPPLANNERENVIRONMENT_H_
-
-#include <footstep_planner/helper.h>
-#include <footstep_planner/PathCostHeuristic.h>
-#include <footstep_planner/Heuristic.h>
-#include <footstep_planner/Footstep.h>
-#include <footstep_planner/PlanningState.h>
-#include <footstep_planner/State.h>
-#include <humanoid_nav_msgs/ClipFootstep.h>
-#include <sbpl/headers.h>
-
-#include <math.h>
-#include <vector>
-#include <tr1/unordered_set>
-#include <tr1/hashtable.h>
-
-
-namespace footstep_planner
-{
-struct environment_params
-{
-  std::vector<Footstep> footstep_set;
-  boost::shared_ptr<Heuristic> heuristic;
-
-  /// Defines the area of performable (discrete) steps.
-  std::vector<std::pair<int, int> > step_range;
-
-  double footsize_x, footsize_y, footsize_z;
-  double foot_origin_shift_x, foot_origin_shift_y;
-  double max_footstep_x, max_footstep_y, max_footstep_theta;
-  double max_inverse_footstep_x, max_inverse_footstep_y,
-         max_inverse_footstep_theta;
-  double step_cost;
-  int    collision_check_accuracy;
-  int    hash_table_size;
-  double cell_size;
-  int    num_angle_bins;
-  bool   forward_search;
-  double max_step_width;
-  int    num_random_nodes;
-  double random_node_distance;
-  double heuristic_scale;
-};
-
-
-/**
- * @brief A class defining a footstep planner environment for humanoid
- * robots used by the SBPL to perform planning tasks.
- *
- * The environment keeps track of all the planning states expanded during
- * the search. Each planning state can be accessed via its ID. Furthermore
- */
-class FootstepPlannerEnvironment : public DiscreteSpaceInformation
-{
-public:
-  // specialization of hash<int,int>, similar to standard boost::hash on pairs?
-  struct IntPairHash{
-  public:
-    size_t operator()(std::pair<int, int> x) const throw() {
-      size_t seed = std::tr1::hash<int>()(x.first);
-      return std::tr1::hash<int>()(x.second) + 0x9e3779b9 + (seed<<6) + (seed>>2);
-    }
-  };
-
-  typedef std::vector<int> exp_states_t;
-  typedef exp_states_t::const_iterator exp_states_iter_t;
-  typedef std::tr1::unordered_set<std::pair<int,int>, IntPairHash > exp_states_2d_t;
-  typedef exp_states_2d_t::const_iterator exp_states_2d_iter_t;
-
-  /**
-   * @param footstep_set The set of footsteps used for the path planning.
-   * @param heuristic The heuristic used by the planner.
-   * @param footsize_x Size of the foot in x direction.
-   * @param footsize_y Size of the foot in y direction.
-   * @param origin_foot_shift_x Shift in x direction from the foot's
-   * center.
-   * @param origin_foot_shift_y Shift in y direction from the foot's
-   * center.
-   * @param max_footstep_x The maximal translation in x direction
-   * performable by the robot.
-   * @param max_footstep_y The maximal translation in y direction
-   * performable by the robot.
-   * @param max_footstep_theta The maximal rotation performable by the
-   * robot.
-   * @param max_inverse_footstep_x The minimal translation in x direction
-   * performable by the robot.
-   * @param max_inverse_footstep_y The minimal translation in y direction
-   * performable by the robot.
-   * @param max_inverse_footstep_theta The minimal rotation performable by
-   * the robot.
-   * @param step_cost The costs for each step.
-   * @param collision_check_accuracy Whether to check just the foot's
-   * circumcircle (0), the incircle (1) or recursively the circumcircle
-   * and the incircle for the whole foot (2) for collision.
-   * @param hash_table_size Size of the hash table storing the planning
-   * states expanded during the search.
-   * @param cell_size The size of each grid cell used to discretize the
-   * robot positions.
-   * @param num_angle_bins The number of bins used to discretize the
-   * robot orientations.
-   * @param forward_search Whether to use forward search (1) or backward
-   * search (0).
-   */
-  FootstepPlannerEnvironment(const environment_params& params);
-
-  virtual ~FootstepPlannerEnvironment();
-
-  /**
-   * @brief Update the robot's feet poses in the goal state.
-   * @return The new IDs (left, right) of the planning state representing the
-   * feet.
-   */
-  std::pair<int, int> updateGoal(const State& foot_left,
-                                 const State& foot_right);
-
-  /**
-   * @brief Update the robot's feet poses in the start state.
-   * @return The new IDs (left, right) of the planning states representing the
-   * feet.
-   */
-  std::pair<int, int> updateStart(const State& foot_left,
-                                  const State& right_right);
-
-  void updateMap(gridmap_2d::GridMap2DPtr map);
-
-  /**
-   * @return True iff the foot in State s is colliding with an
-   * obstacle.
-   */
-  bool occupied(const State& s);
-
-  /**
-   * @brief Try to receive a state with a certain ID.
-   *
-   * @return True iff there is a state with such an ID.
-   */
-  bool getState(unsigned int id, State* s);
-
-  /**
-   * @brief Resets the current planning task (i.e. the start and goal
-   * poses).
-   */
-  void reset();
-
-  /// @return The number of expanded states during the search.
-  int getNumExpandedStates() { return ivNumExpandedStates; }
-
-  exp_states_2d_iter_t getExpandedStatesStart()
-  {
-    return ivExpandedStates.begin();
-  }
-
-  exp_states_2d_iter_t getExpandedStatesEnd()
-  {
-    return ivExpandedStates.end();
-  }
-
-  exp_states_iter_t getRandomStatesStart()
-  {
-    return ivRandomStates.begin();
-  }
-
-  exp_states_iter_t getRandomStatesEnd()
-  {
-    return ivRandomStates.end();
-  }
-
-  /**
-   * @return The costs (in mm, truncated as int) to reach the
-   * planning state ToStateID from within planning state FromStateID.
-   */
-  int GetFromToHeuristic(int FromStateID, int ToStateID);
-
-  /**
-   * @return The heuristic value to reach the goal from within the
-   * planning state stateID (used for forward planning).
-   */
-  int GetGoalHeuristic(int stateID);
-
-  /**
-   * @return The heuristic value to reach the start from within
-   * the planning state stateID. (Used for backward planning.)
-   */
-  int GetStartHeuristic(int stateID);
-
-  /**
-   * @brief Calculates the successor states and the corresponding costs
-   * when performing the footstep set on the planning state SourceStateID.
-   * (Used for forward planning.)
-   */
-  void GetSuccs(int SourceStateID, std::vector<int> *SuccIDV,
-                std::vector<int> *CostV);
-
-  /**
-   * @brief Calculates the predecessor states and the corresponding costs
-   * when reversing the footstep set on the planning state TargetStateID.
-   * (Used for backward planning.)
-   */
-  void GetPreds(int TargetStateID, std::vector<int> *PredIDV,
-                std::vector<int> *CostV);
-
-  /**
-   * @brief Used for RStar: generate succs/preds at some
-   * domain-dependent distance. The number of generated succs/preds is up
-   * to the environment.
-   */
-  virtual void GetRandomSuccsatDistance(int SourceStateID,
-                                        std::vector<int>* SuccIDV,
-                                        std::vector<int>* CLowV);
-
-  /**
-   * @brief Used for RStar: generate succs/preds at some
-   * domain-dependent distance. The number of generated succs/preds is up
-   * to the environment.
-   */
-  virtual void GetRandomPredsatDistance(int TargetStateID,
-                                        std::vector<int>* PredIDV,
-                                        std::vector<int>* CLowV);
-
-  /// Testing, for R*
-  void GetSuccsTo(int SourceStateID, int goalStateID,
-                  std::vector<int> *SuccIDV, std::vector<int> *CostV);
-
-  /// @return True if two states meet the same condition. Used for R*.
-  bool AreEquivalent(int StateID1, int StateID2);
-
-  bool InitializeEnv(const char *sEnvFile);
-
-  bool InitializeMDPCfg(MDPConfig *MDPCfg);
-
-  void PrintEnv_Config(FILE *fOut);
-
-  void PrintState(int stateID, bool bVerbose, FILE *fOut);
-
-  void SetAllActionsandAllOutcomes(CMDPSTATE *state);
-
-  void SetAllPreds(CMDPSTATE *state);
-
-  int SizeofCreatedEnv();
-
-  /**
-   * @return True iff 'to' can be reached by an arbitrary footstep that
-   * can be performed by the robot from within 'from'. (This method is
-   * used to check whether the goal/start can be reached from within the
-   * current state.)
-   */
-  bool reachable(const PlanningState& from, const PlanningState& to);
-
-  void getPredsOfGridCells(const std::vector<State>& changed_states,
-                           std::vector<int>* pred_ids);
-
-  void getSuccsOfGridCells(const std::vector<State>& changed_states,
-                           std::vector<int>* succ_ids);
-
-  /**
-   * @brief Update the heuristic values (e.g. after the map has changed).
-   * The environment takes care that the update is only done when it is
-   * necessary.
-   */
-  void updateHeuristicValues();
-
-  /// Used to scale continuous values in meter to discrete values in mm.
-  static const int cvMmScale = 1000;
-
-protected:
-  /**
-   * @return The costs (in mm, truncated as int) to reach the
-   * planning state ToStateID from within planning state FromStateID.
-   */
-  int GetFromToHeuristic(const PlanningState& from, const PlanningState& to);
-
-  /// @return The step cost for reaching 'b' from within 'a'.
-  int  stepCost(const PlanningState& a, const PlanningState& b);
-
-  /**
-   * @return True iff the foot in 's' is colliding with an obstacle.
-   */
-  bool occupied(const PlanningState& s);
-
-  void GetRandomNeighs(const PlanningState* currentState,
-                       std::vector<int>* NeighIDV,
-                       std::vector<int>* CLowV,
-                       int nNumofNeighs, int nDist_c, bool bSuccs);
-
-  void setStateArea(const PlanningState& left, const PlanningState& right);
-
-  /// Wrapper for FootstepPlannerEnvironment::createNewHashEntry(PlanningState).
-  const PlanningState* createNewHashEntry(const State& s);
-
-  /**
-   * @brief Creates a new planning state for 's' and inserts it into the
-   * maps (PlanningState::ivStateId2State,
-   * PlanningState::ivpStateHash2State)
-   *
-   * @return A pointer to the newly created PlanningState.
-   */
-  const PlanningState* createNewHashEntry(const PlanningState& s);
-
-  /// Wrapper for FootstepPlannerEnvironment::getHashEntry(PlanningState).
-  const PlanningState* getHashEntry(const State& s);
-
-  /**
-   * @return The pointer to the planning state 's' stored in
-   * FootstepPlannerEnvironment::ivpStateHash2State.
-   */
-  const PlanningState* getHashEntry(const PlanningState& s);
-
-  const PlanningState* createHashEntryIfNotExists(const PlanningState& s);
-
-  /**
-   * @return True iff 'goal' can be reached by an arbitrary footstep.
-   * (Used for forward planning.)
-   */
-  bool closeToGoal(const PlanningState& from);
-
-  /**
-   * @return True iff 'start' can be reached by an arbitrary footstep.
-   * (Used for backward planning.)
-   */
-  bool closeToStart(const PlanningState& from);
-
-  /// < operator for planning states.
-  struct less
-  {
-    bool operator ()(const PlanningState* a,
-                     const PlanningState* b) const;
-  };
-
-  /**
-   * @brief ID of the planning goal, i.e. dependent on the planning direction
-   * (forward/backward) this ID is used to map to the goal/start poses.
-   */
-  int ivIdPlanningGoal;
-
-  /// ID of the start pose of the left foot.
-  int ivIdStartFootLeft;
-  /// ID of the start pose of the right foot.
-  int ivIdStartFootRight;
-  /// ID of the goal pose of the left foot.
-  int ivIdGoalFootLeft;
-  /// ID of the goal pose of the right foot.
-  int ivIdGoalFootRight;
-
-  std::vector<int> ivStateArea;
-
-  /**
-   * @brief Maps from an ID to the corresponding PlanningState. (Used in
-   * the SBPL to access a certain PlanningState.)
-   */
-  std::vector<const PlanningState*> ivStateId2State;
-
-  /**
-   * @brief Maps from a hash tag to a list of corresponding planning
-   * states. (Used in FootstepPlannerEnvironment to identify a certain
-   * PlanningState.)
-   */
-  std::vector<const PlanningState*>* ivpStateHash2State;
-
-  /// The set of footsteps used for the path planning.
-  const std::vector<Footstep>& ivFootstepSet;
-
-  /// The heuristic function used by the planner.
-  const boost::shared_ptr<Heuristic> ivHeuristicConstPtr;
-
-  /// Size of the foot in x direction.
-  const double ivFootsizeX;
-  /// Size of the foot in y direction.
-  const double ivFootsizeY;
-
-  /// Shift in x direction from the foot's center.
-  const double ivOriginFootShiftX;
-  /// Shift in y direction from the foot's center.
-  const double ivOriginFootShiftY;
-
-  /// The maximal translation in x direction (discretized in cell size).
-  const int ivMaxFootstepX;
-  /// The maximal translation in y direction (discretized in cell size).
-  const int ivMaxFootstepY;
-  /// The maximal rotation (discretized into bins).
-  int ivMaxFootstepTheta;
-
-  /// The minimal translation in x direction (discretized in cell size).
-  const int ivMaxInvFootstepX;
-  /// The minimal translation in y direction (discretized in cell size).
-  const int ivMaxInvFootstepY;
-  /// The minimal rotation (discretized into bins).
-  int ivMaxInvFootstepTheta;
-
-  /**
-   * @brief The costs for each step (discretized with the help of
-   * cvMmScale).
-   */
-  const int ivStepCost;
-
-  /**
-   * @brief Whether to check just the foot's inner circle (0), the hole
-   * outer circle (1) or exactly the foot's bounding box (2) for
-   * collision.
-   */
-  const int ivCollisionCheckAccuracy;
-
-  /**
-   * @brief Size of the hash table storing the planning states expanded
-   * during the search. (Also referred to by max_hash_size.)
-   */
-  const int ivHashTableSize;
-
-  /// The size of each grid cell used to discretize the robot positions.
-  const double ivCellSize;
-  /// The number of bins used to discretize the robot orientations.
-  const int ivNumAngleBins;
-
-  /// Whether to use forward search (1) or backward search (0).
-  const bool ivForwardSearch;
-
-  double ivMaxStepWidth;
-
-  /// number of random neighbors for R*
-  const int ivNumRandomNodes;
-  /// distance of random neighbors for R* (discretized in cells)
-  const int ivRandomNodeDist;
-
-  /**
-   * Scaling factor of heuristic, in case it underestimates by a constant
-   * factor.
-   */
-  double ivHeuristicScale;
-
-  /// Indicates if heuristic has to be updated.
-  bool ivHeuristicExpired;
-
-  /// Pointer to the map.
-  boost::shared_ptr<gridmap_2d::GridMap2D> ivMapPtr;
-
-  exp_states_2d_t ivExpandedStates;
-  exp_states_t ivRandomStates;  ///< random intermediate states for R*
-  size_t ivNumExpandedStates;
-
-  bool* ivpStepRange;
-};
-}
-
-#endif  // FOOTSTEP_PLANNER_FOOTSTEPPLANNERENVIRONMENT_H_
diff --git a/humanoid_navigation-for-git/footstep_planner/include/footstep_planner/FootstepPlannerNode.h b/humanoid_navigation-for-git/footstep_planner/include/footstep_planner/FootstepPlannerNode.h
deleted file mode 100644
index cc3e4b7..0000000
--- a/humanoid_navigation-for-git/footstep_planner/include/footstep_planner/FootstepPlannerNode.h
+++ /dev/null
@@ -1,56 +0,0 @@
-/*
- * A footstep planner for humanoid robots
- *
- * Copyright 2010-2011 Johannes Garimort, Armin Hornung, University of Freiburg
- * http://www.ros.org/wiki/footstep_planner
- *
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, version 3.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-#ifndef FOOTSTEP_PLANNER_FOOTSTEPPLANNERNODE_H_
-#define FOOTSTEP_PLANNER_FOOTSTEPPLANNERNODE_H_
-
-
-#include <ros/ros.h>
-
-#include <geometry_msgs/PoseStamped.h>
-#include <geometry_msgs/PoseWithCovarianceStamped.h>
-#include <footstep_planner/FootstepPlanner.h>
-
-
-namespace footstep_planner
-{
-/**
- * @brief Wrapper class for FootstepPlanner, providing callbacks for
- * the node functionality.
- */
-class FootstepPlannerNode
-{
-public:
-  FootstepPlannerNode();
-  virtual ~FootstepPlannerNode();
-
-protected:
-  FootstepPlanner ivFootstepPlanner;
-
-  ros::Subscriber ivGoalPoseSub;
-  ros::Subscriber ivGridMapSub;
-  ros::Subscriber ivStartPoseSub;
-  ros::Subscriber ivRobotPoseSub;
-
-  ros::ServiceServer ivFootstepPlanService;
-  ros::ServiceServer ivFootstepPlanFeetService;
-};
-}
-#endif  // FOOTSTEP_PLANNER_FOOTSTEPPLANNERNODE_H_
diff --git a/humanoid_navigation-for-git/footstep_planner/include/footstep_planner/Heuristic.h b/humanoid_navigation-for-git/footstep_planner/include/footstep_planner/Heuristic.h
deleted file mode 100644
index 99d47df..0000000
--- a/humanoid_navigation-for-git/footstep_planner/include/footstep_planner/Heuristic.h
+++ /dev/null
@@ -1,102 +0,0 @@
-/*
- * A footstep planner for humanoid robots
- *
- * Copyright 2010-2011 Johannes Garimort, Armin Hornung, University of Freiburg
- * http://www.ros.org/wiki/footstep_planner
- *
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, version 3.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-#ifndef FOOTSTEP_PLANNER_HEURISTIC_H_
-#define FOOTSTEP_PLANNER_HEURISTIC_H_
-
-#include <footstep_planner/helper.h>
-#include <footstep_planner/PlanningState.h>
-
-
-namespace footstep_planner
-{
-/**
- * @brief An abstract super class providing methods necessary to be used as
- * heuristic function within the FootstepPlanner.
- */
-class Heuristic
-{
-public:
-  enum HeuristicType { EUCLIDEAN=0, EUCLIDEAN_STEPCOST=1, PATH_COST=2 };
-
-  Heuristic(double cell_size, int num_angle_bins, HeuristicType type);
-  virtual ~Heuristic();
-
-  /**
-   * @return The heuristically determined path costs to get from
-   * state 'from' to state 'to' where 'to' is supposed to be the goal of
-   * the planning task. (Costs are in meter.)
-   */
-  virtual double getHValue(const PlanningState& from,
-                           const PlanningState& to) const = 0;
-
-  HeuristicType getHeuristicType() const { return ivHeuristicType; }
-
-protected:
-  double ivCellSize;
-  int    ivNumAngleBins;
-
-  const HeuristicType ivHeuristicType;
-};
-
-
-/**
- * @brief Determining the heuristic value by the euclidean distance between
- * two states.
- */
-class EuclideanHeuristic : public Heuristic
-{
-public:
-  EuclideanHeuristic(double cell_size, int num_angle_bins);
-  virtual ~EuclideanHeuristic();
-
-  virtual double getHValue(const PlanningState& from,
-                           const PlanningState& to) const;
-};
-
-
-/**
- * @brief Determining the heuristic value by the euclidean distance between
- * two states, the expected step costs to get from one state to the other
- * and the difference between the orientation of the two states multiplied
- * by some cost factor. (NOTE: choosing this angular difference cost might
- * overestimate the heuristic value.)
- */
-class EuclStepCostHeuristic : public Heuristic
-{
-
-public:
-  EuclStepCostHeuristic(double cell_size, int num_angle_bins,
-                        double step_cost, double diff_angle_cost,
-                        double max_step_width);
-  virtual ~EuclStepCostHeuristic();
-
-  virtual double getHValue(const PlanningState& from,
-                           const PlanningState& to) const;
-
-private:
-  const double ivStepCost;
-  const double ivDiffAngleCost;
-
-  /// longest step width
-  const double ivMaxStepWidth;
-};
-}
-#endif  // FOOTSTEP_PLANNER_HEURISTIC_H_
diff --git a/humanoid_navigation-for-git/footstep_planner/include/footstep_planner/PathCostHeuristic.h b/humanoid_navigation-for-git/footstep_planner/include/footstep_planner/PathCostHeuristic.h
deleted file mode 100644
index 5ffc8f0..0000000
--- a/humanoid_navigation-for-git/footstep_planner/include/footstep_planner/PathCostHeuristic.h
+++ /dev/null
@@ -1,89 +0,0 @@
-/*
- * A footstep planner for humanoid robots
- *
- * Copyright 2010-2011 Johannes Garimort, Armin Hornung, University of Freiburg
- * http://www.ros.org/wiki/footstep_planner
- *
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, version 3.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-#ifndef FOOTSTEP_PLANNER_PATHCOSTHEURISTIC_H_
-#define FOOTSTEP_PLANNER_PATHCOSTHEURISTIC_H_
-
-#include <footstep_planner/Heuristic.h>
-#include <gridmap_2d/GridMap2D.h>
-#include <sbpl/headers.h>
-
-
-namespace footstep_planner
-{
-/**
- * @brief Determining the heuristic value by calculating a 2D path from each
- * grid cell of the map to the goal and using the path length as expected
- * distance.
- *
- * The heuristic value consists of the following factors:
- *
- *  + The expected distance retreived from the 2D path.
- *
- *  + The expected path costs.
- *
- *  + The difference between the orientation of the two states multiplied
- *    by some cost factor.
- */
-class PathCostHeuristic : public Heuristic
-{
-public:
-  PathCostHeuristic(double cell_size, int num_angle_bins,
-                    double step_cost, double diff_angle_cost,
-                    double max_step_width, double inflation_radius);
-  virtual ~PathCostHeuristic();
-
-  /**
-   * @return The estimated costs needed to reach the state 'to' from within the
-   * current state.
-   */
-  virtual double getHValue(const PlanningState& current,
-                           const PlanningState& to) const;
-
-  /**
-   * @brief Calculates for each grid cell of the map a 2D path to the
-   * cell (to.x, to.y).
-   * For forward planning 'to' is supposed to be the goal state, for backward
-   * planning 'to' is supposed to be the start state.
-   */
-  bool calculateDistances(const PlanningState& from, const PlanningState& to);
-
-  void updateMap(gridmap_2d::GridMap2DPtr map);
-
-private:
-  static const int cvObstacleThreshold = 200;
-
-  unsigned char** ivpGrid;
-
-  double ivStepCost;
-  double ivDiffAngleCost;
-  double ivMaxStepWidth;
-  double ivInflationRadius;
-
-  int ivGoalX;
-  int ivGoalY;
-
-  gridmap_2d::GridMap2DPtr ivMapPtr;
-  boost::shared_ptr<SBPL2DGridSearch> ivGridSearchPtr;
-
-  void resetGrid();
-};
-}
-#endif  // FOOTSTEP_PLANNER_PATHCOSTHEURISTIC_H_
diff --git a/humanoid_navigation-for-git/footstep_planner/include/footstep_planner/PlanningState.h b/humanoid_navigation-for-git/footstep_planner/include/footstep_planner/PlanningState.h
deleted file mode 100755
index 1a3edcc..0000000
--- a/humanoid_navigation-for-git/footstep_planner/include/footstep_planner/PlanningState.h
+++ /dev/null
@@ -1,136 +0,0 @@
-/*
- * A footstep planner for humanoid robots
- *
- * Copyright 2010-2011 Johannes Garimort, Armin Hornung, University of Freiburg
- * http://www.ros.org/wiki/footstep_planner
- *
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, version 3.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-#ifndef FOOTSTEP_PLANNER_PLANNINGSTATE_H_
-#define FOOTSTEP_PLANNER_PLANNINGSTATE_H_
-
-#include <footstep_planner/helper.h>
-#include <footstep_planner/State.h>
-
-
-namespace footstep_planner
-{
-/**
- * @brief A class representing the robot's pose (i.e. position and
- * orientation) in the underlying SBPL. More precisely a planning state
- * is a discrete representation of the robot's supporting leg.
- *
- * Since SBPL is working on discretized states the planning states are also
- * discretized positions and orientations. This is done by fitting the
- * positions into a grid and the orientations into bins.
- * (NOTE: the resolution of the planning cells is likely to differ from the
- * resolution of the grid map.)
- *
- * The SBPL can access each planning state via an unique ID. Furthermore
- * each planning state can be identified by an (ununique) hash tag generated
- * from its position, location and supporting leg.
- */
-class PlanningState
-{
-public:
-  /**
-   * @brief x, y and theta represent the global (continuous) position and
-   * orientation of the robot's support leg.
-   *
-   * @param leg The supporting leg.
-   * @param cell_size The size of each grid cell discretizing the
-   * position.
-   * @param num_angle_bins The number of bins discretizing the
-   * orientation.
-   * @param max_hash_size
-   */
-  PlanningState(double x, double y, double theta, Leg leg,
-                double cell_size, int num_angle_bins, int max_hash_size);
-
-  /**
-   * @brief x, y and theta as discrete bin values (as used internally by
-   * the planner).
-   */
-  PlanningState(int x, int y, int theta, Leg leg, int max_hash_size);
-
-  /// Create a (discrete) PlanningState from a (continuous) State.
-  PlanningState(const State& s, double cell_size, int num_angle_bins,
-                int max_hash_size);
-
-  /// Copy constructor.
-  PlanningState(const PlanningState& s);
-
-  ~PlanningState();
-
-  /**
-   * @brief Compare two states on equality of x, y, theta, leg. Makes
-   * first use of the non-unique hash tag to rule out unequal states.
-   */
-  bool operator ==(const PlanningState& s2) const;
-
-  /**
-   * @brief Compare two states on inequality of x, y, theta, leg by
-   * comparing the hash tags of the states.
-   */
-  bool operator !=(const PlanningState& s2) const;
-
-  /**
-   * @brief Used to attach such an unique ID to the planning state. (This
-   * cannot be done in the constructor since often such an ID is not known
-   * when the planning state is created.)
-   */
-  void setId(unsigned int id) { ivId = id; }
-
-  Leg getLeg() const { return ivLeg; }
-  int getTheta() const { return ivTheta; }
-  int getX() const { return ivX; }
-  int getY() const { return ivY; }
-
-  /**
-   * @return The (non-unique) hash tag used to identify the planning
-   * state.
-   */
-  unsigned int getHashTag() const { return ivHashTag; }
-
-  /**
-   * @return The (unique) ID used within the SBPL to access the
-   * planning state.
-   */
-  int getId() const { return ivId; }
-
-  /// @brief Computes the continuous State the PlanningState represents.
-  State getState(double cell_size, int num_angle_bins) const;
-
-private:
-  /// Value of the grid cell the position's x value is fitted into.
-  int ivX;
-  /// Value of the grid cell the position's y value is fitted into.
-  int ivY;
-  /// Number of the bin the orientation is fitted into.
-  int ivTheta;
-  /// The supporting leg.
-  Leg	ivLeg;
-
-  /// The (unique) ID of the planning state.
-  int ivId;
-
-  /**
-   * The (non-unique) hash tag of the planning state. Different hash tags
-   * imply that the states differ in x, y, theta, leg.
-   */
-  unsigned int ivHashTag;
-};
-}
-#endif  // FOOTSTEP_PLANNER_PLANNINGSTATE_H_
diff --git a/humanoid_navigation-for-git/footstep_planner/include/footstep_planner/PlanningStateChangeQuery.h b/humanoid_navigation-for-git/footstep_planner/include/footstep_planner/PlanningStateChangeQuery.h
deleted file mode 100644
index 44701a6..0000000
--- a/humanoid_navigation-for-git/footstep_planner/include/footstep_planner/PlanningStateChangeQuery.h
+++ /dev/null
@@ -1,46 +0,0 @@
-/*
- * A footstep planner for humanoid robots
- *
- * Copyright 2010-2011 Johannes Garimort, Armin Hornung, University of Freiburg
- * http://www.ros.org/wiki/footstep_planner
- *
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, version 3.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-#ifndef FOOTSTEP_PLANNER_PLANNINGSTATECHANGEQUERY_H_
-#define FOOTSTEP_PLANNER_PLANNINGSTATECHANGEQUERY_H_
-
-
-#include <vector>
-
-#include <sbpl/headers.h>
-
-
-namespace footstep_planner
-{
-class PlanningStateChangeQuery : public StateChangeQuery
-{
-public:
-  PlanningStateChangeQuery(const std::vector<int>& neighbors);
-  virtual ~PlanningStateChangeQuery();
-
-  const std::vector<int>* getPredecessors() const;
-  const std::vector<int>* getSuccessors() const;
-
-private:
-  const std::vector<int>& ivNeighbors;
-};
-}
-
-#endif  // FOOTSTEP_PLANNER_PLANNINGSTATECHANGEQUERY_H_
diff --git a/humanoid_navigation-for-git/footstep_planner/include/footstep_planner/State.h b/humanoid_navigation-for-git/footstep_planner/include/footstep_planner/State.h
deleted file mode 100644
index 4559d7f..0000000
--- a/humanoid_navigation-for-git/footstep_planner/include/footstep_planner/State.h
+++ /dev/null
@@ -1,74 +0,0 @@
-/*
- * A footstep planner for humanoid robots
- *
- * Copyright 2010-2011 Johannes Garimort, Armin Hornung, University of Freiburg
- * http://www.ros.org/wiki/footstep_planner
- *
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, version 3.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-#ifndef FOOTSTEP_PLANNER_STATE_H_
-#define FOOTSTEP_PLANNER_STATE_H_
-
-#include <footstep_planner/helper.h>
-
-
-namespace footstep_planner
-{
-/**
- * @brief A class representing the robot's pose (i.e. position and
- * orientation) in the (continuous) world view. More precisely a state
- * points to the robot's supporting leg.
- */
-class State
-{
-public:
-  State();
-  State(double x, double y, double theta, Leg leg);
-  ~State();
-
-  void setX(double x) { ivX = x; }
-  void setY(double y) { ivY = y; }
-  void setTheta(double theta) { ivTheta = theta; }
-  void setLeg(Leg leg) { ivLeg = leg; }
-
-  double getX() const { return ivX; }
-  double getY() const { return ivY; };
-  double getTheta() const { return ivTheta; }
-  Leg getLeg() const { return ivLeg; }
-
-  /**
-   * @brief Compare two states on equality of x, y, theta, leg upon
-   * a certain degree of float precision.
-   */
-  bool operator ==(const State& s2) const;
-
-  /**
-   * @brief Inequality operator for two states (negates the equality
-   * operator).
-   */
-  bool operator !=(const State& s2) const;
-
-private:
-  /// The robot's position in x direction.
-  double ivX;
-  /// The robot's position in y direction.
-  double ivY;
-  /// The robot's orientation.
-  double ivTheta;
-  /// The robot's supporting leg.
-  Leg ivLeg;
-};
-}
-#endif /* FOOTSTEP_PLANNER_STATE_H_ */
diff --git a/humanoid_navigation-for-git/footstep_planner/include/footstep_planner/helper.h b/humanoid_navigation-for-git/footstep_planner/include/footstep_planner/helper.h
deleted file mode 100644
index 841e1c3..0000000
--- a/humanoid_navigation-for-git/footstep_planner/include/footstep_planner/helper.h
+++ /dev/null
@@ -1,215 +0,0 @@
-/*
- * A footstep planner for humanoid robots
- *
- * Copyright 2010-2011 Johannes Garimort, Armin Hornung, University of Freiburg
- * http://www.ros.org/wiki/footstep_planner
- *
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, version 3.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-#ifndef FOOTSTEP_PLANNER_HELPER_H_
-#define FOOTSTEP_PLANNER_HELPER_H_
-
-#define DEBUG_HASH 0
-#define DEBUG_TIME 0
-
-
-#include <gridmap_2d/GridMap2D.h>
-#include <angles/angles.h>
-#include <tf/tf.h>
-
-#include <math.h>
-
-
-namespace footstep_planner
-{
-static const double TWO_PI = 2 * M_PI;
-
-static const double FLOAT_CMP_THR = 0.0001;
-
-enum Leg { RIGHT=0, LEFT=1, NOLEG=2 };
-
-
-/**
- * @return Squared euclidean distance between two integer coordinates
- * (cells).
- */
-inline double euclidean_distance_sq(int x1, int y1, int x2, int y2)
-{
-  // note: do *not* use pow() to square!
-  return (x1 - x2)*(x1 - x2) + (y1 - y2)*(y1 - y2);
-}
-
-
-/// @return Euclidean distance between two integer coordinates (cells).
-inline double euclidean_distance(int x1, int y1, int x2, int y2)
-{
-  return sqrt(double(euclidean_distance_sq(x1, y1, x2, y2)));
-}
-
-
-/// @return Euclidean distance between two coordinates.
-inline double euclidean_distance(double x1, double y1, double x2, double y2)
-{
-  return sqrt(euclidean_distance_sq(x1, y1, x2, y2));
-}
-
-
-/// @return Squared euclidean distance between two coordinates.
-inline double euclidean_distance_sq(double x1, double y1, double x2,
-                                    double y2)
-{
-  // note: do *not* use pow() to square!
-  return (x1 - x2)*(x1 - x2) + (y1 - y2)*(y1 - y2);
-}
-
-
-/// @return The distance of two neighbored cell.
-inline double grid_cost(int x1, int y1, int x2, int y2, float cell_size)
-{
-  int x = abs(x1 - x2);
-  int y = abs(y1 - y2);
-
-  if (x + y > 1)
-    return M_SQRT2 * cell_size;
-  else
-    return cell_size;
-}
-
-
-/// @brief Discretize a (continuous) angle into a bin.
-inline int angle_state_2_cell(double angle, int angle_bin_num)
-{
-  double bin_size_half = M_PI / angle_bin_num;
-  return int(angles::normalize_angle_positive(angle + bin_size_half) /
-             TWO_PI * angle_bin_num);
-}
-
-
-/// @brief Calculate the respective (continuous) angle for a bin.
-inline double angle_cell_2_state(int angle, int angle_bin_num)
-{
-  double bin_size = TWO_PI / angle_bin_num;
-  return angle * bin_size;
-}
-
-
-/**
- * @brief Discretize a (continuous) state value into a cell. (Should be
- * used to discretize a State to a PlanningState.)
- */
-inline int state_2_cell(float value, float cell_size)
-{
-  return value >= 0 ? int(value / cell_size) : int(value / cell_size) - 1;
-}
-
-
-/**
- * @brief Calculate the respective (continuous) state value for a cell.
- * (Should be used to get a State from a discretized PlanningState.)
- */
-inline double cell_2_state(int value, double cell_size)
-{
-  return (double(value) + 0.5) * cell_size;
-}
-
-
-/// @brief Discretize a (continuous) value into cell size.
-// TODO: check consistency for negative values
-inline int disc_val(double length, double cell_size)
-{
-  return int(floor((length / cell_size) + 0.5));
-}
-
-
-/**
- * @brief Calculates the continuous value for a length discretized in cell
- * size.
- */
-// TODO: check consistency for negative values
-inline double cont_val(int length, double cell_size)
-{
-  return double(length * cell_size);
-}
-
-
-/// @return The hash value of the key.
-inline unsigned int int_hash(int key)
-{
-  key += (key << 12);
-  key ^= (key >> 22);
-  key += (key << 4);
-  key ^= (key >> 9);
-  key += (key << 10);
-  key ^= (key >> 2);
-  key += (key << 7);
-  key ^= (key >> 12);
-  return key;
-}
-
-
-/**
- * @return The hash tag for a PlanningState (represented by x, y, theta and
- * leg).
- */
-inline unsigned int calc_hash_tag(int x, int y, int theta, int leg,
-                                  int max_hash_size)
-{
-  return int_hash((int_hash(x) << 3) + (int_hash(y) << 2) +
-                  (int_hash(theta) << 1) + (int_hash(leg)))
-      % max_hash_size;
-}
-
-
-/// @brief Rounding half towards zero.
-inline int round(double r)
-{
-  return (r > 0.0) ? floor(r + 0.5) : ceil(r - 0.5);
-}
-
-
-/**
- * @brief Checks if a footstep (represented by its center and orientation)
- * collides with an obstacle. The check is done by recursively testing if
- * either the circumcircle of the foot, the inner circle of the foot or the
- * area in between has an appropriate distance to the nearest obstacle.
- *
- * @param x Global position of the foot in x direction.
- * @param y Global position of the foot in y direction.
- * @param theta Global orientation of the foot.
- * @param height Size of the foot in x direction.
- * @param width Size of the foot in y direction.
- * @param accuracy (0) circumcircle of the foot; (1) incircle of the foot;
- * (2) circumcircle and incircle recursivly checked for the whole foot
- * @param distance_map Contains distance information to the nearest
- * obstacle.
- *
- * @return True if the footstep collides with an obstacle.
- */
-bool collision_check(double x, double y, double theta,
-                     double height, double width, int accuracy,
-                     const gridmap_2d::GridMap2D& distance_map);
-
-
-/**
- * @brief Crossing number method to determine whether a point lies within a
- * polygon or not.
- * @param edges (x,y)-points defining the polygon.
- *
- * Check http://geomalgorithms.com/a03-_inclusion.html for further details.
- */
-bool pointWithinPolygon(int x, int y,
-                        const std::vector<std::pair<int, int> >& edges);
-}
-#endif  /* FOOTSTEP_PLANNER_HELPER_H_ */
diff --git a/humanoid_navigation-for-git/footstep_planner/launch/fake_loc_from_odom.launch b/humanoid_navigation-for-git/footstep_planner/launch/fake_loc_from_odom.launch
deleted file mode 100644
index c37a34a..0000000
--- a/humanoid_navigation-for-git/footstep_planner/launch/fake_loc_from_odom.launch
+++ /dev/null
@@ -1,12 +0,0 @@
-<launch>
-  <node pkg="fake_localization" type="fake_localization" name="fake_localization">
-    <remap from="base_pose_ground_truth" to="odom" />
-    <remap from="initialpose" to="nao_corrected_initialpose" />
-    <param name="base_frame_id" value="torso" />
-    <param name="delta_x" value="0.0" />
-    <param name="delta_y" value="0.0" />
-    <param name="delta_yaw" value="0.0" />
-  </node>
-
-  <node pkg="footstep_planner" type="corrected_initialpose.py" name="corrected_initialpose" />
-</launch>
diff --git a/humanoid_navigation-for-git/footstep_planner/launch/footstep_navigation_nao.launch b/humanoid_navigation-for-git/footstep_planner/launch/footstep_navigation_nao.launch
deleted file mode 100644
index 84dab4e..0000000
--- a/humanoid_navigation-for-git/footstep_planner/launch/footstep_navigation_nao.launch
+++ /dev/null
@@ -1,10 +0,0 @@
-<launch>
-
-  <node name="footstep_navigation" pkg="footstep_planner" type="footstep_navigation_node" >
-    <rosparam file="$(find footstep_planner)/config/planning_params.yaml" command="load" />
-    <rosparam file="$(find footstep_planner)/config/navigation_params.yaml" command="load" />
-    <rosparam file="$(find footstep_planner)/config/planning_params_nao.yaml" command="load" />
-    <rosparam file="$(find footstep_planner)/config/footsteps_nao_navigation.yaml" command="load" />
-  </node>
-
-</launch>
diff --git a/humanoid_navigation-for-git/footstep_planner/launch/footstep_navigation_nao_fake_loc.launch b/humanoid_navigation-for-git/footstep_planner/launch/footstep_navigation_nao_fake_loc.launch
deleted file mode 100644
index 78287d1..0000000
--- a/humanoid_navigation-for-git/footstep_planner/launch/footstep_navigation_nao_fake_loc.launch
+++ /dev/null
@@ -1,12 +0,0 @@
-<launch>
-  # naoqi should be running right now
-
-  <include file="$(find nao_driver)/launch/nao_footsteps.launch" />
-
-  <include file="$(find nao_remote)/launch/nao_remote.launch" />
-
-  <include file="$(find footstep_planner)/launch/fake_loc_from_odom.launch" />
-  <node name="map_server" pkg="map_server" type="map_server" args="$(find footstep_planner)/maps/sample.yaml" />
-  <include file="$(find footstep_planner)/launch/rviz_footstep_navigation.launch" />
-  <include file="$(find footstep_planner)/launch/footstep_navigation_nao.launch" />
-</launch>
diff --git a/humanoid_navigation-for-git/footstep_planner/launch/footstep_navigation_nao_true_loc.launch b/humanoid_navigation-for-git/footstep_planner/launch/footstep_navigation_nao_true_loc.launch
deleted file mode 100644
index 437ebde..0000000
--- a/humanoid_navigation-for-git/footstep_planner/launch/footstep_navigation_nao_true_loc.launch
+++ /dev/null
@@ -1,12 +0,0 @@
-<launch>
-  # webots+naoqi should be running right now
-
-  <include file="$(find nao_driver)/launch/nao_footsteps.launch" />
-
-  <include file="$(find nao_remote)/launch/nao_remote.launch" />
-
-  <include file="$(find footstep_planner)/launch/true_loc_from_odom.launch" />
-  <node name="map_server" pkg="map_server" type="map_server" args="$(find footstep_planner)/maps/empty.yaml" />
-  <include file="$(find footstep_planner)/launch/rviz_footstep_navigation.launch" />
-  <include file="$(find footstep_planner)/launch/footstep_navigation_nao.launch" />
-</launch>
diff --git a/humanoid_navigation-for-git/footstep_planner/launch/footstep_planner.launch b/humanoid_navigation-for-git/footstep_planner/launch/footstep_planner.launch
deleted file mode 100644
index 76f9d86..0000000
--- a/humanoid_navigation-for-git/footstep_planner/launch/footstep_planner.launch
+++ /dev/null
@@ -1,9 +0,0 @@
-<launch>
-
-  <node name="footstep_planner" pkg="footstep_planner" type="footstep_planner_node" >
-    <rosparam file="$(find footstep_planner)/config/planning_params.yaml" command="load" />
-    <rosparam file="$(find footstep_planner)/config/planning_params_asimo.yaml" command="load" />
-    <rosparam file="$(find footstep_planner)/config/footsteps_asimo.yaml" command="load" />
-  </node>
-
-</launch>
diff --git a/humanoid_navigation-for-git/footstep_planner/launch/footstep_planner_complete.launch b/humanoid_navigation-for-git/footstep_planner/launch/footstep_planner_complete.launch
deleted file mode 100644
index d85d534..0000000
--- a/humanoid_navigation-for-git/footstep_planner/launch/footstep_planner_complete.launch
+++ /dev/null
@@ -1,7 +0,0 @@
-<launch>
-
-  <node name="map_server" pkg="map_server" type="map_server" args="$(find footstep_planner)/maps/sample.yaml" />
-  <include file="$(find footstep_planner)/launch/rviz_footstep_planning.launch" />  
-  <include file="$(find footstep_planner)/launch/footstep_planner.launch" />
-
-</launch>
diff --git a/humanoid_navigation-for-git/footstep_planner/launch/footstep_planner_nao.launch b/humanoid_navigation-for-git/footstep_planner/launch/footstep_planner_nao.launch
deleted file mode 100644
index 0df1f9d..0000000
--- a/humanoid_navigation-for-git/footstep_planner/launch/footstep_planner_nao.launch
+++ /dev/null
@@ -1,9 +0,0 @@
-<launch>
-
-  <node name="footstep_planner" pkg="footstep_planner" type="footstep_planner_node" >
-    <rosparam file="$(find footstep_planner)/config/planning_params.yaml" command="load" />
-    <rosparam file="$(find footstep_planner)/config/planning_params_nao.yaml" command="load" />
-    <rosparam file="$(find footstep_planner)/config/footsteps_nao.yaml" command="load" />
-  </node>
-
-</launch>
diff --git a/humanoid_navigation-for-git/footstep_planner/launch/footstep_planner_rstar_complete.launch b/humanoid_navigation-for-git/footstep_planner/launch/footstep_planner_rstar_complete.launch
deleted file mode 100644
index e1080eb..0000000
--- a/humanoid_navigation-for-git/footstep_planner/launch/footstep_planner_rstar_complete.launch
+++ /dev/null
@@ -1,16 +0,0 @@
-<launch>
-
-  <node name="map_server" pkg="map_server" type="map_server" args="$(find footstep_planner)/maps/sample.yaml" />
-  <include file="$(find footstep_planner)/launch/rviz_footstep_planning.launch" />  
-  <include file="$(find footstep_planner)/launch/footstep_planner.launch" />
-  
-  <param name="footstep_planner/heuristic_type" value="EuclideanHeuristic"/>
-  <param name="footstep_planner/planner_type" value="RSTARPlanner"/>
-  <param name="footstep_planner/forward_search" value="True"/>
-  <param name="footstep_planner/allocated_time" value="5"/>
-  <param name="footstep_planner/initial_epsilon" value="10"/>
-  <param name="footstep_planner/num_random_nodes" value="20"/>
-  <param name="footstep_planner/random_node_dist" value="1.5"/>
-  
-
-</launch>
diff --git a/humanoid_navigation-for-git/footstep_planner/launch/rviz_footstep_navigation.launch b/humanoid_navigation-for-git/footstep_planner/launch/rviz_footstep_navigation.launch
deleted file mode 100644
index fb8ec65..0000000
--- a/humanoid_navigation-for-git/footstep_planner/launch/rviz_footstep_navigation.launch
+++ /dev/null
@@ -1,3 +0,0 @@
-<launch>
-  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find footstep_planner)/config/rviz_footstep_navigation.vcg" />
-</launch>
diff --git a/humanoid_navigation-for-git/footstep_planner/launch/rviz_footstep_planning.launch b/humanoid_navigation-for-git/footstep_planner/launch/rviz_footstep_planning.launch
deleted file mode 100644
index 5cd24eb..0000000
--- a/humanoid_navigation-for-git/footstep_planner/launch/rviz_footstep_planning.launch
+++ /dev/null
@@ -1,3 +0,0 @@
-<launch>
-  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find footstep_planner)/config/rviz_footstep_planning.rviz" /> 
-</launch>
diff --git a/humanoid_navigation-for-git/footstep_planner/launch/rviz_footstep_planning_fuerte.launch b/humanoid_navigation-for-git/footstep_planner/launch/rviz_footstep_planning_fuerte.launch
deleted file mode 100644
index 3019c5f..0000000
--- a/humanoid_navigation-for-git/footstep_planner/launch/rviz_footstep_planning_fuerte.launch
+++ /dev/null
@@ -1,3 +0,0 @@
-<launch>
-  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find footstep_planner)/config/rviz_footstep_planning_fuerte.vcg" />
-</launch>
diff --git a/humanoid_navigation-for-git/footstep_planner/launch/true_loc_from_odom.launch b/humanoid_navigation-for-git/footstep_planner/launch/true_loc_from_odom.launch
deleted file mode 100644
index 3b3e916..0000000
--- a/humanoid_navigation-for-git/footstep_planner/launch/true_loc_from_odom.launch
+++ /dev/null
@@ -1,10 +0,0 @@
-<launch>
-  <node pkg="fake_localization" type="fake_localization" name="fake_localization">
-    <remap from="base_pose_ground_truth" to="true_odom" />
-    <remap from="initialpose" to="true_pose" />
-    <param name="base_frame_id" value="torso" />
-    <param name="delta_x" value="0.0" />
-    <param name="delta_y" value="0.0" />
-    <param name="delta_yaw" value="0.0" />
-  </node>
-</launch>
diff --git a/humanoid_navigation-for-git/footstep_planner/mainpage.dox b/humanoid_navigation-for-git/footstep_planner/mainpage.dox
deleted file mode 100644
index a0efefb..0000000
--- a/humanoid_navigation-for-git/footstep_planner/mainpage.dox
+++ /dev/null
@@ -1,29 +0,0 @@
-/**
-\mainpage
-\htmlinclude manifest.html
-
-\b footstep_planner is a package to provide footstep planning for humanoid or biped robots. 
-
-<!-- 
-Provide an overview of your package.
--->
-
-
-\section codeapi Code API
-
-The main functionality is in the FootstepPlanner class, which is wrapped by 
-FootstepPlannerNode for stand-alone planning in footstep_planner.cpp
-
-<!--
-Provide links to specific auto-generated API documentation within your
-package that is of particular interest to a reader. Doxygen will
-document pretty much every part of your code, so do your best here to
-point the reader to the actual API.
-
-If your codebase is fairly large or has different sets of APIs, you
-should use the doxygen 'group' tag to keep these APIs together. For
-example, the roscpp documentation has 'libros' group.
--->
-
-
-*/
diff --git a/humanoid_navigation-for-git/footstep_planner/maps/empty.gif b/humanoid_navigation-for-git/footstep_planner/maps/empty.gif
deleted file mode 100644
index bcdf32a..0000000
Binary files a/humanoid_navigation-for-git/footstep_planner/maps/empty.gif and /dev/null differ
diff --git a/humanoid_navigation-for-git/footstep_planner/maps/empty.yaml b/humanoid_navigation-for-git/footstep_planner/maps/empty.yaml
deleted file mode 100644
index 5e75c78..0000000
--- a/humanoid_navigation-for-git/footstep_planner/maps/empty.yaml
+++ /dev/null
@@ -1,6 +0,0 @@
-image: empty.gif
-resolution: 0.01
-origin: [-2.0, -2.0, 0.0]
-occupied_thresh: 0.5
-free_thresh: 0.1
-negate: 0
\ No newline at end of file
diff --git a/humanoid_navigation-for-git/footstep_planner/maps/nao_map.gif b/humanoid_navigation-for-git/footstep_planner/maps/nao_map.gif
deleted file mode 100644
index dbc39f0..0000000
Binary files a/humanoid_navigation-for-git/footstep_planner/maps/nao_map.gif and /dev/null differ
diff --git a/humanoid_navigation-for-git/footstep_planner/maps/nao_map.yaml b/humanoid_navigation-for-git/footstep_planner/maps/nao_map.yaml
deleted file mode 100644
index c6679f5..0000000
--- a/humanoid_navigation-for-git/footstep_planner/maps/nao_map.yaml
+++ /dev/null
@@ -1,6 +0,0 @@
-image: nao_map.gif
-resolution: 0.01
-origin: [0.0, 0.0, 0.0]
-occupied_thresh: 0.4
-free_thresh: 0.1
-negate: 0
diff --git a/humanoid_navigation-for-git/footstep_planner/maps/sample.gif b/humanoid_navigation-for-git/footstep_planner/maps/sample.gif
deleted file mode 100644
index 1617616..0000000
Binary files a/humanoid_navigation-for-git/footstep_planner/maps/sample.gif and /dev/null differ
diff --git a/humanoid_navigation-for-git/footstep_planner/maps/sample.yaml b/humanoid_navigation-for-git/footstep_planner/maps/sample.yaml
deleted file mode 100644
index 11bbb99..0000000
--- a/humanoid_navigation-for-git/footstep_planner/maps/sample.yaml
+++ /dev/null
@@ -1,6 +0,0 @@
-image: sample.gif
-resolution: 0.01
-origin: [0.0, 0.0, 0.0]
-occupied_thresh: 0.5
-free_thresh: 0.1
-negate: 0
diff --git a/humanoid_navigation-for-git/footstep_planner/maps/sample2.gif b/humanoid_navigation-for-git/footstep_planner/maps/sample2.gif
deleted file mode 100644
index 9d08c81..0000000
Binary files a/humanoid_navigation-for-git/footstep_planner/maps/sample2.gif and /dev/null differ
diff --git a/humanoid_navigation-for-git/footstep_planner/maps/sample2.yaml b/humanoid_navigation-for-git/footstep_planner/maps/sample2.yaml
deleted file mode 100644
index 2b1fa82..0000000
--- a/humanoid_navigation-for-git/footstep_planner/maps/sample2.yaml
+++ /dev/null
@@ -1,6 +0,0 @@
-image: sample2.gif
-resolution: 0.01
-origin: [0.0, 0.0, 0.0]
-occupied_thresh: 0.5
-free_thresh: 0.1
-negate: 0
\ No newline at end of file
diff --git a/humanoid_navigation-for-git/footstep_planner/package.xml b/humanoid_navigation-for-git/footstep_planner/package.xml
deleted file mode 100644
index 9a7ddfe..0000000
--- a/humanoid_navigation-for-git/footstep_planner/package.xml
+++ /dev/null
@@ -1,47 +0,0 @@
-<package>
-  <name>footstep_planner</name>
-  <version>0.4.1</version>
-  <description>
-
-     <p>A footstep planner for humanoid / biped robots. The planner builds on SBPL and has anytime as well as dynamic replanning capabilities. The supported planners are: ARA*, AD*, R*.</p>
-     <p>Details can be found in the following publications:</p>
-     <p><em>"Humanoid Navigation with Dynamic Footstep Plans"</em>
-     by J. Garimort, A. Hornung, and M. Bennewitz; published in 
-     Proc. of the IEEE International Conference on Robotics &amp; Automation (ICRA), 2011</p>
-     <p><em>Anytime Search-Based Footstep Planning with Suboptimality Bounds</em>
-     by A. Hornung, A. Dornbush, M. Likhachev, and M. Bennewitz; published in
-     Proc. of the IEEE-RAS International Conference on Humanoid
-     Robots (HUMANOIDS), 2012
-     </p>
-
-  </description>
-  <author>Johannes Garimort, Armin Hornung</author>
-  <maintainer email="HornungA@informatik.uni-freiburg.de">Armin Hornung</maintainer>
-  <maintainer email="aravindadp@gmail.com">Pramuditha Aravinda</maintainer>
-  <license>GPL 3</license>
-  <url>http://ros.org/wiki/footstep_planner</url>
-  
-  <build_depend>actionlib</build_depend>
-  <build_depend>angles</build_depend>
-  <build_depend>gridmap_2d</build_depend>
-  <build_depend>humanoid_nav_msgs</build_depend>
-  <build_depend>map_server</build_depend>
-  <build_depend>roscpp</build_depend>
-  <build_depend>rospy</build_depend>
-  <build_depend>sbpl</build_depend>
-  <build_depend>tf</build_depend>
-  <build_depend>visualization_msgs</build_depend>
-
-  <run_depend>actionlib</run_depend>
-  <run_depend>angles</run_depend>
-  <run_depend>gridmap_2d</run_depend>
-  <run_depend>humanoid_nav_msgs</run_depend>
-  <run_depend>map_server</run_depend>
-  <run_depend>roscpp</run_depend>
-  <run_depend>rospy</run_depend>
-  <run_depend>sbpl</run_depend>
-  <run_depend>tf</run_depend>
-  <run_depend>visualization_msgs</run_depend>
-
-  <buildtool_depend>catkin</buildtool_depend>
-</package>
diff --git a/humanoid_navigation-for-git/footstep_planner/scripts/corrected_initialpose.py b/humanoid_navigation-for-git/footstep_planner/scripts/corrected_initialpose.py
deleted file mode 100755
index 43b1541..0000000
--- a/humanoid_navigation-for-git/footstep_planner/scripts/corrected_initialpose.py
+++ /dev/null
@@ -1,34 +0,0 @@
-#!/usr/bin/env python
-
-# Maps the initialpose pointing to Nao's torso to a corrected pose with correct
-# height.
-#
-# Author: Johannes Garimort
-# License: BSD
-
-import roslib
-roslib.load_manifest('footstep_planner')
-import rospy
-import geometry_msgs.msg as geo_msgs
-
-
-def callback(pose, pub):
-    newpose = pose
-    newpose.pose.pose.position.z += 0.315
-    pub.publish(newpose)
-
-
-def listener():
-    rospy.init_node('corrected_initialpose')
-    pub = rospy.Publisher('nao_corrected_initialpose',
-                          geo_msgs.PoseWithCovarianceStamped)
-    rospy.Subscriber("initialpose", geo_msgs.PoseWithCovarianceStamped,
-                     callback, pub)
-    rospy.spin()
-
-
-if __name__ == '__main__':
-    try:
-        listener()
-    except rospy.ROSInterruptException:
-        pass
diff --git a/humanoid_navigation-for-git/footstep_planner/scripts/plan_footsteps.py b/humanoid_navigation-for-git/footstep_planner/scripts/plan_footsteps.py
deleted file mode 100755
index d3e8ab8..0000000
--- a/humanoid_navigation-for-git/footstep_planner/scripts/plan_footsteps.py
+++ /dev/null
@@ -1,78 +0,0 @@
-#!/usr/bin/env python
-
-#
-# A simple service client calling a running footstep_planner node.
-# Using this program you can request footstep plans from the command line.
-#
-# Author: Armin Hornung, University of Freiburg
-#
-# This is program is part of the ROS footstep planner:
-# http://www.ros.org/wiki/footstep_planner
-# License: GPL 3
-#
-
-import roslib
-from humanoid_nav_msgs.msg._StepTarget import StepTarget
-roslib.load_manifest('footstep_planner')
-import rospy
-
-from humanoid_nav_msgs.srv import *
-from geometry_msgs.msg import Pose2D
-
-import sys
-
-
-if __name__ == '__main__':
-    if len(sys.argv) != 7 and len(sys.argv) != 13:
-      sys.exit('\nUSAGE: %s <start> <goal>\n  where <start> and <goal> consist of "x y theta" in world coordinates\n\n' % sys.argv[0])
-
-    rospy.init_node('plan_footsteps')
-
-    if len(sys.argv) ==7:
-      planSrv = rospy.ServiceProxy("plan_footsteps", PlanFootsteps)
-      start = Pose2D()
-      goal = Pose2D()
-
-      start.x = float(sys.argv[1])
-      start.y = float(sys.argv[2])
-      start.theta = float(sys.argv[3])
-
-      goal.x = float(sys.argv[4])
-      goal.y = float(sys.argv[5])
-      goal.theta = float(sys.argv[6])
-
-      rospy.loginfo("Calling footstep planner service from (%f %f %f) to (%f %f %f)...",
-                    start.x, start.y, start.theta, goal.x, goal.y, goal.theta)
-      resp = planSrv(start, goal)
-    else:
-      planSrv = rospy.ServiceProxy("plan_footsteps_feet", PlanFootstepsBetweenFeet)
-      start_left = StepTarget()
-      start_right = StepTarget()
-      goal_left = StepTarget()
-      goal_right = StepTarget()
-
-      start_left.pose.x = float(sys.argv[1])
-      start_left.pose.y = float(sys.argv[2])
-      start_left.pose.theta = float(sys.argv[3])
-      start_right.pose.x = float(sys.argv[4])
-      start_right.pose.y = float(sys.argv[5])
-      start_right.pose.theta = float(sys.argv[6])
-
-      goal_left.pose.x = float(sys.argv[7])
-      goal_left.pose.y = float(sys.argv[8])
-      goal_left.pose.theta = float(sys.argv[9])
-      goal_right.pose.x = float(sys.argv[10])
-      goal_right.pose.y = float(sys.argv[11])
-      goal_right.pose.theta = float(sys.argv[12])
-
-      resp = planSrv(start_left, start_right, goal_left, goal_right);
-
-    if resp.result == True:
-        rospy.loginfo("Planning succeeded with %d steps, path costs: %f" % (len(resp.footsteps), resp.costs))
-        print "Footsteps:"
-        for f in resp.footsteps:
-            print ("L" if (f.leg == StepTarget.left) else "R") + " [%f %f %f]" % (f.pose.x, f.pose.y, f.pose.theta)
-    else:
-        rospy.logerr("Service call failed")
-
-    exit(0)
diff --git a/humanoid_navigation-for-git/footstep_planner/src/Footstep.cpp b/humanoid_navigation-for-git/footstep_planner/src/Footstep.cpp
deleted file mode 100644
index c72f6b5..0000000
--- a/humanoid_navigation-for-git/footstep_planner/src/Footstep.cpp
+++ /dev/null
@@ -1,176 +0,0 @@
-/*
- * A footstep planner for humanoid robots
- *
- * Copyright 2010-2011 Johannes Garimort, Armin Hornung, University of Freiburg
- * http://www.ros.org/wiki/footstep_planner
- *
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, version 3.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-#include <footstep_planner/Footstep.h>
-
-
-namespace footstep_planner
-{
-Footstep::Footstep(double x, double y, double theta, double cell_size,
-                   int num_angle_bins, int max_hash_size)
-: ivTheta(angle_state_2_cell(theta, num_angle_bins)),
-  ivCellSize(cell_size),
-  ivNumAngleBins(num_angle_bins),
-  ivMaxHashSize(max_hash_size),
-  ivDiscSuccessorLeft(num_angle_bins),
-  ivDiscSuccessorRight(num_angle_bins),
-  ivDiscPredecessorLeft(num_angle_bins),
-  ivDiscPredecessorRight(num_angle_bins)
-{
-  init(x, y);
-}
-
-
-Footstep::~Footstep()
-{}
-
-
-void
-Footstep::init(double x, double y)
-{
-  int backward_angle;
-  int footstep_x;
-  int footstep_y;
-
-  for (int a = 0; a < ivNumAngleBins; ++a)
-  {
-    backward_angle = calculateForwardStep(RIGHT, a, x, y,
-                                          &footstep_x, &footstep_y);
-    ivDiscSuccessorRight[a] = footstep_xy(footstep_x, footstep_y);
-    ivDiscPredecessorLeft[backward_angle] = footstep_xy(-footstep_x,
-                                                        -footstep_y);
-    backward_angle = calculateForwardStep(LEFT, a, x, y,
-                                          &footstep_x, &footstep_y);
-    ivDiscSuccessorLeft[a] = footstep_xy(footstep_x, footstep_y);
-    ivDiscPredecessorRight[backward_angle] = footstep_xy(-footstep_x,
-                                                         -footstep_y);
-  }
-}
-
-
-PlanningState
-Footstep::performMeOnThisState(const PlanningState& current)
-const
-{
-  Leg leg;
-
-  int x = current.getX();
-  int y = current.getY();
-  int theta = current.getTheta();
-
-  if (current.getLeg() == RIGHT)
-  {
-    footstep_xy xy = ivDiscSuccessorRight[theta];
-    x += xy.first;
-    y += xy.second;
-    theta += ivTheta;
-    leg = LEFT;
-  }
-  else // leg == LEFT
-  {
-    footstep_xy xy = ivDiscSuccessorLeft[theta];
-    x += xy.first;
-    y += xy.second;
-    theta -= ivTheta;
-    leg = RIGHT;
-  }
-
-  // theta has to be in [0..ivNumAngleBins)
-  if (theta < 0)
-    theta += ivNumAngleBins;
-  else if (theta >= ivNumAngleBins)
-    theta -= ivNumAngleBins;
-
-  return PlanningState(x, y, theta, leg, ivMaxHashSize);
-}
-
-
-PlanningState
-Footstep::reverseMeOnThisState(const PlanningState& current)
-const
-{
-  Leg leg;
-
-  int x = current.getX();
-  int y = current.getY();
-  int theta = current.getTheta();
-
-  if (current.getLeg() == LEFT)
-  {
-    footstep_xy xy = ivDiscPredecessorLeft[theta];
-    x += xy.first;
-    y += xy.second;
-    theta -= ivTheta;
-    leg = RIGHT;
-  }
-  else // leg == RIGHT
-  {
-    footstep_xy xy = ivDiscPredecessorRight[theta];
-    x += xy.first;
-    y += xy.second;
-    theta += ivTheta;
-    leg = LEFT;
-  }
-  // theta has to be in [0..ivNumAngleBins)
-  if (theta < 0)
-    theta += ivNumAngleBins;
-  else if (theta >= ivNumAngleBins)
-    theta -= ivNumAngleBins;
-
-  return PlanningState(x, y, theta, leg, ivMaxHashSize);
-}
-
-
-int
-Footstep::calculateForwardStep(Leg leg, int global_theta,
-                               double x, double y,
-                               int* footstep_x, int* footstep_y)
-const
-{
-  double cont_footstep_x, cont_footstep_y;
-  double cont_global_theta = angle_cell_2_state(global_theta,
-                                                ivNumAngleBins);
-  double theta_cos = cos(cont_global_theta);
-  double theta_sin = sin(cont_global_theta);
-  if (leg == RIGHT)
-  {
-    cont_footstep_x = theta_cos * x - theta_sin * y;
-    cont_footstep_y = theta_sin * x + theta_cos * y;
-
-    global_theta += ivTheta;
-  }
-  else // leg == LEFT
-      {
-    cont_footstep_x = theta_cos * x + theta_sin * y;
-    cont_footstep_y = theta_sin * x - theta_cos * y;
-
-    global_theta -= ivTheta;
-      }
-  *footstep_x = disc_val(cont_footstep_x, ivCellSize);
-  *footstep_y = disc_val(cont_footstep_y, ivCellSize);
-
-  // theta has to be in [0..ivNumAngleBins)
-  if (global_theta < 0)
-    global_theta += ivNumAngleBins;
-  else if (global_theta >= ivNumAngleBins)
-    global_theta -= ivNumAngleBins;
-  return global_theta;
-}
-} // end of namespace
diff --git a/humanoid_navigation-for-git/footstep_planner/src/FootstepNavigation.cpp b/humanoid_navigation-for-git/footstep_planner/src/FootstepNavigation.cpp
deleted file mode 100644
index ed81be1..0000000
--- a/humanoid_navigation-for-git/footstep_planner/src/FootstepNavigation.cpp
+++ /dev/null
@@ -1,783 +0,0 @@
-/*
- * A footstep planner for humanoid robots
- *
- * Copyright 2010-2011 Johannes Garimort, Armin Hornung, University of Freiburg
- * http://www.ros.org/wiki/footstep_planner
- *
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, version 3.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-#include <footstep_planner/FootstepNavigation.h>
-
-
-namespace footstep_planner
-{
-FootstepNavigation::FootstepNavigation()
-: ivIdFootRight("/r_sole"),
-  ivIdFootLeft("/l_sole"),
-  ivIdMapFrame("map"),
-  ivExecutingFootsteps(false),
-  ivFootstepsExecution("footsteps_execution", true),
-  ivExecutionShift(2),
-  ivControlStepIdx(-1),
-  ivResetStepIdx(0)
-{
-  // private NodeHandle for parameters and private messages (debug / info)
-  ros::NodeHandle nh_private("~");
-  ros::NodeHandle nh_public;
-
-  // service
-  ivFootstepSrv =
-    nh_public.serviceClient<humanoid_nav_msgs::StepTargetService>(
-      "footstep_srv");
-  ivClipFootstepSrv =
-    nh_public.serviceClient<humanoid_nav_msgs::ClipFootstep>(
-      "clip_footstep_srv");
-
-  // subscribers
-  ivGridMapSub =
-    nh_public.subscribe<nav_msgs::OccupancyGrid>(
-      "map", 1, &FootstepNavigation::mapCallback, this);
-  ivGoalPoseSub =
-    nh_public.subscribe<geometry_msgs::PoseStamped>(
-      "goal", 1, &FootstepNavigation::goalPoseCallback, this);
-
-  // read parameters from config file:
-  nh_private.param("rfoot_frame_id", ivIdFootRight, ivIdFootRight);
-  nh_private.param("lfoot_frame_id", ivIdFootLeft, ivIdFootLeft);
-
-  nh_private.param("accuracy/footstep/x", ivAccuracyX, 0.01);
-  nh_private.param("accuracy/footstep/y", ivAccuracyY, 0.01);
-  nh_private.param("accuracy/footstep/theta", ivAccuracyTheta, 0.1);
-
-  nh_private.param("accuracy/cell_size", ivCellSize, 0.005);
-  nh_private.param("accuracy/num_angle_bins", ivNumAngleBins, 128);
-
-  nh_private.param("forward_search", ivForwardSearch, false);
-
-  nh_private.param("feedback_frequency", ivFeedbackFrequency, 5.0);
-  nh_private.param("safe_execution", ivSafeExecution, true);
-
-  nh_private.param("foot/max/step/x", ivMaxStepX, 0.07);
-  nh_private.param("foot/max/step/y", ivMaxStepY, 0.15);
-  nh_private.param("foot/max/step/theta", ivMaxStepTheta, 0.3);
-  nh_private.param("foot/max/inverse/step/x", ivMaxInvStepX, -0.03);
-  nh_private.param("foot/max/inverse/step/y", ivMaxInvStepY, 0.09);
-  nh_private.param("foot/max/inverse/step/theta", ivMaxInvStepTheta, -0.01);
-
-  // step range
-  XmlRpc::XmlRpcValue step_range_x;
-  XmlRpc::XmlRpcValue step_range_y;
-  nh_private.getParam("step_range/x", step_range_x);
-  nh_private.getParam("step_range/y", step_range_y);
-  if (step_range_x.getType() != XmlRpc::XmlRpcValue::TypeArray)
-    ROS_ERROR("Error reading footsteps/x from config file.");
-  if (step_range_y.getType() != XmlRpc::XmlRpcValue::TypeArray)
-    ROS_ERROR("Error reading footsteps/y from config file.");
-  if (step_range_x.size() != step_range_y.size())
-  {
-    ROS_ERROR("Step range points have different size. Exit!");
-    exit(2);
-  }
-  // create step range
-  ivStepRange.clear();
-  ivStepRange.reserve(step_range_x.size());
-  double x, y;
-  for (int i = 0; i < step_range_x.size(); ++i)
-  {
-    x = (double)step_range_x[i];
-    y = (double)step_range_y[i];
-    ivStepRange.push_back(std::pair<double, double>(x, y));
-  }
-  // insert first point again at the end!
-  ivStepRange.push_back(ivStepRange[0]);
-}
-
-
-FootstepNavigation::~FootstepNavigation()
-{}
-
-
-bool
-FootstepNavigation::plan()
-{
-  if (!updateStart())
-  {
-    ROS_ERROR("Start pose not accessible!");
-    return false;
-  }
-
-  if (ivPlanner.plan())
-  {
-    startExecution();
-    return true;
-  }
-  // path planning unsuccessful
-  return false;
-}
-
-
-bool
-FootstepNavigation::replan()
-{
-  if (!updateStart())
-  {
-    ROS_ERROR("Start pose not accessible!");
-    return false;
-  }
-
-  bool path_existed = ivPlanner.pathExists();
-
-  // calculate path by replanning (if no planning information exists
-  // this call is equal to ivPlanner.plan())
-  if (ivPlanner.replan())
-  {
-    startExecution();
-    return true;
-  }
-  else if (path_existed)
-  {
-    ROS_INFO("Replanning unsuccessful. Reseting previous planning "
-             "information.");
-    if (ivPlanner.plan())
-    {
-      startExecution();
-      return true;
-    }
-  }
-  // path planning unsuccessful
-  ivExecutingFootsteps = false;
-  return false;
-}
-
-
-void
-FootstepNavigation::startExecution()
-{
-  if (ivSafeExecution)
-  {
-    ivFootstepExecutionPtr.reset(
-      new boost::thread(
-        boost::bind(&FootstepNavigation::executeFootsteps, this)));
-  }
-  else
-  {
-    // ALTERNATIVE:
-    executeFootstepsFast();
-  }
-}
-
-
-void
-FootstepNavigation::executeFootsteps()
-{
-  if (ivPlanner.getPathSize() <= 1)
-    return;
-
-  // lock this thread
-  ivExecutingFootsteps = true;
-
-  ROS_INFO("Start walking towards the goal.");
-
-  humanoid_nav_msgs::StepTarget step;
-  humanoid_nav_msgs::StepTargetService step_srv;
-
-  tf::Transform from;
-  std::string support_foot_id;
-
-  // calculate and perform relative footsteps until goal is reached
-  state_iter_t to_planned = ivPlanner.getPathBegin();
-  if (to_planned == ivPlanner.getPathEnd())
-  {
-    ROS_ERROR("No plan available. Return.");
-    return;
-  }
-
-  const State* from_planned = to_planned.base();
-  to_planned++;
-  while (to_planned != ivPlanner.getPathEnd())
-  {
-    try
-    {
-      boost::this_thread::interruption_point();
-    }
-    catch (const boost::thread_interrupted&)
-    {
-      // leave this thread
-      return;
-    }
-
-    if (from_planned->getLeg() == RIGHT)
-      support_foot_id = ivIdFootRight;
-    else // support_foot = LLEG
-      support_foot_id = ivIdFootLeft;
-
-    // try to get real placement of the support foot
-    if (getFootTransform(support_foot_id, ivIdMapFrame, ros::Time::now(),
-                         ros::Duration(0.5), &from))
-    {
-      // calculate relative step and check if it can be performed
-      if (getFootstep(from, *from_planned, *to_planned, &step))
-      {
-        step_srv.request.step = step;
-        ivFootstepSrv.call(step_srv);
-      }
-      // ..if it cannot be performed initialize replanning
-      else
-      {
-        ROS_INFO("Footstep cannot be performed. Replanning necessary.");
-
-        replan();
-        // leave the thread
-        return;
-      }
-    }
-    else
-    {
-      // if the support foot could not be received wait and try again
-      ros::Duration(0.5).sleep();
-      continue;
-    }
-
-    from_planned = to_planned.base();
-    to_planned++;
-  }
-  ROS_INFO("Succeeded walking to the goal.\n");
-
-  // free the lock
-  ivExecutingFootsteps = false;
-}
-
-
-void
-FootstepNavigation::executeFootstepsFast()
-{
-  if (ivPlanner.getPathSize() <= 1)
-	return;
-
-  // lock the planning and execution process
-  ivExecutingFootsteps = true;
-
-  // make sure the action client is connected to the action server
-  ivFootstepsExecution.waitForServer();
-
-  humanoid_nav_msgs::ExecFootstepsGoal goal;
-  State support_leg;
-  if (ivPlanner.getPathBegin()->getLeg() == RIGHT)
-    support_leg = ivPlanner.getStartFootRight();
-  else // leg == LEFT
-    support_leg = ivPlanner.getStartFootLeft();
-  if (getFootstepsFromPath(support_leg, 1, goal.footsteps))
-  {
-    goal.feedback_frequency = ivFeedbackFrequency;
-    ivControlStepIdx = 0;
-    ivResetStepIdx = 0;
-
-    // start the execution via action; _1, _2 are place holders for
-    // function arguments (see boost doc)
-    ivFootstepsExecution.sendGoal(
-      goal,
-      boost::bind(&FootstepNavigation::doneCallback, this, _1, _2),
-      boost::bind(&FootstepNavigation::activeCallback, this),
-      boost::bind(&FootstepNavigation::feedbackCallback, this, _1));
-  }
-  else
-  {
-    // free the lock
-    ivExecutingFootsteps = false;
-
-    replan();
-  }
-}
-
-
-void
-FootstepNavigation::activeCallback()
-{
-	// lock the execution
-	ivExecutingFootsteps = true;
-
-	ROS_INFO("Start walking towards the goal.");
-}
-
-
-void
-FootstepNavigation::doneCallback(
-	const actionlib::SimpleClientGoalState& state,
-	const humanoid_nav_msgs::ExecFootstepsResultConstPtr& result)
-{
-	if (state == actionlib::SimpleClientGoalState::SUCCEEDED)
-		ROS_INFO("Succeeded walking to the goal.");
-	else if (state == actionlib::SimpleClientGoalState::PREEMPTED)
-		ROS_INFO("Preempted walking to the goal.");
-	// TODO: distinct between further states??
-	else
-		ROS_INFO("Failed walking to the goal.");
-
-	// free the lock
-	ivExecutingFootsteps = false;
-}
-
-
-void
-FootstepNavigation::feedbackCallback(
-	const humanoid_nav_msgs::ExecFootstepsFeedbackConstPtr& fb)
-{
-	int executed_steps_idx = fb->executed_footsteps.size() - ivExecutionShift;
-	// make sure at least one step has been performed
-	if (executed_steps_idx < 0)
-    return;
-	// if the currently executed footstep equals the currently observed one
-	// everything is ok
-	if (executed_steps_idx == ivControlStepIdx)
-    return;
-
-	// get planned foot placement
-  const State& planned = *(ivPlanner.getPathBegin() + ivControlStepIdx + 1 +
-                           ivResetStepIdx);
-  // get executed foot placement
-  tf::Transform executed_tf;
-  std::string foot_id;
-  if (planned.getLeg() == RIGHT)
-    foot_id = ivIdFootRight;
-  else
-    foot_id = ivIdFootLeft;
-
-  if (!getFootTransform(foot_id, ivIdMapFrame, ros::Time::now(),
-		                    ros::Duration(0.5), &executed_tf))
-  {
-    State executed(executed_tf.getOrigin().x(), executed_tf.getOrigin().y(),
-                   tf::getYaw(executed_tf.getRotation()), planned.getLeg());
-    ivFootstepsExecution.cancelGoal();
-    humanoid_nav_msgs::ExecFootstepsGoal goal;
-    // try to reach the calculated path
-    if (getFootstepsFromPath(executed, executed_steps_idx + ivResetStepIdx,
-                             goal.footsteps))
-    {
-      goal.feedback_frequency = ivFeedbackFrequency;
-      // adjust the internal counters
-      ivResetStepIdx += ivControlStepIdx + 1;
-      ivControlStepIdx = 0;
-
-      // restart the footstep execution
-      ivFootstepsExecution.sendGoal(
-        goal,
-        boost::bind(&FootstepNavigation::doneCallback, this, _1, _2),
-        boost::bind(&FootstepNavigation::activeCallback, this),
-        boost::bind(&FootstepNavigation::feedbackCallback, this, _1));
-    }
-    // the previously calculated path cannot be reached so we have plan
-    // a new path
-    else
-    {
-      replan();
-    }
-  }
-
-  State executed(executed_tf.getOrigin().x(), executed_tf.getOrigin().y(),
-                 tf::getYaw(executed_tf.getRotation()), planned.getLeg());
-
-  // check if the currently executed footstep is no longer observed (i.e.
-  // the robot no longer follows its calculated path)
-  if (executed_steps_idx >= ivControlStepIdx + 2)
-	{
-    ivFootstepsExecution.cancelGoal();
-
-    ROS_DEBUG("Footstep execution incorrect.");
-
-    humanoid_nav_msgs::ExecFootstepsGoal goal;
-    // try to reach the calculated path
-    if (getFootstepsFromPath(executed, executed_steps_idx + ivResetStepIdx,
-                             goal.footsteps))
-    {
-      ROS_INFO("Try to reach calculated path.");
-
-      goal.feedback_frequency = ivFeedbackFrequency;
-      // adjust the internal counters
-      ivResetStepIdx += ivControlStepIdx + 1;
-      ivControlStepIdx = 0;
-
-      // restart the footstep execution
-      ivFootstepsExecution.sendGoal(
-        goal,
-        boost::bind(&FootstepNavigation::doneCallback, this, _1, _2),
-        boost::bind(&FootstepNavigation::activeCallback, this),
-        boost::bind(&FootstepNavigation::feedbackCallback, this, _1));
-    }
-    // the previously calculated path cannot be reached so we have plan
-    // a new path
-    else
-    {
-      replan();
-    }
-
-    return;
-	}
-    // check the currently observed footstep
-	else
-	{
-    ROS_DEBUG("planned (%f, %f, %f, %i) vs. executed (%f, %f, %f, %i)",
-              planned.getX(), planned.getY(), planned.getTheta(),
-              planned.getLeg(),
-              executed.getX(), executed.getY(), executed.getTheta(),
-              executed.getLeg());
-
-    // adjust the internal step counters if the footstep has been
-    // performed correctly; otherwise check in the next iteration if
-    // the step really has been incorrect
-    if (performanceValid(planned, executed))
-      ivControlStepIdx++;
-    else
-      ROS_DEBUG("Invalid step. Wait next step update before declaring"
-                " step incorrect.");
-	}
-}
-
-
-void
-FootstepNavigation::goalPoseCallback(
-  const geometry_msgs::PoseStampedConstPtr& goal_pose)
-{
-  // check if the execution is locked
-  if (ivExecutingFootsteps)
-  {
-    ROS_INFO("Already performing a navigation task. Wait until it is "
-             "finished.");
-    return;
-  }
-
-  if (setGoal(goal_pose))
-  {
-    // this check enforces a planning from scratch if necessary (dependent on
-    // planning direction)
-	  if (ivForwardSearch)
-	    replan();
-	  else
-	    plan();
-  }
-}
-
-
-void
-FootstepNavigation::mapCallback(
-  const nav_msgs::OccupancyGridConstPtr& occupancy_map)
-{
-  // stop execution if an execution was performed
-  if (ivExecutingFootsteps)
-  {
-    if (ivSafeExecution)
-    {
-      // interrupt the thread and wait until it has finished its execution
-  	  ivFootstepExecutionPtr->interrupt();
-      ivFootstepExecutionPtr->join();
-    }
-    else
-    {
-  		ivFootstepsExecution.cancelAllGoals();
-    }
-  }
-
-  gridmap_2d::GridMap2DPtr map(new gridmap_2d::GridMap2D(occupancy_map));
-  ivIdMapFrame = map->getFrameID();
-
-  // updates the map and starts replanning if necessary
-  if (ivPlanner.updateMap(map))
-  {
-    replan();
-  }
-}
-
-
-bool
-FootstepNavigation::setGoal(const geometry_msgs::PoseStampedConstPtr goal_pose)
-{
-  return setGoal(goal_pose->pose.position.x,
-                 goal_pose->pose.position.y,
-                 tf::getYaw(goal_pose->pose.orientation));
-}
-
-
-bool
-FootstepNavigation::setGoal(float x, float y, float theta)
-{
-	return ivPlanner.setGoal(x, y, theta);
-}
-
-
-bool
-FootstepNavigation::updateStart()
-{
-  ros::Duration(0.5).sleep();
-
-  tf::Transform foot_left, foot_right;
-  {
-    // get real placement of the feet
-	  if (!getFootTransform(ivIdFootLeft, ivIdMapFrame, ros::Time::now(),
-      		                ros::Duration(0.5), &foot_left))
-	  {
-	    if (ivPlanner.pathExists())
-	    {
-	      ivExecutingFootsteps = false;
-	    }
-	    return false;
-	  }
-    if (!getFootTransform(ivIdFootRight, ivIdMapFrame, ros::Time::now(),
-    		                  ros::Duration(0.5), &foot_right))
-    {
-      if (ivPlanner.pathExists())
-      {
-        ivExecutingFootsteps = false;
-      }
-      return false;
-    }
-  }
-  State left(foot_left.getOrigin().x(), foot_left.getOrigin().y(),
-  		       tf::getYaw(foot_left.getRotation()), LEFT);
-  State right(foot_right.getOrigin().x(), foot_right.getOrigin().y(),
-              tf::getYaw(foot_right.getRotation()), RIGHT);
-
-  ROS_INFO("Robot standing at (%f, %f, %f, %i) (%f, %f, %f, %i).",
-		       left.getX(), left.getY(), left.getTheta(), left.getLeg(),
-		       right.getX(), right.getY(), right.getTheta(), right.getLeg());
-
-  return ivPlanner.setStart(left, right);
-}
-
-
-bool
-FootstepNavigation::getFootstep(const tf::Pose& from,
-                                const State& from_planned,
-		                            const State& to,
-		                            humanoid_nav_msgs::StepTarget* footstep)
-{
-  // get footstep to reach 'to' from 'from'
-  tf::Transform step = from.inverse() *
-                       tf::Pose(tf::createQuaternionFromYaw(to.getTheta()),
-                                tf::Point(to.getX(), to.getY(), 0.0));
-
-  // set the footstep
-  footstep->pose.x = step.getOrigin().x();
-  footstep->pose.y = step.getOrigin().y();
-  footstep->pose.theta = tf::getYaw(step.getRotation());
-  if (to.getLeg() == LEFT)
-    footstep->leg = humanoid_nav_msgs::StepTarget::left;
-  else // to.leg == RIGHT
-    footstep->leg = humanoid_nav_msgs::StepTarget::right;
-
-
-  /* check if the footstep can be performed by the NAO robot ******************/
-
-  // check if the step lies within the executable range
-  if (performable(*footstep))
-  {
-    return true;
-  }
-  else
-  {
-    // check if there is only a minor divergence between the current support
-	// foot and the foot placement used during the plannig task: in such a case
-	// perform the step that has been used during the planning
-    float step_diff_x = fabs(from.getOrigin().x() - from_planned.getX());
-    float step_diff_y = fabs(from.getOrigin().y() - from_planned.getY());
-    float step_diff_theta = fabs(
-        angles::shortest_angular_distance(
-            tf::getYaw(from.getRotation()), from_planned.getTheta()));
-    if (step_diff_x < ivAccuracyX && step_diff_y < ivAccuracyY &&
-        step_diff_theta < ivAccuracyTheta)
-    {
-	  step = tf::Pose(tf::createQuaternionFromYaw(from_planned.getTheta()),
-	                  tf::Point(from_planned.getX(), from_planned.getY(), 0.0)
-	                  ).inverse() *
-		     tf::Pose(tf::createQuaternionFromYaw(to.getTheta()),
-				      tf::Point(to.getX(), to.getY(), 0.0));
-
-	  footstep->pose.x = step.getOrigin().x();
-	  footstep->pose.y = step.getOrigin().y();
-	  footstep->pose.theta = tf::getYaw(step.getRotation());
-
-	  return true;
-    }
-
-    return false;
-  }
-
-//  // ALTERNATIVE: clip the footstep into the executable range; if nothing was
-//  // clipped: perform; if too much was clipped: do not perform
-//  humanoid_nav_msgs::ClipFootstep footstep_clip;
-//  footstep_clip.request.step = footstep;
-//  ivClipFootstepSrv.call(footstep_clip);
-//
-//  if (performanceValid(footstep_clip))
-//  {
-//  	footstep.pose.x = footstep_clip.response.step.pose.x;
-//  	footstep.pose.y = footstep_clip.response.step.pose.y;
-//  	footstep.pose.theta = footstep_clip.response.step.pose.theta;
-//  	return true;
-//  }
-//  else
-//  {
-//    return false;
-//  }
-}
-
-
-bool
-FootstepNavigation::getFootstepsFromPath(
-  const State& current_support_leg, int starting_step_num,
-  std::vector<humanoid_nav_msgs::StepTarget>& footsteps)
-{
-  humanoid_nav_msgs::StepTarget footstep;
-
-  state_iter_t to_planned = ivPlanner.getPathBegin() + starting_step_num - 1;
-  tf::Pose last(tf::createQuaternionFromYaw(current_support_leg.getTheta()),
-                tf::Point(current_support_leg.getX(), current_support_leg.getY(),
-                          0.0));
-  const State* from_planned = to_planned.base();
-  to_planned++;
-  for (; to_planned != ivPlanner.getPathEnd(); to_planned++)
-  {
-    if (getFootstep(last, *from_planned, *to_planned, &footstep))
-    {
-      footsteps.push_back(footstep);
-    }
-    else
-    {
-      ROS_ERROR("Calculated path cannot be performed!");
-      return false;
-    }
-
-    last = tf::Pose(tf::createQuaternionFromYaw(to_planned->getTheta()),
-                    tf::Point(to_planned->getX(), to_planned->getY(), 0.0));
-    from_planned = to_planned.base();
-  }
-
-  return true;
-}
-
-
-bool
-FootstepNavigation::getFootTransform(const std::string& foot_id,
-                                     const std::string& world_frame_id,
-                                     const ros::Time& time,
-                                     const ros::Duration& waiting_time,
-                                     tf::Transform* foot)
-{
-  tf::StampedTransform stamped_foot_transform;
-  try
-  {
-    ivTransformListener.waitForTransform(world_frame_id, foot_id, time,
-                                         waiting_time);
-    ivTransformListener.lookupTransform(world_frame_id, foot_id, time,
-                                        stamped_foot_transform);
-  }
-  catch (const tf::TransformException& e)
-  {
-    ROS_WARN("Failed to obtain FootTransform from tf (%s)", e.what());
-    return false;
-  }
-
-  foot->setOrigin(stamped_foot_transform.getOrigin());
-  foot->setRotation(stamped_foot_transform.getRotation());
-
-  return true;
-}
-
-
-bool
-FootstepNavigation::performanceValid(float a_x, float a_y, float a_theta,
-                                     float b_x, float b_y, float b_theta)
-{
-  return (fabs(a_x - b_x) < ivAccuracyX &&
-          fabs(a_y - b_y) < ivAccuracyY &&
-          fabs(angles::shortest_angular_distance(a_theta, b_theta)) <
-            ivAccuracyTheta);
-}
-
-
-bool
-FootstepNavigation::performanceValid(
-  const humanoid_nav_msgs::ClipFootstep& step)
-{
-  return performanceValid(step.request.step.pose.x,
-                          step.request.step.pose.y,
-                          step.request.step.pose.theta,
-                          step.response.step.pose.x,
-                          step.response.step.pose.y,
-                          step.response.step.pose.theta);
-}
-
-
-bool
-FootstepNavigation::performanceValid(const State& planned,
-                                     const State& executed)
-{
-  return performanceValid(
-    planned.getX(), planned.getY(), planned.getTheta(),
-    executed.getX(), executed.getY(), executed.getTheta());
-}
-
-
-bool
-FootstepNavigation::performable(const humanoid_nav_msgs::StepTarget& footstep)
-{
-  float step_x = footstep.pose.x;
-  float step_y = footstep.pose.y;
-  float step_theta = footstep.pose.theta;
-
-  if (footstep.leg == humanoid_nav_msgs::StepTarget::right)
-  {
-    step_y = -step_y;
-    step_theta = -step_theta;
-  }
-
-  if (step_x + FLOAT_CMP_THR > ivMaxStepX ||
-      step_x - FLOAT_CMP_THR < ivMaxInvStepX)
-    return false;
-  if (step_y + FLOAT_CMP_THR > ivMaxStepY ||
-      step_y - FLOAT_CMP_THR < ivMaxInvStepY)
-    return false;
-  if (step_theta + FLOAT_CMP_THR > ivMaxStepTheta ||
-      step_theta - FLOAT_CMP_THR < ivMaxInvStepTheta)
-    return false;
-
-  return performable(step_x, step_y);
-}
-
-
-bool
-FootstepNavigation::performable(float step_x, float step_y)
-{
-  int cn = 0;
-
-  // loop through all ivStepRange of the polygon
-  for(unsigned int i = 0; i < ivStepRange.size() - 1; ++i)
-  {
-    if ((ivStepRange[i].second <= step_y &&
-    	 ivStepRange[i + 1].second > step_y) ||
-        (ivStepRange[i].second >= step_y &&
-         ivStepRange[i + 1].second < step_y))
-    {
-      float vt = (float)(step_y - ivStepRange[i].second) /
-        (ivStepRange[i + 1].second - ivStepRange[i].second);
-      if (step_x <
-          ivStepRange[i].first + vt *
-            (ivStepRange[i + 1].first - ivStepRange[i].first))
-      {
-        ++cn;
-      }
-    }
-  }
-  return cn & 1;
-}
-}
diff --git a/humanoid_navigation-for-git/footstep_planner/src/FootstepPlanner.cpp b/humanoid_navigation-for-git/footstep_planner/src/FootstepPlanner.cpp
deleted file mode 100644
index b13fa26..0000000
--- a/humanoid_navigation-for-git/footstep_planner/src/FootstepPlanner.cpp
+++ /dev/null
@@ -1,1174 +0,0 @@
-/*
- * A footstep planner for humanoid robots
- *
- * Copyright 2010-2011 Johannes Garimort, Armin Hornung, University of Freiburg
- * http://www.ros.org/wiki/footstep_planner
- *
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, version 3.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-#include <footstep_planner/FootstepPlanner.h>
-#include <humanoid_nav_msgs/ClipFootstep.h>
-
-
-using gridmap_2d::GridMap2D;
-using gridmap_2d::GridMap2DPtr;
-
-
-namespace footstep_planner
-{
-FootstepPlanner::FootstepPlanner()
-: ivStartPoseSetUp(false),
-  ivGoalPoseSetUp(false),
-  ivLastMarkerMsgSize(0),
-  ivPathCost(0),
-  ivMarkerNamespace("")
-{
-  // private NodeHandle for parameters and private messages (debug / info)
-  ros::NodeHandle nh_private("~");
-  ros::NodeHandle nh_public;
-
-  // ..publishers
-  ivExpandedStatesVisPub = nh_private.advertise<
-      sensor_msgs::PointCloud>("expanded_states", 1);
-  ivRandomStatesVisPub = nh_private.advertise<
-      sensor_msgs::PointCloud>("random_states", 1);
-  ivFootstepPathVisPub = nh_private.advertise<
-      visualization_msgs::MarkerArray>("footsteps_array", 1);
-  ivHeuristicPathVisPub = nh_private.advertise<
-      nav_msgs::Path>("heuristic_path", 1);
-  ivPathVisPub = nh_private.advertise<nav_msgs::Path>("path", 1);
-  ivStartPoseVisPub = nh_private.advertise<
-      geometry_msgs::PoseStamped>("start", 1);
-
-  std::string heuristic_type;
-  double diff_angle_cost;
-
-  // read parameters from config file:
-  // planner environment settings
-  nh_private.param("heuristic_type", heuristic_type,
-                   std::string("EuclideanHeuristic"));
-  nh_private.param("heuristic_scale", ivEnvironmentParams.heuristic_scale, 1.0);
-  nh_private.param("max_hash_size", ivEnvironmentParams.hash_table_size, 65536);
-  nh_private.param("accuracy/collision_check",
-                   ivEnvironmentParams.collision_check_accuracy,
-                   2);
-  nh_private.param("accuracy/cell_size", ivEnvironmentParams.cell_size, 0.01);
-  nh_private.param("accuracy/num_angle_bins",
-                   ivEnvironmentParams.num_angle_bins,
-                   64);
-  nh_private.param("step_cost", ivEnvironmentParams.step_cost, 0.05);
-  nh_private.param("diff_angle_cost", diff_angle_cost, 0.0);
-
-  nh_private.param("planner_type", ivPlannerType, std::string("ARAPlanner"));
-  nh_private.param("search_until_first_solution", ivSearchUntilFirstSolution,
-                   false);
-  nh_private.param("allocated_time", ivMaxSearchTime, 7.0);
-  nh_private.param("forward_search", ivEnvironmentParams.forward_search, false);
-  nh_private.param("initial_epsilon", ivInitialEpsilon, 3.0);
-  nh_private.param("changed_cells_limit", ivChangedCellsLimit, 20000);
-  nh_private.param("num_random_nodes", ivEnvironmentParams.num_random_nodes,
-                   20);
-  nh_private.param("random_node_dist", ivEnvironmentParams.random_node_distance,
-                   1.0);
-
-  // footstep settings
-  nh_private.param("foot/size/x", ivEnvironmentParams.footsize_x, 0.16);
-  nh_private.param("foot/size/y", ivEnvironmentParams.footsize_y, 0.06);
-  nh_private.param("foot/size/z", ivEnvironmentParams.footsize_z, 0.015);
-  nh_private.param("foot/separation", ivFootSeparation, 0.1);
-  nh_private.param("foot/origin_shift/x",
-                   ivEnvironmentParams.foot_origin_shift_x,
-                   0.02);
-  nh_private.param("foot/origin_shift/y",
-                   ivEnvironmentParams.foot_origin_shift_y,
-                   0.0);
-  nh_private.param("foot/max/step/x", ivEnvironmentParams.max_footstep_x, 0.08);
-  nh_private.param("foot/max/step/y", ivEnvironmentParams.max_footstep_y, 0.16);
-  nh_private.param("foot/max/step/theta",
-                   ivEnvironmentParams.max_footstep_theta,
-                   0.3);
-  nh_private.param("foot/max/inverse/step/x",
-                   ivEnvironmentParams.max_inverse_footstep_x,
-                   -0.04);
-  nh_private.param("foot/max/inverse/step/y",
-                   ivEnvironmentParams.max_inverse_footstep_y,
-                   0.09);
-  nh_private.param("foot/max/inverse/step/theta",
-                   ivEnvironmentParams.max_inverse_footstep_theta,
-                   -0.3);
-
-  // footstep discretization
-  XmlRpc::XmlRpcValue footsteps_x;
-  XmlRpc::XmlRpcValue footsteps_y;
-  XmlRpc::XmlRpcValue footsteps_theta;
-  nh_private.getParam("footsteps/x", footsteps_x);
-  nh_private.getParam("footsteps/y", footsteps_y);
-  nh_private.getParam("footsteps/theta", footsteps_theta);
-  if (footsteps_x.getType() != XmlRpc::XmlRpcValue::TypeArray)
-    ROS_ERROR("Error reading footsteps/x from config file.");
-  if (footsteps_y.getType() != XmlRpc::XmlRpcValue::TypeArray)
-    ROS_ERROR("Error reading footsteps/y from config file.");
-  if (footsteps_theta.getType() != XmlRpc::XmlRpcValue::TypeArray)
-    ROS_ERROR("Error reading footsteps/theta from config file.");
-  int size_x = footsteps_x.size();
-  int size_y = footsteps_y.size();
-  int size_t = footsteps_theta.size();
-  if (size_x != size_y || size_x != size_t)
-  {
-    ROS_ERROR("Footstep parameterization has different sizes for x/y/theta. "
-              "Exit!");
-    exit(2);
-  }
-  // create footstep set
-  ivEnvironmentParams.footstep_set.clear();
-  double max_step_width = 0;
-  for(int i=0; i < footsteps_x.size(); ++i)
-  {
-    double x = (double)footsteps_x[i];
-    double y = (double)footsteps_y[i];
-    double theta = (double)footsteps_theta[i];
-
-    Footstep f(x, y, theta,
-               ivEnvironmentParams.cell_size,
-               ivEnvironmentParams.num_angle_bins,
-               ivEnvironmentParams.hash_table_size);
-    ivEnvironmentParams.footstep_set.push_back(f);
-
-    double cur_step_width = sqrt(x*x + y*y);
-
-    if (cur_step_width > max_step_width)
-      max_step_width = cur_step_width;
-  }
-
-  // step range
-  XmlRpc::XmlRpcValue step_range_x;
-  XmlRpc::XmlRpcValue step_range_y;
-  nh_private.getParam("step_range/x", step_range_x);
-  nh_private.getParam("step_range/y", step_range_y);
-  if (step_range_x.getType() != XmlRpc::XmlRpcValue::TypeArray)
-    ROS_ERROR("Error reading footsteps/x from config file.");
-  if (step_range_y.getType() != XmlRpc::XmlRpcValue::TypeArray)
-    ROS_ERROR("Error reading footsteps/y from config file.");
-  if (step_range_x.size() != step_range_y.size())
-  {
-    ROS_ERROR("Step range points have different size. Exit!");
-    exit(2);
-  }
-  // create step range
-  ivEnvironmentParams.step_range.clear();
-  ivEnvironmentParams.step_range.reserve(step_range_x.size());
-  double x, y;
-  double max_x = 0.0;
-  double max_y = 0.0;
-  double cell_size = ivEnvironmentParams.cell_size;
-  for (int i=0; i < step_range_x.size(); ++i)
-  {
-    x = (double)step_range_x[i];
-    y = (double)step_range_y[i];
-    if (fabs(x) > max_x)
-      max_x = fabs(x);
-    if (fabs(y) > max_y)
-      max_y = fabs(y);
-    ivEnvironmentParams.step_range.push_back(
-      std::pair<int, int>(disc_val(x, cell_size), disc_val(y, cell_size)));
-  }
-  // insert first point again at the end!
-  ivEnvironmentParams.step_range.push_back(ivEnvironmentParams.step_range[0]);
-  ivEnvironmentParams.max_step_width = sqrt(max_x*max_x + max_y*max_y) * 1.5;
-
-  // initialize the heuristic
-  boost::shared_ptr<Heuristic> h;
-  if (heuristic_type == "EuclideanHeuristic")
-  {
-    h.reset(
-        new EuclideanHeuristic(ivEnvironmentParams.cell_size,
-                               ivEnvironmentParams.num_angle_bins));
-    ROS_INFO("FootstepPlanner heuristic: euclidean distance");
-  }
-  else if(heuristic_type == "EuclStepCostHeuristic")
-  {
-    h.reset(
-        new EuclStepCostHeuristic(ivEnvironmentParams.cell_size,
-                                  ivEnvironmentParams.num_angle_bins,
-                                  ivEnvironmentParams.step_cost,
-                                  diff_angle_cost,
-                                  max_step_width));
-    ROS_INFO("FootstepPlanner heuristic: euclidean distance with step costs");
-  }
-  else if (heuristic_type == "PathCostHeuristic")
-  {
-    // for heuristic inflation
-    double foot_incircle =
-      std::min((ivEnvironmentParams.footsize_x / 2.0 -
-                std::abs(ivEnvironmentParams.foot_origin_shift_x)),
-               (ivEnvironmentParams.footsize_y / 2.0 -
-                std::abs(ivEnvironmentParams.foot_origin_shift_y)));
-    assert(foot_incircle > 0.0);
-
-    h.reset(
-        new PathCostHeuristic(ivEnvironmentParams.cell_size,
-                              ivEnvironmentParams.num_angle_bins,
-                              ivEnvironmentParams.step_cost,
-                              diff_angle_cost,
-                              max_step_width,
-                              foot_incircle));
-    ROS_INFO("FootstepPlanner heuristic: 2D path euclidean distance with step "
-             "costs");
-
-    // keep a local ptr for visualization
-    ivPathCostHeuristicPtr = boost::dynamic_pointer_cast<PathCostHeuristic>(h);
-  }
-  else
-  {
-    ROS_ERROR_STREAM("Heuristic " << heuristic_type << " not available, "
-                     "exiting.");
-    exit(1);
-  }
-  ivEnvironmentParams.heuristic = h;
-
-  // initialize the planner environment
-  ivPlannerEnvironmentPtr.reset(
-    new FootstepPlannerEnvironment(ivEnvironmentParams));
-
-  // set up planner
-  if (ivPlannerType == "ARAPlanner" ||
-      ivPlannerType == "ADPlanner"  ||
-      ivPlannerType == "RSTARPlanner" )
-  {
-    ROS_INFO_STREAM("Planning with " << ivPlannerType);
-  }
-  else
-  {
-    ROS_ERROR_STREAM("Planner "<< ivPlannerType <<" not available / "
-                     "untested.");
-    exit(1);
-  }
-  if (ivEnvironmentParams.forward_search)
-  {
-    ROS_INFO_STREAM("Search direction: forward planning");
-  }
-  else
-  {
-    ROS_INFO_STREAM("Search direction: backward planning");
-  }
-  setPlanner();
-}
-
-
-FootstepPlanner::~FootstepPlanner()
-{}
-
-
-void
-FootstepPlanner::setPlanner()
-{
-  if (ivPlannerType == "ARAPlanner")
-  {
-    ivPlannerPtr.reset(
-        new ARAPlanner(ivPlannerEnvironmentPtr.get(),
-                       ivEnvironmentParams.forward_search));
-  }
-  else if (ivPlannerType == "ADPlanner")
-  {
-    ivPlannerPtr.reset(
-        new ADPlanner(ivPlannerEnvironmentPtr.get(),
-                      ivEnvironmentParams.forward_search));
-  }
-  else if (ivPlannerType == "RSTARPlanner")
-  {
-    RSTARPlanner* p =
-        new RSTARPlanner(ivPlannerEnvironmentPtr.get(),
-                         ivEnvironmentParams.forward_search);
-    // new options, require patched SBPL
-    //          p->set_local_expand_thres(500);
-    //          p->set_eps_step(1.0);
-    ivPlannerPtr.reset(p);
-  }
-  //        else if (ivPlannerType == "ANAPlanner")
-  //        	ivPlannerPtr.reset(new anaPlanner(ivPlannerEnvironmentPtr.get(),
-  //        	                                  ivForwardSearch));
-}
-
-
-bool
-FootstepPlanner::run()
-{
-  bool path_existed = (bool)ivPath.size();
-  int ret = 0;
-  MDPConfig mdp_config;
-  std::vector<int> solution_state_ids;
-
-  // commit start/goal poses to the environment
-  ivPlannerEnvironmentPtr->updateStart(ivStartFootLeft, ivStartFootRight);
-  ivPlannerEnvironmentPtr->updateGoal(ivGoalFootLeft, ivGoalFootRight);
-  ivPlannerEnvironmentPtr->updateHeuristicValues();
-  ivPlannerEnvironmentPtr->InitializeEnv(NULL);
-  ivPlannerEnvironmentPtr->InitializeMDPCfg(&mdp_config);
-
-  // inform AD planner about changed (start) states for replanning
-  if (path_existed &&
-      !ivEnvironmentParams.forward_search &&
-      ivPlannerType == "ADPlanner")
-  {
-    std::vector<int> changed_edges;
-    changed_edges.push_back(mdp_config.startstateid);
-    // update the AD planner
-    boost::shared_ptr<ADPlanner> ad_planner =
-      boost::dynamic_pointer_cast<ADPlanner>(ivPlannerPtr);
-    ad_planner->update_preds_of_changededges(&changed_edges);
-  }
-
-  // set up SBPL
-  if (ivPlannerPtr->set_start(mdp_config.startstateid) == 0)
-  {
-    ROS_ERROR("Failed to set start state.");
-    return false;
-  }
-  if (ivPlannerPtr->set_goal(mdp_config.goalstateid) == 0)
-  {
-    ROS_ERROR("Failed to set goal state\n");
-    return false;
-  }
-
-  ivPlannerPtr->set_initialsolution_eps(ivInitialEpsilon);
-  ivPlannerPtr->set_search_mode(ivSearchUntilFirstSolution);
-
-  ROS_INFO("Start planning (max time: %f, initial eps: %f (%f))\n",
-           ivMaxSearchTime, ivInitialEpsilon,
-           ivPlannerPtr->get_initial_eps());
-  int path_cost;
-  ros::WallTime startTime = ros::WallTime::now();
-  try
-  {
-    ret = ivPlannerPtr->replan(ivMaxSearchTime, &solution_state_ids,
-                               &path_cost);
-  }
-  catch (const SBPL_Exception& e)
-  {
-    // ROS_ERROR("SBPL planning failed (%s)", e.what());
-    return false;
-  }
-  ivPathCost = double(path_cost) / FootstepPlannerEnvironment::cvMmScale;
-
-  bool path_is_new = pathIsNew(solution_state_ids);
-  if (ret && solution_state_ids.size() > 0)
-  {
-    if (!path_is_new)
-      ROS_WARN("Solution found by SBPL is the same as the old solution. This could indicate that replanning failed.");
-
-    ROS_INFO("Solution of size %zu found after %f s",
-             solution_state_ids.size(),
-             (ros::WallTime::now()-startTime).toSec());
-
-    if (extractPath(solution_state_ids))
-    {
-      ROS_INFO("Expanded states: %i total / %i new",
-               ivPlannerEnvironmentPtr->getNumExpandedStates(),
-               ivPlannerPtr->get_n_expands());
-      ROS_INFO("Final eps: %f", ivPlannerPtr->get_final_epsilon());
-      ROS_INFO("Path cost: %f (%i)\n", ivPathCost, path_cost);
-
-      ivPlanningStatesIds = solution_state_ids;
-
-      broadcastExpandedNodesVis();
-      broadcastRandomNodesVis();
-      broadcastFootstepPathVis();
-      broadcastPathVis();
-
-      return true;
-    }
-    else
-    {
-      ROS_ERROR("extracting path failed\n\n");
-      return false;
-    }
-  }
-  else
-  {
-    broadcastExpandedNodesVis();
-    broadcastRandomNodesVis();
-
-    ROS_ERROR("No solution found");
-    return false;
-  }
-}
-
-
-bool
-FootstepPlanner::extractPath(const std::vector<int>& state_ids)
-{
-  ivPath.clear();
-
-  State s;
-  State start_left;
-  std::vector<int>::const_iterator state_ids_iter = state_ids.begin();
-
-  // first state is always the robot's left foot
-  if (!ivPlannerEnvironmentPtr->getState(*state_ids_iter, &start_left))
-  {
-    ivPath.clear();
-    return false;
-  }
-  ++state_ids_iter;
-  if (!ivPlannerEnvironmentPtr->getState(*state_ids_iter, &s))
-  {
-    ivPath.clear();
-    return false;
-  }
-  ++state_ids_iter;
-
-  // check if the robot's left foot can be ommited as first state in the path,
-  // i.e. the robot's right foot is appended first to the path
-  if (s.getLeg() == LEFT)
-    ivPath.push_back(ivStartFootRight);
-  else
-    ivPath.push_back(start_left);
-  ivPath.push_back(s);
-
-  for(; state_ids_iter < state_ids.end(); ++state_ids_iter)
-  {
-    if (!ivPlannerEnvironmentPtr->getState(*state_ids_iter, &s))
-    {
-      ivPath.clear();
-      return false;
-    }
-    ivPath.push_back(s);
-  }
-
-  // add last neutral step
-  if (ivPath.back().getLeg() == RIGHT)
-    ivPath.push_back(ivGoalFootLeft);
-  else // last_leg == LEFT
-    ivPath.push_back(ivGoalFootRight);
-
-  return true;
-}
-
-
-void
-FootstepPlanner::reset()
-{
-  ROS_INFO("Resetting planner");
-  // reset the previously calculated paths
-  ivPath.clear();
-  ivPlanningStatesIds.clear();
-  // reset the planner
-  // INFO: force_planning_from_scratch was not working properly the last time
-  // checked; therefore instead of using this function the planner is manually
-  // reset
-  //ivPlannerPtr->force_planning_from_scratch();
-  ivPlannerEnvironmentPtr->reset();
-  setPlanner();
-}
-
-
-void
-FootstepPlanner::resetTotally()
-{
-  ROS_INFO("Resetting planner and environment");
-  // reset the previously calculated paths
-  ivPath.clear();
-  ivPlanningStatesIds.clear();
-  // reinitialize the planner environment
-  ivPlannerEnvironmentPtr.reset(
-      new FootstepPlannerEnvironment(ivEnvironmentParams));
-  setPlanner();
-}
-
-
-bool
-FootstepPlanner::plan(bool force_new_plan)
-{
-  if (!ivMapPtr)
-  {
-    ROS_ERROR("FootstepPlanner has no map for planning yet.");
-    return false;
-  }
-  if (!ivGoalPoseSetUp || !ivStartPoseSetUp)
-  {
-    ROS_ERROR("FootstepPlanner has not set the start and/or goal pose "
-              "yet.");
-    return false;
-  }
-
-  if (force_new_plan
-      || ivPlannerType == "RSTARPlanner" || ivPlannerType == "ARAPlanner" )
-  {
-    reset();
-  }
-  // start the planning and return success
-  return run();
-}
-
-
-bool
-FootstepPlanner::replan()
-{
-  return plan(false);
-}
-
-
-bool
-FootstepPlanner::plan(const geometry_msgs::PoseStampedConstPtr start,
-                      const geometry_msgs::PoseStampedConstPtr goal)
-{
-  return plan(start->pose.position.x, start->pose.position.y,
-              tf::getYaw(start->pose.orientation),
-              goal->pose.position.x, goal->pose.position.y,
-              tf::getYaw(goal->pose.orientation));
-}
-
-
-bool
-FootstepPlanner::plan(float start_x, float start_y, float start_theta,
-                      float goal_x, float goal_y, float goal_theta)
-{
-  if (!(setStart(start_x, start_y, start_theta) &&
-      setGoal(goal_x, goal_y, goal_theta)))
-  {
-    return false;
-  }
-
-  return plan(false);
-}
-
-
-bool
-FootstepPlanner::planService(humanoid_nav_msgs::PlanFootsteps::Request &req,
-                             humanoid_nav_msgs::PlanFootsteps::Response &resp)
-{
-  bool result = plan(req.start.x, req.start.y, req.start.theta,
-                     req.goal.x, req.goal.y, req.goal.theta);
-
-  resp.costs = getPathCosts();
-  resp.footsteps.reserve(getPathSize());
-  resp.final_eps = ivPlannerPtr->get_final_epsilon();
-  resp.expanded_states = ivPlannerEnvironmentPtr->getNumExpandedStates();
-  extractFootstepsSrv(resp.footsteps);
-
-  resp.result = result;
-
-  // return true since service call was successful (independent from the
-  // success of the planning call)
-  return true;
-}
-
-
-bool
-FootstepPlanner::planFeetService(humanoid_nav_msgs::PlanFootstepsBetweenFeet::Request &req,
-                             humanoid_nav_msgs::PlanFootstepsBetweenFeet::Response &resp)
-{
-  // TODO check direction and change of states, force planning from scratch if does not fit
-  setStart(State(req.start_left.pose.x, req.start_left.pose.y, req.start_left.pose.theta, LEFT),
-           State(req.start_right.pose.x, req.start_right.pose.y, req.start_right.pose.theta, RIGHT));
-  setGoal(State(req.goal_left.pose.x, req.goal_left.pose.y, req.goal_left.pose.theta, LEFT),
-           State(req.goal_right.pose.x, req.goal_right.pose.y, req.goal_right.pose.theta, RIGHT));
-
-  bool result = plan(false);
-
-  resp.costs = getPathCosts();
-  resp.footsteps.reserve(getPathSize());
-  resp.final_eps = ivPlannerPtr->get_final_epsilon();
-  resp.expanded_states = ivPlannerEnvironmentPtr->getNumExpandedStates();
-  extractFootstepsSrv(resp.footsteps);
-
-  resp.result = result;
-
-  // return true since service call was successful (independent from the
-  // success of the planning call)
-  return true;
-}
-
-void
-FootstepPlanner::extractFootstepsSrv(std::vector<humanoid_nav_msgs::StepTarget> & footsteps) const{
-  humanoid_nav_msgs::StepTarget foot;
-  state_iter_t path_iter;
-  for (path_iter = getPathBegin(); path_iter != getPathEnd(); ++path_iter)
-  {
-    foot.pose.x = path_iter->getX();
-    foot.pose.y = path_iter->getY();
-    foot.pose.theta = path_iter->getTheta();
-    if (path_iter->getLeg() == LEFT)
-      foot.leg = humanoid_nav_msgs::StepTarget::left;
-    else if (path_iter->getLeg() == RIGHT)
-      foot.leg = humanoid_nav_msgs::StepTarget::right;
-    else
-    {
-      ROS_ERROR("Footstep pose at (%f, %f, %f) is set to NOLEG!",
-                path_iter->getX(), path_iter->getY(),
-                path_iter->getTheta());
-      continue;
-    }
-
-    footsteps.push_back(foot);
-  }
-
-}
-
-
-void
-FootstepPlanner::goalPoseCallback(
-    const geometry_msgs::PoseStampedConstPtr& goal_pose)
-{
-  // update the goal states in the environment
-  if (setGoal(goal_pose))
-  {
-    if (ivStartPoseSetUp)
-    {
-      // force planning from scratch when backwards direction
-      plan(!ivEnvironmentParams.forward_search);
-    }
-  }
-}
-
-
-void
-FootstepPlanner::startPoseCallback(
-    const geometry_msgs::PoseWithCovarianceStampedConstPtr& start_pose)
-{
-  if (setStart(start_pose->pose.pose.position.x,
-               start_pose->pose.pose.position.y,
-               tf::getYaw(start_pose->pose.pose.orientation)))
-  {
-    if (ivGoalPoseSetUp)
-    {
-      // force planning from scratch when forward direction
-      plan(ivEnvironmentParams.forward_search);
-    }
-  }
-}
-
-
-void
-FootstepPlanner::mapCallback(
-    const nav_msgs::OccupancyGridConstPtr& occupancy_map)
-{
-  GridMap2DPtr map(new GridMap2D(occupancy_map));
-
-  // new map: update the map information
-  if (updateMap(map))
-  {
-    // NOTE: update map currently simply resets the planner, i.e. replanning
-    // here is in fact a planning from the scratch
-    plan(false);
-  }
-}
-
-
-bool
-FootstepPlanner::setGoal(const geometry_msgs::PoseStampedConstPtr goal_pose)
-{
-  return setGoal(goal_pose->pose.position.x,
-                 goal_pose->pose.position.y,
-                 tf::getYaw(goal_pose->pose.orientation));
-}
-
-
-bool
-FootstepPlanner::setGoal(float x, float y, float theta)
-{
-  if (!ivMapPtr)
-  {
-    ROS_ERROR("Distance map hasn't been initialized yet.");
-    return false;
-  }
-
-  State goal(x, y, theta, NOLEG);
-  State foot_left = getFootPose(goal, LEFT);
-  State foot_right = getFootPose(goal, RIGHT);
-
-  if (ivPlannerEnvironmentPtr->occupied(foot_left) ||
-      ivPlannerEnvironmentPtr->occupied(foot_right))
-  {
-    ROS_ERROR("Goal pose at (%f %f %f) not accessible.", x, y, theta);
-    ivGoalPoseSetUp = false;
-    return false;
-  }
-  ivGoalFootLeft = foot_left;
-  ivGoalFootRight = foot_right;
-
-  ivGoalPoseSetUp = true;
-  ROS_INFO("Goal pose set to (%f %f %f)", x, y, theta);
-
-  return true;
-}
-
-bool
-FootstepPlanner::setGoal(const State& left_foot, const State& right_foot)
-{
-  if (ivPlannerEnvironmentPtr->occupied(left_foot) ||
-      ivPlannerEnvironmentPtr->occupied(right_foot))
-  {
-    ivGoalPoseSetUp = false;
-    return false;
-  }
-  ivGoalFootLeft = left_foot;
-  ivGoalFootRight = right_foot;
-
-  ivGoalPoseSetUp = true;
-
-  return true;
-}
-
-
-bool
-FootstepPlanner::setStart(const geometry_msgs::PoseStampedConstPtr start_pose)
-{
-  return setStart(start_pose->pose.position.x,
-                  start_pose->pose.position.y,
-                  tf::getYaw(start_pose->pose.orientation));
-}
-
-
-bool
-FootstepPlanner::setStart(const State& left_foot, const State& right_foot)
-{
-  if (ivPlannerEnvironmentPtr->occupied(left_foot) ||
-      ivPlannerEnvironmentPtr->occupied(right_foot))
-  {
-    ivStartPoseSetUp = false;
-    return false;
-  }
-  ivStartFootLeft = left_foot;
-  ivStartFootRight = right_foot;
-
-  ivStartPoseSetUp = true;
-
-  return true;
-}
-
-
-bool
-FootstepPlanner::setStart(float x, float y, float theta)
-{
-  if (!ivMapPtr)
-  {
-    ROS_ERROR("Distance map hasn't been initialized yet.");
-    return false;
-  }
-
-  State start(x, y, theta, NOLEG);
-  State foot_left = getFootPose(start, LEFT);
-  State foot_right = getFootPose(start, RIGHT);
-
-  bool success = setStart(foot_left, foot_right);
-  if (success)
-    ROS_INFO("Start pose set to (%f %f %f)", x, y, theta);
-  else
-    ROS_ERROR("Start pose (%f %f %f) not accessible.", x, y, theta);
-
-  // publish visualization:
-  geometry_msgs::PoseStamped start_pose;
-  start_pose.pose.position.x = x;
-  start_pose.pose.position.y = y;
-  start_pose.pose.position.z = 0.025;
-  start_pose.pose.orientation = tf::createQuaternionMsgFromYaw(theta);
-  start_pose.header.frame_id = ivMapPtr->getFrameID();
-  start_pose.header.stamp = ros::Time::now();
-  ivStartPoseVisPub.publish(start_pose);
-
-  return success;
-}
-
-
-bool
-FootstepPlanner::updateMap(const GridMap2DPtr map)
-{
-  // store old map pointer locally
-  GridMap2DPtr old_map = ivMapPtr;
-  // store new map
-  ivMapPtr.reset();
-  ivMapPtr = map;
-
-  // check if a previous map and a path existed
-  if (old_map && (bool)ivPath.size())
-  {
-    updateEnvironment(old_map);
-    return true;
-  }
-
-  // ..otherwise the environment's map can simply be updated
-  ivPlannerEnvironmentPtr->updateMap(map);
-  return false;
-}
-
-
-void
-FootstepPlanner::updateEnvironment(const GridMap2DPtr old_map)
-{
-  ROS_INFO("Reseting the planning environment.");
-  // reset environment
-  resetTotally();
-  // set the new map
-  ivPlannerEnvironmentPtr->updateMap(ivMapPtr);
-
-
-  // The following is not used any more
-
-  // Replanning based on old planning info currently disabled
-  //        // TODO: handle size changes of the map; currently the planning
-  //        // information is reseted
-  //
-  //        if (ivPlannerType == "ADPlanner" &&
-  //            ivMapPtr->getResolution() == old_map->getResolution() &&
-  //            ivMapPtr->size().height == old_map->size().height &&
-  //            ivMapPtr->size().width == old_map->size().width)
-  //        {
-  //            ROS_INFO("Received an updated map => change detection");
-  //
-  //            std::vector<State2> changed_states;
-  //            cv::Mat changed_cells;
-  //
-  //            // get new occupied cells only (0: occupied in binary map)
-  //            // changedCells(x,y) = old(x,y) AND NOT(new(x,y))
-  ////          cv::bitwise_not(gridMap->binaryMap(), changedCells);
-  ////          cv::bitwise_and(ivMapPtr->binaryMap(), changedCells, changedCells);
-  //
-  //            // to get all changed cells (new free and occupied) use XOR:
-  //            cv::bitwise_xor(old_map->binaryMap(), ivMapPtr->binaryMap(),
-  //                            changed_cells);
-  //
-  //            //inflate by outer foot radius:
-  //            cv::bitwise_not(changed_cells, changed_cells); // invert for distanceTransform
-  //            cv::Mat changedDistMap = cv::Mat(changed_cells.size(), CV_32FC1);
-  //            cv::distanceTransform(changed_cells, changedDistMap,
-  //                                  CV_DIST_L2, CV_DIST_MASK_PRECISE);
-  //            double max_foot_radius = sqrt(
-  //                    pow(std::abs(ivOriginFootShiftX) + ivFootsizeX / 2.0, 2.0) +
-  //                    pow(std::abs(ivOriginFootShiftY) + ivFootsizeY / 2.0, 2.0))
-  //                    / ivMapPtr->getResolution();
-  //            changed_cells = (changedDistMap <= max_foot_radius); // threshold, also invert back
-  //
-  //            // loop over changed cells (now marked with 255 in the mask):
-  //            unsigned int num_changed_cells = 0;
-  //            double wx, wy;
-  //            State2 s;
-  //            for (int y = 0; y < changed_cells.rows; ++y)
-  //            {
-  //                for (int x = 0; x < changed_cells.cols; ++x)
-  //                {
-  //                    if (changed_cells.at<uchar>(x,y) == 255)
-  //                    {
-  //                        ++num_changed_cells;
-  //                        ivMapPtr->mapToWorld(x, y, wx, wy);
-  //                        s.setX(wx);
-  //                        s.setY(wy);
-  //                        // on each grid cell ivNumAngleBins-many planning states
-  //                        // can be placed (if the resolution of the grid cells is
-  //                        // the same as of the planning state grid)
-  //                        for (int theta = 0; theta < ivNumAngleBins; ++theta)
-  //                        {
-  //                            s.setTheta(angle_cell_2_state(theta, ivNumAngleBins));
-  //                            changed_states.push_back(s);
-  //                        }
-  //                    }
-  //                }
-  //            }
-  //
-  //            if (num_changed_cells == 0)
-  //            {
-  //                ROS_INFO("old map equals new map; no replanning necessary");
-  //                return;
-  //            }
-  //
-  //            ROS_INFO("%d changed map cells found", num_changed_cells);
-  //            if (num_changed_cells <= ivChangedCellsLimit)
-  //            {
-  //                // update planer
-  //                ROS_INFO("Use old information in new planning taks");
-  //
-  //                std::vector<int> neighbour_ids;
-  //                if (ivForwardSearch)
-  //                    ivPlannerEnvironmentPtr->getSuccsOfGridCells(
-  //                            changed_states, &neighbour_ids);
-  //                else
-  //                    ivPlannerEnvironmentPtr->getPredsOfGridCells(
-  //                            changed_states, &neighbour_ids);
-  //
-  //                boost::shared_ptr<ADPlanner> h =
-  //                        boost::dynamic_pointer_cast<ADPlanner>(ivPlannerPtr);
-  //                h->costs_changed(PlanningStateChangeQuery(neighbour_ids));
-  //            }
-  //            else
-  //            {
-  //                ROS_INFO("Reset old information in new planning task");
-  //                // reset planner
-  //                ivPlannerEnvironmentPtr->reset();
-  //                setPlanner();
-  //                //ivPlannerPtr->force_planning_from_scratch();
-  //            }
-  //        }
-  //        else
-  //        {
-  //            ROS_INFO("Reset old information in new planning task");
-  //            // reset planner
-  //            ivPlannerEnvironmentPtr->reset();
-  //            setPlanner();
-  //            //ivPlannerPtr->force_planning_from_scratch();
-  //        }
-}
-
-
-State
-FootstepPlanner::getFootPose(const State& robot, Leg leg)
-{
-  double shift_x = -sin(robot.getTheta()) * ivFootSeparation / 2.0;
-  double shift_y =  cos(robot.getTheta()) * ivFootSeparation / 2.0;
-
-  double sign = -1.0;
-  if (leg == LEFT)
-    sign = 1.0;
-
-  return State(robot.getX() + sign * shift_x,
-               robot.getY() + sign * shift_y,
-               robot.getTheta(),
-               leg);
-}
-
-
-bool
-FootstepPlanner::pathIsNew(const std::vector<int>& new_path)
-{
-  if (new_path.size() != ivPlanningStatesIds.size())
-    return true;
-
-  bool unequal = true;
-  for (unsigned i = 0; i < new_path.size(); ++i)
-    unequal = new_path[i] != ivPlanningStatesIds[i] && unequal;
-
-  return unequal;
-}
-
-
-void
-FootstepPlanner::clearFootstepPathVis(unsigned num_footsteps)
-{
-  visualization_msgs::Marker marker;
-  visualization_msgs::MarkerArray marker_msg;
-
-  marker.header.stamp = ros::Time::now();
-  marker.header.frame_id = ivMapPtr->getFrameID();
-
-
-  if (num_footsteps < 1)
-    num_footsteps = ivLastMarkerMsgSize;
-
-  for (unsigned i = 0; i < num_footsteps; ++i)
-  {
-    marker.ns = ivMarkerNamespace;
-    marker.id = i;
-    marker.action = visualization_msgs::Marker::DELETE;
-
-    marker_msg.markers.push_back(marker);
-  }
-
-  ivFootstepPathVisPub.publish(marker_msg);
-}
-
-
-void
-FootstepPlanner::broadcastExpandedNodesVis()
-{
-  if (ivExpandedStatesVisPub.getNumSubscribers() > 0)
-  {
-    sensor_msgs::PointCloud cloud_msg;
-    geometry_msgs::Point32 point;
-    std::vector<geometry_msgs::Point32> points;
-
-    State s;
-    FootstepPlannerEnvironment::exp_states_2d_iter_t state_id_it;
-    for(state_id_it = ivPlannerEnvironmentPtr->getExpandedStatesStart();
-        state_id_it != ivPlannerEnvironmentPtr->getExpandedStatesEnd();
-        ++state_id_it)
-    {
-      point.x = cell_2_state(state_id_it->first,
-                             ivEnvironmentParams.cell_size);
-      point.y = cell_2_state(state_id_it->second,
-                             ivEnvironmentParams.cell_size);
-      point.z = 0.01;
-      points.push_back(point);
-    }
-    cloud_msg.header.stamp = ros::Time::now();
-    cloud_msg.header.frame_id = ivMapPtr->getFrameID();
-
-    cloud_msg.points = points;
-
-    ivExpandedStatesVisPub.publish(cloud_msg);
-  }
-}
-
-
-void
-FootstepPlanner::broadcastFootstepPathVis()
-{
-  if (getPathSize() == 0)
-  {
-    ROS_INFO("no path has been extracted yet");
-    return;
-  }
-
-  clearFootstepPathVis(0);
-
-  visualization_msgs::Marker marker;
-  visualization_msgs::MarkerArray broadcast_msg;
-  std::vector<visualization_msgs::Marker> markers;
-
-  int markers_counter = 0;
-
-  marker.header.stamp = ros::Time::now();
-  marker.header.frame_id = ivMapPtr->getFrameID();
-
-  // add the missing start foot to the publish vector for visualization:
-  if (ivPath.front().getLeg() == LEFT)
-    footPoseToMarker(ivStartFootRight, &marker);
-  else
-    footPoseToMarker(ivStartFootLeft, &marker);
-  marker.id = markers_counter++;
-  markers.push_back(marker);
-
-  // add the footsteps of the path to the publish vector
-  for(state_iter_t path_iter = getPathBegin(); path_iter != getPathEnd();
-      ++path_iter)
-  {
-    footPoseToMarker(*path_iter, &marker);
-    marker.id = markers_counter++;
-    markers.push_back(marker);
-  }
-
-  broadcast_msg.markers = markers;
-  ivLastMarkerMsgSize = markers.size();
-
-  ivFootstepPathVisPub.publish(broadcast_msg);
-}
-
-
-void
-FootstepPlanner::broadcastRandomNodesVis()
-{
-  if (ivRandomStatesVisPub.getNumSubscribers() > 0){
-    sensor_msgs::PointCloud cloud_msg;
-    geometry_msgs::Point32 point;
-    std::vector<geometry_msgs::Point32> points;
-    visualization_msgs::Marker marker;
-    visualization_msgs::MarkerArray broadcast_msg;
-    std::vector<visualization_msgs::Marker> markers;
-
-    marker.header.stamp = ros::Time::now();
-    marker.header.frame_id = ivMapPtr->getFrameID();
-
-    State s;
-    FootstepPlannerEnvironment::exp_states_iter_t state_id_iter;
-    for(state_id_iter = ivPlannerEnvironmentPtr->getRandomStatesStart();
-        state_id_iter != ivPlannerEnvironmentPtr->getRandomStatesEnd();
-        ++state_id_iter)
-    {
-      if (!ivPlannerEnvironmentPtr->getState(*state_id_iter, &s))
-      {
-        ROS_WARN("Could not get random state %d", *state_id_iter);
-      }
-      else
-      {
-        point.x = s.getX();
-        point.y = s.getY();
-        point.z = 0.01;
-        points.push_back(point);
-      }
-    }
-    cloud_msg.header.stamp = ros::Time::now();
-    cloud_msg.header.frame_id = ivMapPtr->getFrameID();
-
-    cloud_msg.points = points;
-
-    ivRandomStatesVisPub.publish(cloud_msg);
-  }
-}
-
-
-void
-FootstepPlanner::broadcastPathVis()
-{
-  if (getPathSize() == 0)
-  {
-    ROS_INFO("no path has been extracted yet");
-    return;
-  }
-
-  nav_msgs::Path path_msg;
-  geometry_msgs::PoseStamped state;
-
-  state.header.stamp = ros::Time::now();
-  state.header.frame_id = ivMapPtr->getFrameID();
-
-  state_iter_t path_iter;
-  for(path_iter = getPathBegin(); path_iter != getPathEnd(); ++path_iter)
-  {
-    state.pose.position.x = path_iter->getX();
-    state.pose.position.y = path_iter->getY();
-    path_msg.poses.push_back(state);
-  }
-
-  path_msg.header = state.header;
-  ivPathVisPub.publish(path_msg);
-}
-
-
-void
-FootstepPlanner::footPoseToMarker(const State& foot_pose,
-                                  visualization_msgs::Marker* marker)
-{
-  marker->header.stamp = ros::Time::now();
-  marker->header.frame_id = ivMapPtr->getFrameID();
-  marker->ns = ivMarkerNamespace;
-  marker->type = visualization_msgs::Marker::CUBE;
-  marker->action = visualization_msgs::Marker::ADD;
-
-  float cos_theta = cos(foot_pose.getTheta());
-  float sin_theta = sin(foot_pose.getTheta());
-  float x_shift = cos_theta * ivEnvironmentParams.foot_origin_shift_x -
-                  sin_theta * ivEnvironmentParams.foot_origin_shift_y;
-  float y_shift;
-  if (foot_pose.getLeg() == LEFT)
-    y_shift = sin_theta * ivEnvironmentParams.foot_origin_shift_x +
-              cos_theta * ivEnvironmentParams.foot_origin_shift_y;
-  else // leg == RLEG
-    y_shift = sin_theta * ivEnvironmentParams.foot_origin_shift_x -
-              cos_theta * ivEnvironmentParams.foot_origin_shift_y;
-  marker->pose.position.x = foot_pose.getX() + x_shift;
-  marker->pose.position.y = foot_pose.getY() + y_shift;
-  marker->pose.position.z = ivEnvironmentParams.footsize_z / 2.0;
-  tf::quaternionTFToMsg(tf::createQuaternionFromYaw(foot_pose.getTheta()),
-                        marker->pose.orientation);
-
-  marker->scale.x = ivEnvironmentParams.footsize_x; // - 0.01;
-  marker->scale.y = ivEnvironmentParams.footsize_y; // - 0.01;
-  marker->scale.z = ivEnvironmentParams.footsize_z;
-
-  // TODO: make color configurable?
-  if (foot_pose.getLeg() == RIGHT)
-  {
-    marker->color.r = 0.0f;
-    marker->color.g = 1.0f;
-  }
-  else // leg == LEFT
-      {
-    marker->color.r = 1.0f;
-    marker->color.g = 0.0f;
-      }
-  marker->color.b = 0.0;
-  marker->color.a = 0.6;
-
-  marker->lifetime = ros::Duration();
-}
-}
diff --git a/humanoid_navigation-for-git/footstep_planner/src/FootstepPlannerEnvironment.cpp b/humanoid_navigation-for-git/footstep_planner/src/FootstepPlannerEnvironment.cpp
deleted file mode 100644
index 79c2b4f..0000000
--- a/humanoid_navigation-for-git/footstep_planner/src/FootstepPlannerEnvironment.cpp
+++ /dev/null
@@ -1,1301 +0,0 @@
-/*
- * A footstep planner for humanoid robots
- *
- * Copyright 2010-2011 Johannes Garimort, Armin Hornung, University of Freiburg
- * http://www.ros.org/wiki/footstep_planner
- *
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, version 3.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-#include <footstep_planner/FootstepPlannerEnvironment.h>
-
-
-namespace footstep_planner
-{
-FootstepPlannerEnvironment::FootstepPlannerEnvironment(
-    const environment_params& params)
-: DiscreteSpaceInformation(),
-  ivIdPlanningGoal(-1),
-  ivIdStartFootLeft(-1),
-  ivIdStartFootRight(-1),
-  ivIdGoalFootLeft(-1),
-  ivIdGoalFootRight(-1),
-  ivpStateHash2State(
-    new std::vector<const PlanningState*>[params.hash_table_size]),
-  ivFootstepSet(params.footstep_set),
-  ivHeuristicConstPtr(params.heuristic),
-  ivFootsizeX(params.footsize_x),
-  ivFootsizeY(params.footsize_y),
-  ivOriginFootShiftX(params.foot_origin_shift_x),
-  ivOriginFootShiftY(params.foot_origin_shift_y),
-  ivMaxFootstepX(disc_val(params.max_footstep_x, params.cell_size)),
-  ivMaxFootstepY(disc_val(params.max_footstep_y, params.cell_size)),
-  ivMaxFootstepTheta(
-    angle_state_2_cell(params.max_footstep_theta, params.num_angle_bins)),
-  ivMaxInvFootstepX(disc_val(params.max_inverse_footstep_x, params.cell_size)),
-  ivMaxInvFootstepY(disc_val(params.max_inverse_footstep_y, params.cell_size)),
-  ivMaxInvFootstepTheta(
-    angle_state_2_cell(params.max_inverse_footstep_theta,
-                       params.num_angle_bins)),
-  ivStepCost(cvMmScale * params.step_cost),
-  ivCollisionCheckAccuracy(params.collision_check_accuracy),
-  ivHashTableSize(params.hash_table_size),
-  ivCellSize(params.cell_size),
-  ivNumAngleBins(params.num_angle_bins),
-  ivForwardSearch(params.forward_search),
-  ivMaxStepWidth(double(disc_val(params.max_step_width, params.cell_size))),
-  ivNumRandomNodes(params.num_random_nodes),
-  ivRandomNodeDist(params.random_node_distance / ivCellSize),
-  ivHeuristicScale(params.heuristic_scale),
-  ivHeuristicExpired(true),
-  ivNumExpandedStates(0)
-{
-  int num_angle_bins_half = ivNumAngleBins / 2;
-  if (ivMaxFootstepTheta >= num_angle_bins_half)
-    ivMaxFootstepTheta -= ivNumAngleBins;
-  if (ivMaxInvFootstepTheta >= num_angle_bins_half)
-    ivMaxInvFootstepTheta -= ivNumAngleBins;
-
-  int num_x = ivMaxFootstepX - ivMaxInvFootstepX + 1;
-  ivpStepRange = new bool[num_x * (ivMaxFootstepY - ivMaxInvFootstepY + 1)];
-
-  // determine whether a (x,y) translation can be performed by the robot by
-  // checking if it is within a certain area of performable steps
-  for (int j = ivMaxInvFootstepY; j <= ivMaxFootstepY; ++j)
-  {
-    for (int i = ivMaxInvFootstepX; i <= ivMaxFootstepX; ++i)
-    {
-      ivpStepRange[(j - ivMaxInvFootstepY) * num_x + (i - ivMaxInvFootstepX)] =
-        pointWithinPolygon(i, j, params.step_range);
-    }
-  }
-}
-
-
-FootstepPlannerEnvironment::~FootstepPlannerEnvironment()
-{
-  reset();
-  if (ivpStateHash2State)
-  {
-    delete[] ivpStateHash2State;
-    ivpStateHash2State = NULL;
-  }
-  if (ivpStepRange)
-  {
-    delete[] ivpStepRange;
-    ivpStepRange = NULL;
-  }
-}
-
-
-std::pair<int, int>
-FootstepPlannerEnvironment::updateGoal(const State& foot_left,
-                                       const State& foot_right)
-{
-  // keep the old IDs
-  int goal_foot_id_left = ivIdGoalFootLeft;
-  int goal_foot_id_right = ivIdGoalFootRight;
-
-  // update the states for both feet (if necessary)
-  const PlanningState* p_foot_left = getHashEntry(foot_left);
-  if (p_foot_left == NULL)
-    p_foot_left = createNewHashEntry(foot_left);
-  const PlanningState* p_foot_right = getHashEntry(foot_right);
-  if (p_foot_right == NULL)
-    p_foot_right = createNewHashEntry(foot_right);
-  ivIdGoalFootLeft = p_foot_left->getId();
-  ivIdGoalFootRight = p_foot_right->getId();
-  // check if everything has been set correctly
-  assert(ivIdGoalFootLeft != -1);
-  assert(ivIdGoalFootRight != -1);
-
-  // if using the forward search a change of the goal states involves an
-  // update of the heuristic
-  if (ivForwardSearch)
-  {
-    // check if the goal states have been changed
-    if (goal_foot_id_left != ivIdGoalFootLeft &&
-        goal_foot_id_right != ivIdGoalFootRight)
-    {
-      ivHeuristicExpired = true;
-      setStateArea(*p_foot_left, *p_foot_right);
-    }
-  }
-
-  return std::pair<int, int>(ivIdGoalFootLeft, ivIdGoalFootRight);
-}
-
-
-std::pair<int, int>
-FootstepPlannerEnvironment::updateStart(const State& foot_left,
-                                        const State& foot_right)
-{
-  // keep the old IDs
-  int start_foot_id_left = ivIdStartFootLeft;
-  int start_foot_id_right = ivIdStartFootRight;
-
-  // update the states for both feet (if necessary)
-  const PlanningState* p_foot_left = getHashEntry(foot_left);
-  if (p_foot_left == NULL)
-    p_foot_left = createNewHashEntry(foot_left);
-  const PlanningState* p_foot_right = getHashEntry(foot_right);
-  if (p_foot_right == NULL)
-    p_foot_right = createNewHashEntry(foot_right);
-  ivIdStartFootLeft = p_foot_left->getId();
-  ivIdStartFootRight = p_foot_right->getId();
-  // check if everything has been set correctly
-  assert(ivIdStartFootLeft != -1);
-  assert(ivIdStartFootRight != -1);
-
-  // if using the backward search a change of the start states involves an
-  // update of the heuristic
-  if (!ivForwardSearch)
-  {
-    // check if the start states have been changed
-    if (start_foot_id_left != ivIdStartFootLeft ||
-        start_foot_id_right != ivIdStartFootRight)
-    {
-      ivHeuristicExpired = true;
-      setStateArea(*p_foot_left, *p_foot_right);
-    }
-  }
-
-  return std::pair<int, int>(ivIdStartFootLeft, ivIdStartFootRight);
-}
-
-
-const PlanningState*
-FootstepPlannerEnvironment::createNewHashEntry(const State& s)
-{
-  PlanningState tmp(s, ivCellSize, ivNumAngleBins, ivHashTableSize);
-  return createNewHashEntry(tmp);
-}
-
-
-const PlanningState*
-FootstepPlannerEnvironment::createNewHashEntry(const PlanningState& s)
-{
-  unsigned int state_hash = s.getHashTag();
-  PlanningState* new_state = new PlanningState(s);
-
-  size_t state_id = ivStateId2State.size();
-  assert(state_id < (size_t)std::numeric_limits<int>::max());
-
-  // insert the ID of the new state into the corresponding map
-  new_state->setId(state_id);
-  ivStateId2State.push_back(new_state);
-
-  // insert the new state into the hash map at the corresponding position
-  ivpStateHash2State[state_hash].push_back(new_state);
-
-  int* entry = new int[NUMOFINDICES_STATEID2IND];
-  StateID2IndexMapping.push_back(entry);
-  for(int i = 0; i < NUMOFINDICES_STATEID2IND; ++i)
-  {
-    StateID2IndexMapping[state_id][i] = -1;
-  }
-
-  assert(StateID2IndexMapping.size() - 1 == state_id);
-
-  return new_state;
-}
-
-
-const PlanningState*
-FootstepPlannerEnvironment::getHashEntry(const State& s)
-{
-  PlanningState tmp(s, ivCellSize, ivNumAngleBins, ivHashTableSize);
-  return getHashEntry(tmp);
-}
-
-
-const PlanningState*
-FootstepPlannerEnvironment::getHashEntry(const PlanningState& s)
-{
-  unsigned int state_hash = s.getHashTag();
-  std::vector<const PlanningState*>::const_iterator state_iter;
-  for (state_iter = ivpStateHash2State[state_hash].begin();
-       state_iter != ivpStateHash2State[state_hash].end();
-       ++state_iter)
-  {
-    if (*(*state_iter) == s)
-      return *state_iter;
-  }
-
-  return NULL;
-}
-
-const PlanningState*
-FootstepPlannerEnvironment::createHashEntryIfNotExists(
-    const PlanningState& s)
-{
-  const PlanningState* hash_entry = getHashEntry(s);
-  if (hash_entry == NULL)
-    hash_entry = createNewHashEntry(s);
-
-  return hash_entry;
-
-}
-
-
-int
-FootstepPlannerEnvironment::stepCost(const PlanningState& a,
-                                     const PlanningState& b)
-{
-  if (a == b)
-    return 0;
-
-  // NOTE: instead of using cont_val() the calculation is done directly
-      // here because cont_val() truncates the input length to int
-  double dist = euclidean_distance(
-      a.getX(), a.getY(), b.getX(), b.getY()) * ivCellSize;
-
-  return int(cvMmScale * dist) + ivStepCost;
-}
-
-
-bool
-FootstepPlannerEnvironment::occupied(const State& s)
-{
-  return occupied(PlanningState(s, ivCellSize, ivNumAngleBins,
-                                ivHashTableSize));
-}
-
-
-bool
-FootstepPlannerEnvironment::occupied(const PlanningState& s)
-{
-  double x = cell_2_state(s.getX(), ivCellSize);
-  double y = cell_2_state(s.getY(), ivCellSize);
-  // collision check for the planning state
-  if (ivMapPtr->isOccupiedAt(x,y))
-    return true;
-  double theta = angle_cell_2_state(s.getTheta(), ivNumAngleBins);
-  double theta_cos = cos(theta);
-  double theta_sin = sin(theta);
-
-  // transform the planning state to the foot center
-  x += theta_cos*ivOriginFootShiftX - theta_sin*ivOriginFootShiftY;
-  if (s.getLeg() == LEFT)
-    y += theta_sin*ivOriginFootShiftX + theta_cos*ivOriginFootShiftY;
-  else // leg == RLEG
-    y += theta_sin*ivOriginFootShiftX - theta_cos*ivOriginFootShiftY;
-
-  // collision check for the foot center
-  return collision_check(x, y, theta, ivFootsizeX, ivFootsizeY,
-                         ivCollisionCheckAccuracy, *ivMapPtr);
-}
-
-
-bool
-FootstepPlannerEnvironment::getState(unsigned int id, State* s)
-{
-  if (id >= ivStateId2State.size())
-    return false;
-
-  const PlanningState* planning_state = ivStateId2State[id];
-  s->setX(cell_2_state(planning_state->getX(), ivCellSize));
-  s->setY(cell_2_state(planning_state->getY(), ivCellSize));
-  s->setTheta(angles::normalize_angle(angle_cell_2_state(
-      planning_state->getTheta(), ivNumAngleBins)));
-  s->setLeg(planning_state->getLeg());
-
-  return true;
-}
-
-
-void
-FootstepPlannerEnvironment::updateMap(gridmap_2d::GridMap2DPtr map)
-{
-  ivMapPtr.reset();
-  ivMapPtr = map;
-
-  if (ivHeuristicConstPtr->getHeuristicType() == Heuristic::PATH_COST)
-  {
-    boost::shared_ptr<PathCostHeuristic> h =
-        boost::dynamic_pointer_cast<PathCostHeuristic>(
-            ivHeuristicConstPtr);
-    h->updateMap(map);
-
-    ivHeuristicExpired = true;
-  }
-}
-
-
-void
-FootstepPlannerEnvironment::updateHeuristicValues()
-{
-  // check if start and goal have been set
-  assert(ivIdGoalFootLeft != -1 && ivIdGoalFootRight != -1);
-  assert(ivIdStartFootLeft != -1 && ivIdStartFootRight != -1);
-
-  if (!ivHeuristicExpired)
-    return;
-
-  ROS_INFO("Updating the heuristic values.");
-
-  if (ivHeuristicConstPtr->getHeuristicType() == Heuristic::PATH_COST)
-  {
-    boost::shared_ptr<PathCostHeuristic> h =
-        boost::dynamic_pointer_cast<PathCostHeuristic>(
-            ivHeuristicConstPtr);
-    MDPConfig MDPCfg;
-    InitializeMDPCfg(&MDPCfg);
-    const PlanningState* start = ivStateId2State[MDPCfg.startstateid];
-    const PlanningState* goal = ivStateId2State[MDPCfg.goalstateid];
-
-    // NOTE: start/goal state are set to left leg
-    bool success;
-    if (ivForwardSearch)
-      success = h->calculateDistances(*start, *goal);
-    else
-      success = h->calculateDistances(*goal, *start);
-    if (!success)
-    {
-      ROS_ERROR("Failed to calculate path cost heuristic.");
-      exit(1);
-    }
-  }
-
-  ROS_DEBUG("Finished updating the heuristic values.");
-  ivHeuristicExpired = false;
-}
-
-
-void
-FootstepPlannerEnvironment::reset()
-{
-  for(unsigned int i = 0; i < ivStateId2State.size(); ++i)
-  {
-    if (ivStateId2State[i])
-    {
-      delete ivStateId2State[i];
-    }
-  }
-  ivStateId2State.clear();
-
-  if (ivpStateHash2State)
-  {
-    for(int i = 0; i < ivHashTableSize; ++i)
-      ivpStateHash2State[i].clear();
-  }
-
-  StateID2IndexMapping.clear();
-
-  ivExpandedStates.clear();
-  ivNumExpandedStates = 0;
-  ivRandomStates.clear();
-
-  ivIdPlanningGoal = -1;
-
-  ivIdGoalFootLeft = -1;
-  ivIdGoalFootRight = -1;
-  ivIdStartFootLeft = -1;
-  ivIdStartFootRight = -1;
-
-  ivHeuristicExpired = true;
-}
-
-
-bool
-FootstepPlannerEnvironment::closeToStart(const PlanningState& from)
-{
-  // NOTE: "goal check" for backward planning
-  const PlanningState* start;
-  if (from.getLeg() == RIGHT)
-    start = ivStateId2State[ivIdStartFootLeft];
-  else
-    start = ivStateId2State[ivIdStartFootRight];
-
-  return reachable(*start, from);
-}
-
-
-bool
-FootstepPlannerEnvironment::closeToGoal(const PlanningState& from)
-{
-  // NOTE: "goal check" for forward planning
-  const PlanningState* goal;
-  if (from.getLeg() == RIGHT)
-    goal = ivStateId2State[ivIdGoalFootLeft];
-  else
-    goal = ivStateId2State[ivIdGoalFootRight];
-
-  // TODO: check step if reachable == True
-  return reachable(from, *goal);
-}
-
-
-bool
-FootstepPlannerEnvironment::reachable(const PlanningState& from,
-                                      const PlanningState& to)
-{
-  if (euclidean_distance(from.getX(), from.getY(), to.getX(), to.getY()) >
-      ivMaxStepWidth)
-  {
-      return false;
-  }
-
-  tf::Transform step =
-    tf::Pose(
-      tf::createQuaternionFromYaw(
-        angle_cell_2_state(from.getTheta(), ivNumAngleBins)),
-      tf::Point(cell_2_state(from.getX(), ivCellSize),
-                cell_2_state(from.getY(), ivCellSize),
-                0.0)).inverse() *
-    tf::Pose(
-      tf::createQuaternionFromYaw(
-        angle_cell_2_state(from.getTheta(), ivNumAngleBins)),
-      tf::Point(cell_2_state(to.getX(), ivCellSize),
-                cell_2_state(to.getY(), ivCellSize),
-                0.0));
-  int footstep_x = disc_val(step.getOrigin().x(), ivCellSize);
-  int footstep_y = disc_val(step.getOrigin().y(), ivCellSize);
-
-  // calculate the footstep rotation
-  int footstep_theta = to.getTheta() - from.getTheta();
-  // transform the value into [-ivNumAngleBins/2..ivNumAngleBins/2)
-  int num_angle_bins_half = ivNumAngleBins / 2;
-  if (footstep_theta >= num_angle_bins_half)
-    footstep_theta -= ivNumAngleBins;
-  else if (footstep_theta < -num_angle_bins_half)
-    footstep_theta += ivNumAngleBins;
-
-  // adjust for the left foot
-  if (from.getLeg() == LEFT)
-  {
-    footstep_y = -footstep_y;
-    footstep_theta = -footstep_theta;
-  }
-
-  // check if footstep_x is not within the executable range
-  if (footstep_x > ivMaxFootstepX || footstep_x < ivMaxInvFootstepX)
-      return false;
-  // check if footstep_y is not within the executable range
-  if (footstep_y > ivMaxFootstepY || footstep_y < ivMaxInvFootstepY)
-      return false;
-  // check if footstep_theta is not within the executable range
-  if (footstep_theta > ivMaxFootstepTheta ||
-      footstep_theta < ivMaxInvFootstepTheta)
-      return false;
-  return ivpStepRange[(footstep_y - ivMaxInvFootstepY) *
-                      (ivMaxFootstepX - ivMaxInvFootstepX + 1) +
-                      (footstep_x - ivMaxInvFootstepX)];
-
-//  // get the (continuous) orientation of state 'from'
-//  double orient = -(angle_cell_2_state(from.getTheta(), ivNumAngleBins));
-//  double orient_cos = cos(orient);
-//  double orient_sin = sin(orient);
-//
-//  // calculate the footstep shift and rotate it into the 'from'-view
-//  int footstep_x = to.getX() - from.getX();
-//  int footstep_y = to.getY() - from.getY();
-//  double shift_x = footstep_x * orient_cos - footstep_y * orient_sin;
-//  double shift_y = footstep_x * orient_sin + footstep_y * orient_cos;
-//  footstep_x = round(shift_x);
-//  footstep_y = round(shift_y);
-//
-//  // calculate the footstep rotation
-//  int footstep_theta = to.getTheta() - from.getTheta();
-//
-//  // transform the value into [-ivNumAngleBins/2..ivNumAngleBins/2)
-//  int num_angle_bins_half = ivNumAngleBins / 2;
-//  if (footstep_theta >= num_angle_bins_half)
-//    footstep_theta -= ivNumAngleBins;
-//  else if (footstep_theta < -num_angle_bins_half)
-//    footstep_theta += ivNumAngleBins;
-//
-//  // adjust for the left foot
-//  if (from.getLeg() == LEFT)
-//  {
-//    footstep_y = -footstep_y;
-//    footstep_theta = -footstep_theta;
-//  }
-//
-//  return (footstep_x <= ivMaxFootstepX &&
-//          footstep_x >= ivMaxInvFootstepX &&
-//          footstep_y <= ivMaxFootstepY &&
-//          footstep_y >= ivMaxInvFootstepY &&
-//          footstep_theta <= ivMaxFootstepTheta &&
-//          footstep_theta >= ivMaxInvFootstepTheta);
-}
-
-
-void
-FootstepPlannerEnvironment::getPredsOfGridCells(
-    const std::vector<State>& changed_states,
-    std::vector<int>* pred_ids)
-{
-  pred_ids->clear();
-
-  std::vector<State>::const_iterator state_iter;
-  for (state_iter = changed_states.begin();
-      state_iter != changed_states.end();
-      ++state_iter)
-  {
-    PlanningState s(*state_iter, ivCellSize, ivNumAngleBins,
-                    ivHashTableSize);
-    // generate predecessor planning states
-    std::vector<Footstep>::const_iterator footstep_set_iter;
-    for(footstep_set_iter = ivFootstepSet.begin();
-        footstep_set_iter != ivFootstepSet.end();
-        ++footstep_set_iter)
-    {
-      PlanningState pred = footstep_set_iter->reverseMeOnThisState(s);
-      // check if predecessor exists
-      const PlanningState* pred_hash_entry = getHashEntry(pred);
-      if (pred_hash_entry == NULL)
-        continue;
-      pred_ids->push_back(pred_hash_entry->getId());
-    }
-  }
-}
-
-
-void
-FootstepPlannerEnvironment::getSuccsOfGridCells(
-    const std::vector<State>& changed_states,
-    std::vector<int>* succ_ids)
-{
-  succ_ids->clear();
-
-  std::vector<State>::const_iterator state_iter;
-  for (state_iter = changed_states.begin();
-      state_iter != changed_states.end();
-      ++state_iter)
-  {
-    PlanningState s(*state_iter, ivCellSize, ivNumAngleBins,
-                    ivHashTableSize);
-    // generate successors
-    std::vector<Footstep>::const_iterator footstep_set_iter;
-    for(footstep_set_iter = ivFootstepSet.begin();
-        footstep_set_iter != ivFootstepSet.end();
-        ++footstep_set_iter)
-    {
-      PlanningState succ = footstep_set_iter->performMeOnThisState(s);
-      // check if successor exists
-      const PlanningState* succ_hash_entry = getHashEntry(succ);
-      if (succ_hash_entry == NULL)
-        continue;
-      succ_ids->push_back(succ_hash_entry->getId());
-    }
-  }
-}
-
-
-int
-FootstepPlannerEnvironment::GetFromToHeuristic(int FromStateID,
-                                               int ToStateID)
-{
-  assert(FromStateID >= 0 && (unsigned int) FromStateID < ivStateId2State.size());
-  assert(ToStateID >= 0 && (unsigned int) ToStateID < ivStateId2State.size());
-
-  if ((FromStateID == ivIdGoalFootLeft && ToStateID == ivIdGoalFootRight)
-      || (FromStateID == ivIdGoalFootRight && ToStateID == ivIdGoalFootLeft)){
-    return 0;
-  }
-
-  const PlanningState* from = ivStateId2State[FromStateID];
-  const PlanningState* to = ivStateId2State[ToStateID];
-  //    	if (ivHeuristicConstPtr->getHeuristicType() == Heuristic::PATH_COST){
-  //    		boost::shared_ptr<PathCostHeuristic> pathCostHeuristic = boost::dynamic_pointer_cast<PathCostHeuristic>(ivHeuristicConstPtr);
-  //    		pathCostHeuristic->calculateDistances(*from, *to);
-  //    	}
-  return GetFromToHeuristic(*from, *to);
-}
-
-int
-FootstepPlannerEnvironment::GetFromToHeuristic(const PlanningState& from,
-                                               const PlanningState& to)
-{
-  return cvMmScale * ivHeuristicScale *
-    ivHeuristicConstPtr->getHValue(from, to);
-}
-
-
-int
-FootstepPlannerEnvironment::GetGoalHeuristic(int stateID)
-{
-  return GetFromToHeuristic(stateID, ivIdGoalFootLeft);
-}
-
-
-void
-FootstepPlannerEnvironment::GetPreds(int TargetStateID,
-                                     std::vector<int> *PredIDV,
-                                     std::vector<int> *CostV)
-{
-  PredIDV->clear();
-  CostV->clear();
-
-  assert(TargetStateID >= 0 &&
-         (unsigned int) TargetStateID < ivStateId2State.size());
-
-  // make goal state absorbing (only left!)
-  if (TargetStateID == ivIdStartFootLeft)
-    return;
-  // add cheap transition from right to left, so right becomes an equivalent
-  // goal
-  if (TargetStateID == ivIdStartFootRight)
-  {
-    PredIDV->push_back(ivIdStartFootLeft);
-    CostV->push_back(0.0);
-    return;
-  }
-
-  const PlanningState* current = ivStateId2State[TargetStateID];
-
-  // make sure goal state transitions are consistent with
-  // GetSuccs(some_state, goal_state) where goal_state is reachable by an
-  // arbitrary step from some_state
-  if (ivForwardSearch)
-  {
-    if (TargetStateID == ivIdGoalFootLeft || TargetStateID == ivIdGoalFootRight)
-    {
-      const PlanningState* s;
-      int cost;
-      std::vector<int>::const_iterator state_id_iter;
-      for(state_id_iter = ivStateArea.begin();
-          state_id_iter != ivStateArea.end();
-          ++state_id_iter)
-      {
-        s = ivStateId2State[*state_id_iter];
-        cost = stepCost(*current, *s);
-        PredIDV->push_back(s->getId());
-        CostV->push_back(cost);
-      }
-      return;
-    }
-  }
-
-  ivExpandedStates.insert(std::pair<int,int>(current->getX(), current->getY()));
-  ++ivNumExpandedStates;
-
-  if (closeToStart(*current))
-  {
-    // map to the start state id
-    PredIDV->push_back(ivIdStartFootLeft);
-    // get actual costs (dependent on whether the start foot is left or right)
-    int start_id;
-    if (current->getLeg() == RIGHT)
-      start_id = ivIdStartFootLeft;
-    else
-      start_id = ivIdStartFootRight;
-    CostV->push_back(stepCost(*current, *ivStateId2State[start_id]));
-
-    return;
-  }
-
-  PredIDV->reserve(ivFootstepSet.size());
-  CostV->reserve(ivFootstepSet.size());
-  std::vector<Footstep>::const_iterator footstep_set_iter;
-  for(footstep_set_iter = ivFootstepSet.begin();
-      footstep_set_iter != ivFootstepSet.end();
-      ++footstep_set_iter)
-  {
-    const PlanningState predecessor =
-        footstep_set_iter->reverseMeOnThisState(*current);
-    if (occupied(predecessor))
-      continue;
-
-    const PlanningState* predecessor_hash = createHashEntryIfNotExists(
-        predecessor);
-
-    int cost = stepCost(*current, *predecessor_hash);
-    PredIDV->push_back(predecessor_hash->getId());
-    CostV->push_back(cost);
-  }
-}
-
-
-int
-FootstepPlannerEnvironment::GetStartHeuristic(int stateID)
-{
-  return GetFromToHeuristic(stateID, ivIdStartFootLeft);
-}
-
-
-void
-FootstepPlannerEnvironment::GetSuccs(int SourceStateID,
-                                     std::vector<int> *SuccIDV,
-                                     std::vector<int> *CostV)
-{
-  SuccIDV->clear();
-  CostV->clear();
-
-  assert(SourceStateID >= 0 &&
-         unsigned(SourceStateID) < ivStateId2State.size());
-
-  // make goal state absorbing (only left!)
-  if (SourceStateID == ivIdGoalFootLeft)
-  {
-    return;
-  }
-  // add cheap transition from right to left, so right becomes an
-  // equivalent goal
-  if (SourceStateID == ivIdGoalFootRight)
-  {
-    SuccIDV->push_back(ivIdGoalFootLeft);
-    CostV->push_back(0.0);
-    return;
-  }
-
-  const PlanningState* current = ivStateId2State[SourceStateID];
-
-  // make sure start state transitions are consistent with
-  // GetPreds(some_state, start_state) where some_state is reachable by an
-  // arbitrary step from start_state
-  if (!ivForwardSearch)
-  {
-    if (SourceStateID == ivIdStartFootLeft ||
-        SourceStateID == ivIdStartFootRight)
-    {
-      const PlanningState* s;
-      int cost;
-      std::vector<int>::const_iterator state_id_iter;
-      for(state_id_iter = ivStateArea.begin();
-          state_id_iter != ivStateArea.end();
-          ++state_id_iter)
-      {
-        s = ivStateId2State[*state_id_iter];
-        cost = stepCost(*current, *s);
-        SuccIDV->push_back(s->getId());
-        CostV->push_back(cost);
-      }
-      return;
-    }
-  }
-
-  ivExpandedStates.insert(std::pair<int,int>(current->getX(), current->getY()));
-  ++ivNumExpandedStates;
-
-  if (closeToGoal(*current))
-  {
-    int goal_id;
-    assert(current->getLeg() != NOLEG);
-    if (current->getLeg() == RIGHT)
-      goal_id = ivIdGoalFootLeft;
-    else
-      goal_id = ivIdGoalFootRight;
-
-    const PlanningState* goal = ivStateId2State[goal_id];
-    SuccIDV->push_back(goal_id);
-    CostV->push_back(stepCost(*current, *goal));
-
-    return;
-  }
-
-  SuccIDV->reserve(ivFootstepSet.size());
-  CostV->reserve(ivFootstepSet.size());
-  std::vector<Footstep>::const_iterator footstep_set_iter;
-  for(footstep_set_iter = ivFootstepSet.begin();
-      footstep_set_iter != ivFootstepSet.end();
-      ++footstep_set_iter)
-  {
-    PlanningState successor =
-        footstep_set_iter->performMeOnThisState(*current);
-    if (occupied(successor))
-      continue;
-
-    const PlanningState* successor_hash_entry =
-        createHashEntryIfNotExists(successor);
-
-    int cost = stepCost(*current, *successor_hash_entry);
-    SuccIDV->push_back(successor_hash_entry->getId());
-    CostV->push_back(cost);
-  }
-}
-
-void
-FootstepPlannerEnvironment::GetSuccsTo(int SourceStateID, int goalStateId,
-                                       std::vector<int> *SuccIDV,
-                                       std::vector<int> *CostV)
-{
-  //return GetSuccs(SourceStateID, SuccIDV, CostV);
-
-  SuccIDV->clear();
-  CostV->clear();
-
-  assert(SourceStateID >= 0 &&
-         unsigned(SourceStateID) < ivStateId2State.size());
-
-  // make goal state absorbing
-  if (SourceStateID == ivIdGoalFootLeft ){
-    return;
-  }
-
-  const PlanningState* current = ivStateId2State[SourceStateID];
-  ivExpandedStates.insert(std::pair<int,int>(current->getX(), current->getY()));
-  ++ivNumExpandedStates;
-
-  //ROS_INFO("GetSuccsTo %d -> %d: %f", SourceStateID, goalStateId, euclidean_distance(current->getX(), current->getY(), ivStateId2State[goalStateId]->getX(), ivStateId2State[goalStateId]->getY()));
-
-  // add cheap transition from right to left, so right becomes an equivalent goal
-  if (goalStateId== ivIdGoalFootLeft && SourceStateID == ivIdGoalFootRight && current->getLeg() == RIGHT){
-    SuccIDV->push_back(ivIdGoalFootLeft);
-    CostV->push_back(ivStepCost);
-    return;
-  }
-
-  if (closeToGoal(*current))
-  {
-    int goal_id;
-    assert(current->getLeg() != NOLEG);
-    if (current->getLeg() == RIGHT){
-      goal_id = ivIdGoalFootLeft;
-    } else {
-      goal_id = ivIdGoalFootRight;
-    }
-
-    const PlanningState* goal = ivStateId2State[goal_id];
-    int cost = stepCost(*current, *goal);
-    SuccIDV->push_back(goal_id);
-    CostV->push_back(cost);
-
-    return;
-  }
-
-  // intermediate goal reachable (R*)?
-  assert(goalStateId >= 0 && unsigned(goalStateId) < ivStateId2State.size());
-  const PlanningState* randomGoal = ivStateId2State[goalStateId];
-  if (randomGoal->getLeg() != current->getLeg() && reachable(*current, *randomGoal)){
-    int cost = stepCost(*current, *randomGoal);
-    SuccIDV->push_back(goalStateId);
-    CostV->push_back(cost);
-    //       		ROS_INFO("%d %d", goalStateId, cost);
-
-    //       		return;
-  }
-
-
-  SuccIDV->reserve(ivFootstepSet.size());
-  CostV->reserve(ivFootstepSet.size());
-  std::vector<Footstep>::const_iterator footstep_set_iter;
-  for(footstep_set_iter = ivFootstepSet.begin();
-      footstep_set_iter != ivFootstepSet.end();
-      ++footstep_set_iter)
-  {
-    PlanningState successor =
-        footstep_set_iter->performMeOnThisState(*current);
-    if (occupied(successor))
-      continue;
-
-    const PlanningState* successor_hash = createHashEntryIfNotExists(successor);
-
-    int cost = stepCost(*current, *successor_hash);
-    SuccIDV->push_back(successor_hash->getId());
-    CostV->push_back(cost);
-  }
-}
-
-
-void
-FootstepPlannerEnvironment::GetRandomSuccsatDistance(int SourceStateID,
-                                                     std::vector<int>* SuccIDV, std::vector<int>* CLowV)
-{
-
-  assert(SourceStateID >= 0 && unsigned(SourceStateID) < ivStateId2State.size());
-  //goal state should be absorbing
-  if (SourceStateID == ivIdGoalFootLeft || SourceStateID == ivIdGoalFootRight )
-    return;
-
-
-  const PlanningState* currentState = ivStateId2State[SourceStateID];
-  // TODO: closeToGoal?
-  //
-  //    	if (closeToGoal(*currentState))
-  //    		return;
-
-  //get the successors
-  GetRandomNeighs(currentState, SuccIDV, CLowV, ivNumRandomNodes,
-                  ivRandomNodeDist, true);
-}
-
-void
-FootstepPlannerEnvironment::GetRandomPredsatDistance(int TargetStateID,
-                                                     std::vector<int>* PredIDV, std::vector<int>* CLowV)
-{
-
-  assert(TargetStateID >= 0 &&
-		 unsigned(TargetStateID) < ivStateId2State.size());
-
-  // start state should be absorbing
-  if (TargetStateID == ivIdStartFootLeft || TargetStateID == ivIdStartFootRight)
-    return;
-
-  const PlanningState* currentState = ivStateId2State[TargetStateID];
-
-  // TODO: ???
-  //    	if(closeToStart(*currentState))
-  //    		return;
-
-  //get the predecessors
-  GetRandomNeighs(currentState, PredIDV, CLowV, ivNumRandomNodes,
-                  ivRandomNodeDist, false);
-
-}
-
-//generates nNumofNeighs random neighbors of cell <X,Y> at distance nDist_c (measured in cells)
-//it will also generate goal if within this distance as an additional neighbor
-//bSuccs is set to true if we are computing successor states, otherwise it is Preds
-// (see fct. implemented in environment_nav2D)
-void FootstepPlannerEnvironment::GetRandomNeighs(const PlanningState* currentState, std::vector<int>* NeighIDV, std::vector<int>* CLowV, int nNumofNeighs, int nDist_c, bool bSuccs)
-{
-
-  //clear the successor array
-  NeighIDV->clear();
-  CLowV->clear();
-
-
-  //get X, Y for the states
-  int X = currentState->getX();
-  int Y = currentState->getY();
-  //int theta = currentState->getTheta();
-
-  //see if the goal/start belongs to the inside area and if yes then add it to Neighs as well
-  // NOTE: "goal check" for backward planning
-  const PlanningState* goal_left = NULL;
-  const PlanningState* goal_right = NULL;
-  if (bSuccs){
-    goal_left = ivStateId2State[ivIdGoalFootLeft];
-    goal_right = ivStateId2State[ivIdGoalFootRight];
-  } else {
-    goal_left = ivStateId2State[ivIdStartFootLeft];
-    goal_right = ivStateId2State[ivIdStartFootRight];
-  }
-
-  int nDist_sq = nDist_c*nDist_c;
-
-  //add left if within the distance
-  if (euclidean_distance_sq(X, Y, goal_left->getX(), goal_left->getY()) <= nDist_sq)
-  {
-    //compute clow
-    int clow;
-    if(bSuccs)
-      clow = GetFromToHeuristic(*currentState, *goal_left);
-    else
-      clow = GetFromToHeuristic(*goal_left, *currentState);
-
-    NeighIDV->push_back(goal_left->getId());
-    CLowV->push_back(clow);
-    ivRandomStates.push_back(goal_left->getId());
-  }
-
-  //add right if within the distance
-  if(euclidean_distance_sq(X, Y, goal_right->getX(), goal_right->getY()) <= nDist_sq)
-  {
-    //compute clow
-    int clow;
-    if(bSuccs)
-      clow = GetFromToHeuristic(*currentState, *goal_right);
-    else
-      clow = GetFromToHeuristic(*goal_right, *currentState);
-
-    NeighIDV->push_back(goal_right->getId());
-    CLowV->push_back(clow);
-    ivRandomStates.push_back(goal_right->getId());
-  }
-
-  //iterate through random actions
-  int nAttempts = 0;
-  for (int i = 0; i < nNumofNeighs && nAttempts < 5*nNumofNeighs; ++i, ++nAttempts)
-  {
-
-    // pick goal in random direction
-    float fDir = (float)(TWO_PI*(((double)rand())/RAND_MAX));
-
-    int dX = (int)(nDist_c*cos(fDir));
-    int dY = (int)(nDist_c*sin(fDir));
-
-    //get the coords of the state
-    int newX = X + dX;
-    int newY = Y + dY;
-
-    // TODO / FIXME x,y, can be negative! need offset
-    // check if outside of map:
-    //    		if (newX < 0 || newY < 0 || unsigned(newX) >= ivMapPtr->getInfo().width || unsigned(newY) >= ivMapPtr->getInfo().height){
-    //    			i--;
-    //    			ROS_INFO("Outside of map: %d %d", newX, newY);
-    //    			continue;
-    //    		}
-
-    // direction of random exploration (facing forward):
-    int newTheta = angle_state_2_cell(fDir, ivNumAngleBins);
-
-    // random left/right
-    Leg newLeg = Leg(rand() % 2);
-
-    PlanningState randomState(newX, newY, newTheta, newLeg, ivHashTableSize);
-
-    // add both left and right if available:
-    //    		int sep = disc_val(0.07, ivCellSize);
-    //    		int ddX = int(-sin(fDir) * sep);
-    //    		int ddY = int(cos(fDir) * sep);
-    //    		PlanningState randomState(newX+ddX, newY+ddY, newTheta, LEFT, ivHashTableSize);
-    //
-    //    		PlanningState randomStateR(newX-ddX, newY-ddY, newTheta, RIGHT, ivHashTableSize);
-
-    if(!occupied(randomState))
-    {
-      const PlanningState* random_hash_entry = getHashEntry(randomState);
-      if (random_hash_entry == NULL){
-        random_hash_entry = createNewHashEntry(randomState);
-        ivRandomStates.push_back(random_hash_entry->getId());
-      }
-
-      //compute clow
-      int clow;
-      if(bSuccs)
-        clow = GetFromToHeuristic(currentState->getId(), random_hash_entry->getId());
-
-      else
-        clow = GetFromToHeuristic(random_hash_entry->getId(), currentState->getId());
-
-      NeighIDV->push_back(random_hash_entry->getId());
-      CLowV->push_back(clow);
-
-    }else{
-      i--;
-    }
-
-    //    		if(!occupied(randomStateR))
-    //    		{
-    //    			const PlanningState* random_hash_entry = getHashEntry(randomStateR);
-    //    			if (random_hash_entry == NULL){
-    //    				random_hash_entry = createNewHashEntry(randomStateR);
-    //    				ivRandomStates.push_back(random_hash_entry->getId());
-    //    			}
-    //
-    //    			//compute clow
-    //    			int clow;
-    //    			if(bSuccs)
-    //    				clow = GetFromToHeuristic(currentState->getId(), random_hash_entry->getId());
-    //    			else
-    //    				clow = GetFromToHeuristic(random_hash_entry->getId(), currentState->getId());
-    //
-    //    			NeighIDV->push_back(random_hash_entry->getId());
-    //    			CLowV->push_back(clow);
-    //
-    //    		}else{
-    //    			i--;
-    //    		}
-
-
-  }
-
-  if (NeighIDV->size() == 0){
-    ROS_WARN("Could not create any random neighbor nodes (%d attempts) from id %d (%d %d)",
-             nAttempts, currentState->getId(), X, Y);
-  } else
-
-    ROS_DEBUG("Created %zu random neighbors (%d attempts) from id %d "
-        "(%d %d)", NeighIDV->size(), nAttempts, currentState->getId(),
-        X, Y);
-}
-
-bool
-FootstepPlannerEnvironment::AreEquivalent(int StateID1, int StateID2)
-{
-  assert(StateID1 >= 0 && StateID2 >= 0
-         && unsigned(StateID1) < ivStateId2State.size() && unsigned(StateID2) < ivStateId2State.size());
-
-
-  if (StateID1 == StateID2)
-    return true;
-
-  const PlanningState* s1 = ivStateId2State[StateID1];
-  const PlanningState* s2 = ivStateId2State[StateID2];
-
-  //		// approximately compare, ignore theta:
-  return (std::abs(s1->getX() - s2->getX()) < 1
-      && std::abs(s1->getY() - s2->getY()) < 1
-      //			                && std::abs(s1->getTheta() - s2->getTheta()) < 3
-      && s1->getLeg() == s2->getLeg()
-  );
-
-
-//  compare the actual values (exact comparison)
-//  return (*s1 == *s2);
-}
-
-
-
-bool
-FootstepPlannerEnvironment::InitializeEnv(const char *sEnvFile)
-{
-//  ROS_ERROR("FootstepPlanerEnvironment::InitializeEnv: Hit unimplemented "
-//            "function. Check this!");
-  return true;
-}
-
-
-bool
-FootstepPlannerEnvironment::InitializeMDPCfg(MDPConfig *MDPCfg)
-{
-  // NOTE: The internal start and goal ids are set here to the left foot
-  // (this affects the calculation of the heuristic values)
-  MDPCfg->goalstateid = ivIdGoalFootLeft;
-  MDPCfg->startstateid = ivIdStartFootLeft;
-
-  assert(ivIdGoalFootLeft != -1);
-  assert(ivIdStartFootLeft != -1);
-
-  return true;
-}
-
-
-void
-FootstepPlannerEnvironment::PrintEnv_Config(FILE *fOut)
-{
-  // NOTE: implement this if the planner needs to print out configurations
-  ROS_ERROR("FootstepPlanerEnvironment::PrintEnv_Config: Hit "
-      "unimplemented function. Check this!");
-}
-
-
-void
-FootstepPlannerEnvironment::PrintState(int stateID, bool bVerbose,
-                                       FILE *fOut)
-{
-  if(fOut == NULL)
-  {
-    fOut = stdout;
-  }
-
-  if(stateID == ivIdGoalFootLeft && bVerbose)
-  {
-    SBPL_FPRINTF(fOut, "the state is a goal state\n");
-  }
-
-  const PlanningState* s = ivStateId2State[stateID];
-
-  if(bVerbose)
-  {
-    SBPL_FPRINTF(fOut, "X=%i Y=%i THETA=%i FOOT=%i\n",
-                 s->getX(), s->getY(), s->getTheta(), s->getLeg());
-  }
-  else
-  {
-    SBPL_FPRINTF(fOut, "%i %i %i %i\n",
-                 s->getX(), s->getY(), s->getTheta(), s->getLeg());
-  }
-}
-
-
-void
-FootstepPlannerEnvironment::SetAllActionsandAllOutcomes(CMDPSTATE *state)
-{
-  // NOTE: not implemented so far
-  // Description: Some searches may also use SetAllActionsandAllOutcomes
-  // or SetAllPreds functions if they keep the pointers to successors
-  // (predecessors) but most searches do not require this, so it is not
-  // necessary to support this
-
-  ROS_ERROR("FootstepPlannerEnvironment::SetAllActionsandAllOutcomes: Hit"
-      " unimplemented function. Check this!");
-}
-
-
-void
-FootstepPlannerEnvironment::SetAllPreds(CMDPSTATE *state)
-{
-  // NOTE: not implemented so far
-  // Description: Some searches may also use SetAllActionsandAllOutcomes
-  // or SetAllPreds functions if they keep the pointers to successors
-  // (predecessors) but most searches do not require this, so it is not
-  // necessary to support this
-
-  ROS_ERROR("FootstepPlannerEnvironment::SetAllPreds: Hit unimplemented "
-      "function. Check this!");
-}
-
-
-int
-FootstepPlannerEnvironment::SizeofCreatedEnv()
-{
-  return ivStateId2State.size();
-}
-
-
-void
-FootstepPlannerEnvironment::setStateArea(const PlanningState& left,
-                                         const PlanningState& right)
-{
-  ivStateArea.clear();
-
-  const PlanningState* p_state = getHashEntry(right);
-  ivStateArea.push_back(p_state->getId());
-
-  double cont_step_x, cont_step_y, cont_step_theta;
-  for (int step_y = ivMaxInvFootstepY; step_y <= ivMaxFootstepY; ++step_y)
-  {
-    for (int step_x = ivMaxInvFootstepX; step_x <= ivMaxFootstepX; ++step_x)
-    {
-      for (int step_theta = ivMaxInvFootstepTheta;
-           step_theta <= ivMaxFootstepTheta;
-           ++step_theta)
-      {
-        cont_step_x = cont_val(step_x, ivCellSize);
-        cont_step_y = cont_val(step_y, ivCellSize);
-        cont_step_theta = angle_cell_2_state(step_theta, ivNumAngleBins);
-        Footstep step(cont_step_x, cont_step_y, cont_step_theta,
-                      ivCellSize, ivNumAngleBins, ivHashTableSize);
-        if (ivForwardSearch)
-        {
-          PlanningState pred = step.reverseMeOnThisState(left);
-          if (occupied(pred) || !reachable(pred, left))
-            continue;
-          p_state = createHashEntryIfNotExists(pred);
-          ivStateArea.push_back(p_state->getId());
-
-          pred = step.reverseMeOnThisState(right);
-          if (occupied(pred) || !reachable(pred, right))
-            continue;
-          p_state = createHashEntryIfNotExists(pred);
-          ivStateArea.push_back(p_state->getId());
-        }
-        else
-        {
-          PlanningState succ = step.performMeOnThisState(left);
-          if (occupied(succ) || !reachable(left, succ))
-            continue;
-          p_state = createHashEntryIfNotExists(succ);
-          ivStateArea.push_back(p_state->getId());
-
-          succ = step.performMeOnThisState(right);
-          if (occupied(succ) || !reachable(right, succ))
-            continue;
-          p_state = createHashEntryIfNotExists(succ);
-          ivStateArea.push_back(p_state->getId());
-        }
-      }
-    }
-  }
-}
-
-
-bool
-FootstepPlannerEnvironment::less::operator ()(const PlanningState* a,
-                                              const PlanningState* b)
-const
-{
-  if (a->getX() < b->getX())
-    return true;
-  else if (a->getY() < b->getY())
-    return true;
-  else
-    return false;
-}
-}
-
diff --git a/humanoid_navigation-for-git/footstep_planner/src/FootstepPlannerNode.cpp b/humanoid_navigation-for-git/footstep_planner/src/FootstepPlannerNode.cpp
deleted file mode 100644
index edc68c4..0000000
--- a/humanoid_navigation-for-git/footstep_planner/src/FootstepPlannerNode.cpp
+++ /dev/null
@@ -1,42 +0,0 @@
-/*
- * A footstep planner for humanoid robots
- *
- * Copyright 2010-2011 Johannes Garimort, Armin Hornung, University of Freiburg
- * http://www.ros.org/wiki/footstep_planner
- *
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, version 3.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-#include <footstep_planner/FootstepPlannerNode.h>
-
-namespace footstep_planner
-{
-FootstepPlannerNode::FootstepPlannerNode()
-{
-  ros::NodeHandle nh;
-
-  // provide callbacks to interact with the footstep planner:
-  ivGridMapSub = nh.subscribe<nav_msgs::OccupancyGrid>("map", 1, &FootstepPlanner::mapCallback, &ivFootstepPlanner);
-  ivGoalPoseSub = nh.subscribe<geometry_msgs::PoseStamped>("goal", 1, &FootstepPlanner::goalPoseCallback, &ivFootstepPlanner);
-  ivStartPoseSub = nh.subscribe<geometry_msgs::PoseWithCovarianceStamped>("initialpose", 1, &FootstepPlanner::startPoseCallback, &ivFootstepPlanner);
-
-  // service:
-  ivFootstepPlanService = nh.advertiseService("plan_footsteps", &FootstepPlanner::planService, &ivFootstepPlanner);
-  ivFootstepPlanFeetService = nh.advertiseService("plan_footsteps_feet", &FootstepPlanner::planFeetService, &ivFootstepPlanner);
-}
-
-
-FootstepPlannerNode::~FootstepPlannerNode()
-{}
-}
diff --git a/humanoid_navigation-for-git/footstep_planner/src/Heuristic.cpp b/humanoid_navigation-for-git/footstep_planner/src/Heuristic.cpp
deleted file mode 100644
index 4d21432..0000000
--- a/humanoid_navigation-for-git/footstep_planner/src/Heuristic.cpp
+++ /dev/null
@@ -1,105 +0,0 @@
-/*
- * A footstep planner for humanoid robots
- *
- * Copyright 2010-2011 Johannes Garimort, Armin Hornung, University of Freiburg
- * http://www.ros.org/wiki/footstep_planner
- *
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, version 3.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-#include <footstep_planner/Heuristic.h>
-
-namespace footstep_planner
-{
-Heuristic::Heuristic(double cell_size, int num_angle_bins,
-                     HeuristicType type)
-: ivCellSize(cell_size),
-  ivNumAngleBins(num_angle_bins),
-  ivHeuristicType(type)
-{}
-
-
-Heuristic::~Heuristic()
-{}
-
-
-EuclideanHeuristic::EuclideanHeuristic(double cell_size, int num_angle_bins)
-: Heuristic(cell_size, num_angle_bins, EUCLIDEAN)
-{}
-
-
-EuclideanHeuristic::~EuclideanHeuristic()
-{}
-
-
-double
-EuclideanHeuristic::getHValue(const PlanningState& from,
-                              const PlanningState& to)
-const
-{
-  if (from == to)
-    return 0.0;
-
-  // distance in cell size
-  double dist = euclidean_distance(from.getX(), from.getY(),
-                                   to.getX(), to.getY());
-  // return distance in meter
-  return cont_val(dist, ivCellSize);
-}
-
-
-EuclStepCostHeuristic::EuclStepCostHeuristic(double cell_size,
-                                             int    num_angle_bins,
-                                             double step_cost,
-                                             double diff_angle_cost,
-                                             double max_step_width)
-: Heuristic(cell_size, num_angle_bins, EUCLIDEAN_STEPCOST),
-  ivStepCost(step_cost),
-  ivDiffAngleCost(diff_angle_cost),
-  ivMaxStepWidth(max_step_width)
-{}
-
-
-EuclStepCostHeuristic::~EuclStepCostHeuristic()
-{}
-
-
-double
-EuclStepCostHeuristic::getHValue(const PlanningState& from,
-                                 const PlanningState& to)
-const
-{
-  if (from == to)
-    return 0.0;
-
-  // distance in meter
-  double dist = cont_val(euclidean_distance(
-      from.getX(), from.getY(), to.getX(), to.getY()), ivCellSize);
-  double expected_steps = dist / ivMaxStepWidth;
-  double diff_angle = 0.0;
-  if (ivDiffAngleCost > 0.0)
-  {
-    // get the number of bins between from.theta and to.theta
-    int diff_angle_disc = (
-        ((to.getTheta() - from.getTheta()) % ivNumAngleBins) +
-        ivNumAngleBins) % ivNumAngleBins;
-    // get the rotation independent from the rotation direction
-    diff_angle = std::abs(angles::normalize_angle(
-        angle_cell_2_state(diff_angle_disc, ivNumAngleBins)));
-  }
-
-  return (dist + expected_steps * ivStepCost +
-      diff_angle * ivDiffAngleCost);
-}
-}
diff --git a/humanoid_navigation-for-git/footstep_planner/src/PathCostHeuristic.cpp b/humanoid_navigation-for-git/footstep_planner/src/PathCostHeuristic.cpp
deleted file mode 100644
index 10be694..0000000
--- a/humanoid_navigation-for-git/footstep_planner/src/PathCostHeuristic.cpp
+++ /dev/null
@@ -1,186 +0,0 @@
-/*
- * A footstep planner for humanoid robots
- *
- * Copyright 2010-2011 Johannes Garimort, Armin Hornung, University of Freiburg
- * http://www.ros.org/wiki/footstep_planner
- *
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, version 3.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-#include <footstep_planner/PathCostHeuristic.h>
-
-
-namespace footstep_planner
-{
-PathCostHeuristic::PathCostHeuristic(double cell_size,
-                                     int    num_angle_bins,
-                                     double step_cost,
-                                     double diff_angle_cost,
-                                     double max_step_width,
-                                     double inflation_radius)
-: Heuristic(cell_size, num_angle_bins, PATH_COST),
-  ivpGrid(NULL),
-  ivStepCost(step_cost),
-  ivDiffAngleCost(diff_angle_cost),
-  ivMaxStepWidth(max_step_width),
-  ivInflationRadius(inflation_radius),
-  ivGoalX(-1),
-  ivGoalY(-1)
-{}
-
-
-PathCostHeuristic::~PathCostHeuristic()
-{
-  if (ivpGrid)
-    resetGrid();
-}
-
-
-double
-PathCostHeuristic::getHValue(const PlanningState& current,
-                             const PlanningState& to)
-const
-{
-  assert(ivGoalX >= 0 && ivGoalY >= 0);
-
-  if (current == to)
-    return 0.0;
-
-  unsigned int from_x;
-  unsigned int from_y;
-  // could be removed after more testing (then use ...noBounds... again)
-  ivMapPtr->worldToMapNoBounds(cell_2_state(current.getX(), ivCellSize),
-                               cell_2_state(current.getY(), ivCellSize),
-                               from_x, from_y);
-
-  unsigned int to_x;
-  unsigned int to_y;
-  // could be removed after more testing (then use ...noBounds... again)
-  ivMapPtr->worldToMapNoBounds(cell_2_state(to.getX(), ivCellSize),
-                               cell_2_state(to.getY(), ivCellSize),
-                               to_x, to_y);
-
-  // cast to unsigned int is safe since ivGoalX/ivGoalY are checked to be >= 0
-  if ((unsigned int)ivGoalX != to_x || (unsigned int)ivGoalY != to_y)
-  {
-    ROS_ERROR("PathCostHeuristic::getHValue to a different value than "
-              "precomputed, heuristic values will be wrong. You need to call "
-              "calculateDistances() before!");
-  }
-  assert((unsigned int)ivGoalX == to_x && (unsigned int)ivGoalY == to_y);
-
-  double dist = double(ivGridSearchPtr->getlowerboundoncostfromstart_inmm(
-      from_x, from_y)) / 1000.0;
-
-  double expected_steps = dist / ivMaxStepWidth;
-  double diff_angle = 0.0;
-  if (ivDiffAngleCost > 0.0)
-  {
-    // get the number of bins between from.theta and to.theta
-    int diff_angle_disc = (
-        ((to.getTheta() - current.getTheta()) % ivNumAngleBins) +
-        ivNumAngleBins) % ivNumAngleBins;
-    // get the rotation independent from the rotation direction
-    diff_angle = std::abs(angles::normalize_angle(
-        angle_cell_2_state(diff_angle_disc, ivNumAngleBins)));
-  }
-
-  return (dist + expected_steps * ivStepCost + diff_angle * ivDiffAngleCost);
-}
-
-
-bool
-PathCostHeuristic::calculateDistances(const PlanningState& from,
-                                      const PlanningState& to)
-{
-  assert(ivMapPtr);
-
-  unsigned int from_x;
-  unsigned int from_y;
-  ivMapPtr->worldToMapNoBounds(cell_2_state(from.getX(), ivCellSize),
-                               cell_2_state(from.getY(), ivCellSize),
-                               from_x, from_y);
-
-  unsigned int to_x;
-  unsigned int to_y;
-  ivMapPtr->worldToMapNoBounds(cell_2_state(to.getX(), ivCellSize),
-                               cell_2_state(to.getY(), ivCellSize),
-                               to_x, to_y);
-
-  if ((int)to_x != ivGoalX || (int)to_y != ivGoalY)
-  {
-    ivGoalX = to_x;
-    ivGoalY = to_y;
-    ivGridSearchPtr->search(ivpGrid, cvObstacleThreshold,
-                            ivGoalX, ivGoalY, from_x, from_y,
-                            SBPL_2DGRIDSEARCH_TERM_CONDITION_ALLCELLS);
-  }
-
-  return true;
-}
-
-
-void
-PathCostHeuristic::updateMap(gridmap_2d::GridMap2DPtr map)
-{
-  ivMapPtr.reset();
-  ivMapPtr = map;
-
-  ivGoalX = ivGoalY = -1;
-
-  unsigned width = ivMapPtr->getInfo().width;
-  unsigned height = ivMapPtr->getInfo().height;
-
-  if (ivGridSearchPtr)
-    ivGridSearchPtr->destroy();
-  ivGridSearchPtr.reset(new SBPL2DGridSearch(width, height,
-                                             ivMapPtr->getResolution()));
-  if (ivpGrid)
-    resetGrid();
-  ivpGrid = new unsigned char* [width];
-
-  for (unsigned x = 0; x < width; ++x)
-    ivpGrid[x] = new unsigned char [height];
-  for (unsigned y = 0; y < height; ++y)
-  {
-    for (unsigned x = 0; x < width; ++x)
-    {
-      float dist = ivMapPtr->distanceMapAtCell(x,y);
-      if (dist < 0.0f)
-        ROS_ERROR("Distance map at %d %d out of bounds", x, y);
-      else if (dist <= ivInflationRadius)
-        ivpGrid[x][y] = 255;
-      else
-        ivpGrid[x][y] = 0;
-    }
-  }
-}
-
-
-void
-PathCostHeuristic::resetGrid()
-{
-  CvSize size = ivMapPtr->size();
-  for (int x = 0; x < size.width; ++x)
-  {
-    if (ivpGrid[x])
-    {
-      delete[] ivpGrid[x];
-      ivpGrid[x] = NULL;
-    }
-  }
-  delete[] ivpGrid;
-  ivpGrid = NULL;
-}
-} // end of namespace
diff --git a/humanoid_navigation-for-git/footstep_planner/src/PlanningState.cpp b/humanoid_navigation-for-git/footstep_planner/src/PlanningState.cpp
deleted file mode 100755
index 93714f8..0000000
--- a/humanoid_navigation-for-git/footstep_planner/src/PlanningState.cpp
+++ /dev/null
@@ -1,109 +0,0 @@
-/*
- * A footstep planner for humanoid robots
- *
- * Copyright 2010-2011 Johannes Garimort, Armin Hornung, University of Freiburg
- * http://www.ros.org/wiki/footstep_planner
- *
- * D* Lite (Koenig et al. 2002) partly based on the implementation
- * by J. Neufeld (http://code.google.com/p/dstarlite/)
- *
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, version 3.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-#include <footstep_planner/PlanningState.h>
-
-
-namespace footstep_planner
-{
-PlanningState::PlanningState(double x, double y, double theta, Leg leg,
-                             double cell_size, int num_angle_bins,
-                             int max_hash_size)
-: ivX(state_2_cell(x, cell_size)),
-  ivY(state_2_cell(y, cell_size)),
-  ivTheta(angle_state_2_cell(theta, num_angle_bins)),
-  ivLeg(leg),
-  ivId(-1),
-  ivHashTag(calc_hash_tag(ivX, ivY, ivTheta, ivLeg, max_hash_size))
-{}
-
-
-PlanningState::PlanningState(int x, int y, int theta, Leg leg,
-                             int max_hash_size)
-:  ivX(x),
-   ivY(y),
-   ivTheta(theta),
-   ivLeg(leg),
-   ivId(-1),
-   ivHashTag(calc_hash_tag(ivX, ivY, ivTheta, ivLeg, max_hash_size))
-{}
-
-
-PlanningState::PlanningState(const State& s, double cell_size,
-                             int num_angle_bins, int max_hash_size)
-: ivX(state_2_cell(s.getX(), cell_size)),
-  ivY(state_2_cell(s.getY(), cell_size)),
-  ivTheta(angle_state_2_cell(s.getTheta(), num_angle_bins)),
-  ivLeg(s.getLeg()),
-  ivId(-1),
-  ivHashTag(calc_hash_tag(ivX, ivY, ivTheta, ivLeg, max_hash_size))
-{}
-
-
-PlanningState::PlanningState(const PlanningState& s)
-: ivX(s.getX()),
-  ivY(s.getY()),
-  ivTheta(s.getTheta()),
-  ivLeg(s.getLeg()),
-  ivId(s.getId()),
-  ivHashTag(s.getHashTag())
-{}
-
-
-PlanningState::~PlanningState()
-{}
-
-
-bool
-PlanningState::operator ==(const PlanningState& s2)
-const
-{
-  // First test the hash tag. If they differ, the states are definitely
-  // different.
-  if (ivHashTag != s2.getHashTag())
-    return false;
-
-  return (ivX == s2.getX() && ivY == s2.getY() &&
-    ivTheta == s2.getTheta() && ivLeg == s2.getLeg());
-}
-
-
-bool
-PlanningState::operator !=(const PlanningState& s2)
-const
-{
-  return ivHashTag != s2.getHashTag();
-}
-
-
-State
-PlanningState::getState(double cell_size, int num_angle_bins)
-const
-{
-  return State(cell_2_state(ivX, cell_size),
-               cell_2_state(ivY, cell_size),
-               angles::normalize_angle(
-                   angle_cell_2_state(ivTheta, num_angle_bins)),
-                   ivLeg);
-}
-} // end of namespace
diff --git a/humanoid_navigation-for-git/footstep_planner/src/PlanningStateChangeQuery.cpp b/humanoid_navigation-for-git/footstep_planner/src/PlanningStateChangeQuery.cpp
deleted file mode 100644
index fcd9e5d..0000000
--- a/humanoid_navigation-for-git/footstep_planner/src/PlanningStateChangeQuery.cpp
+++ /dev/null
@@ -1,48 +0,0 @@
-/*
- * A footstep planner for humanoid robots
- *
- * Copyright 2010-2011 Johannes Garimort, Armin Hornung, University of Freiburg
- * http://www.ros.org/wiki/footstep_planner
- *
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, version 3.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-#include <footstep_planner/PlanningStateChangeQuery.h>
-
-
-namespace footstep_planner
-{
-PlanningStateChangeQuery::PlanningStateChangeQuery(
-    const std::vector<int>& neighbors)
-: ivNeighbors(neighbors)
-{}
-
-
-PlanningStateChangeQuery::~PlanningStateChangeQuery()
-{}
-
-
-const std::vector<int>*
-PlanningStateChangeQuery::getPredecessors() const
-{
-  return &ivNeighbors;
-}
-
-
-const std::vector<int>*
-PlanningStateChangeQuery::getSuccessors() const
-{
-  return &ivNeighbors;
-}
-}
diff --git a/humanoid_navigation-for-git/footstep_planner/src/State.cpp b/humanoid_navigation-for-git/footstep_planner/src/State.cpp
deleted file mode 100644
index 725d2d5..0000000
--- a/humanoid_navigation-for-git/footstep_planner/src/State.cpp
+++ /dev/null
@@ -1,58 +0,0 @@
-/*
- * A footstep planner for humanoid robots
- *
- * Copyright 2010-2011 Johannes Garimort, Armin Hornung, University of Freiburg
- * http://www.ros.org/wiki/footstep_planner
- *
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, version 3.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-#include <footstep_planner/State.h>
-
-
-namespace footstep_planner
-{
-State::State()
-: ivX(0.0), ivY(0.0), ivTheta(0.0), ivLeg(NOLEG)
-{}
-
-
-State::State(double x, double y, double theta, Leg leg)
-: ivX(x), ivY(y), ivTheta(theta), ivLeg(leg)
-{}
-
-
-State::~State()
-{}
-
-
-bool
-State::operator ==(const State& s2)
-const
-{
-  return (fabs(ivX - s2.getX()) < FLOAT_CMP_THR &&
-      fabs(ivY - s2.getY()) < FLOAT_CMP_THR &&
-      fabs(angles::shortest_angular_distance(ivTheta, s2.getTheta()))
-  < FLOAT_CMP_THR &&
-  ivLeg == s2.getLeg());
-}
-
-
-bool
-State::operator !=(const State& s2)
-const
-{
-  return not (*this == s2);
-}
-} // end of namespace
diff --git a/humanoid_navigation-for-git/footstep_planner/src/footstep_navigation.cpp b/humanoid_navigation-for-git/footstep_planner/src/footstep_navigation.cpp
deleted file mode 100644
index e4cffa2..0000000
--- a/humanoid_navigation-for-git/footstep_planner/src/footstep_navigation.cpp
+++ /dev/null
@@ -1,33 +0,0 @@
-/*
- * A footstep planner for humanoid robots
- *
- * Copyright 2010-2011 Johannes Garimort, Armin Hornung, University of Freiburg
- * http://www.ros.org/wiki/footstep_planner
- *
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, version 3.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-#include <footstep_planner/FootstepNavigation.h>
-#include <ros/ros.h>
-
-int main(int argc, char** argv)
-{
-  ros::init(argc, argv, "footstep_navigation");
-
-  footstep_planner::FootstepNavigation nav;
-
-  ros::spin();
-
-  return 0;
-}
diff --git a/humanoid_navigation-for-git/footstep_planner/src/footstep_planner.cpp b/humanoid_navigation-for-git/footstep_planner/src/footstep_planner.cpp
deleted file mode 100644
index 5b43f40..0000000
--- a/humanoid_navigation-for-git/footstep_planner/src/footstep_planner.cpp
+++ /dev/null
@@ -1,33 +0,0 @@
-/*
- * A footstep planner for humanoid robots
- *
- * Copyright 2010-2011 Johannes Garimort, Armin Hornung, University of Freiburg
- * http://www.ros.org/wiki/footstep_planner
- *
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, version 3.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-#include <footstep_planner/FootstepPlannerNode.h>
-#include <ros/ros.h>
-
-int main(int argc, char** argv)
-{
-  ros::init(argc, argv, "footstep_planner");
-
-  footstep_planner::FootstepPlannerNode planner;
-
-  ros::spin();
-
-  return 0;
-}
diff --git a/humanoid_navigation-for-git/footstep_planner/src/footstep_planner_walls.cpp b/humanoid_navigation-for-git/footstep_planner/src/footstep_planner_walls.cpp
deleted file mode 100644
index 531aa1b..0000000
--- a/humanoid_navigation-for-git/footstep_planner/src/footstep_planner_walls.cpp
+++ /dev/null
@@ -1,102 +0,0 @@
-/*
- * A footstep planner for humanoid robots
- *
- * Copyright 2010-2011 Johannes Garimort, Armin Hornung, University of Freiburg
- * http://www.ros.org/wiki/footstep_planner
- *
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, version 3.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-#include <ros/ros.h>
-#include <footstep_planner/FootstepPlanner.h>
-#include <nav_msgs/OccupancyGrid.h>
-#include <gridmap_2d/GridMap2D.h>
-
-
-using namespace footstep_planner;
-using gridmap_2d::GridMap2D;
-using gridmap_2d::GridMap2DPtr;
-
-/**
- * @brief Wrapper class for FootstepPlanner, providing callbacks for
- * the node functionality. This node additionally sets wall regions
- * for the footstep planner, from a dedicated map callback.
- *
- */
-class FootstepPlannerWallsNode {
-public:
-  FootstepPlannerWallsNode()
-  {
-    ros::NodeHandle privateNh("~");
-    // params:
-    privateNh.param("footstep_wall_dist", ivFootstepWallDist, 0.15);
-
-    // provide callbacks to interact with the footstep planner:
-    ivGridMapSub = ivNh.subscribe<nav_msgs::OccupancyGrid>("map", 1, &FootstepPlannerWallsNode::mapCallback, this);
-    ivGoalPoseSub = ivNh.subscribe<geometry_msgs::PoseStamped>("goal", 1, &FootstepPlanner::goalPoseCallback, &ivFootstepPlanner);
-    ivStartPoseSub = ivNh.subscribe<geometry_msgs::PoseWithCovarianceStamped>("initialpose", 1, &FootstepPlanner::startPoseCallback, &ivFootstepPlanner);
-
-    // service:
-    ivFootstepPlanService = ivNh.advertiseService("plan_footsteps", &FootstepPlanner::planService, &ivFootstepPlanner);
-  }
-
-  virtual ~FootstepPlannerWallsNode(){}
-
-  void mapCallback(const nav_msgs::OccupancyGridConstPtr& occupancyMap)
-  {
-    ROS_INFO("Obstacle map received, now waiting for wall map.");
-    ivGridMap = GridMap2DPtr(new GridMap2D(occupancyMap));
-    // don't set wall => wait for wall map!
-    //ivFootstepPlanner.setMap(ivGridMap);
-
-    // now subscribe to walls, so that they arrive in order:
-    ivWallMapSub = ivNh.subscribe<nav_msgs::OccupancyGrid>(
-      "map_walls", 1, &FootstepPlannerWallsNode::wallMapCallback, this);
-  }
-
-  void wallMapCallback(const nav_msgs::OccupancyGridConstPtr& occupancyMap)
-  {
-    ROS_INFO("Wall / Obstacle map received");
-    assert(ivGridMap);
-    GridMap2DPtr wallMap(new GridMap2D(occupancyMap));
-
-    GridMap2DPtr enlargedWallMap(new GridMap2D(occupancyMap));
-    cv::Mat binaryMap =  (enlargedWallMap->distanceMap() > ivFootstepWallDist);
-    bitwise_and(binaryMap, ivGridMap->binaryMap(), binaryMap);
-
-    enlargedWallMap->setMap(binaryMap);
-
-    ivFootstepPlanner.updateMap(enlargedWallMap);
-  }
-
-protected:
-  ros::NodeHandle ivNh;
-  footstep_planner::FootstepPlanner ivFootstepPlanner;
-  GridMap2DPtr ivGridMap;
-  double ivFootstepWallDist;
-  ros::Subscriber ivGoalPoseSub, ivGridMapSub, ivWallMapSub, ivStartPoseSub, ivRobotPoseSub;
-  ros::ServiceServer ivFootstepPlanService;
-};
-
-
-int main(int argc, char** argv)
-{
-  ros::init(argc, argv, "footstep_planner");
-
-  FootstepPlannerWallsNode planner;
-
-  ros::spin();
-
-  return 0;
-}
diff --git a/humanoid_navigation-for-git/footstep_planner/src/helper.cpp b/humanoid_navigation-for-git/footstep_planner/src/helper.cpp
deleted file mode 100644
index 184dc16..0000000
--- a/humanoid_navigation-for-git/footstep_planner/src/helper.cpp
+++ /dev/null
@@ -1,104 +0,0 @@
-/*
- * A footstep planner for humanoid robots
- *
- * Copyright 2010-2011 Johannes Garimort, Armin Hornung, University of Freiburg
- * http://www.ros.org/wiki/footstep_planner
- *
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, version 3.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-#include <footstep_planner/helper.h>
-
-namespace footstep_planner
-{
-bool
-collision_check(double x, double y, double theta, double height,
-                double width, int accuracy,
-                const gridmap_2d::GridMap2D& distance_map)
-{
-  double d = distance_map.distanceMapAt(x, y);
-  if (d < 0.0) // if out of bounds => collision
-    return true;
-  d -= distance_map.getResolution();
-
-  const double r_o = sqrt(width*width + height*height) / 2.0;
-
-  if (d >= r_o)
-    return false;
-  else if (accuracy == 0)
-    return false;
-
-  const double h_half = height / 2.0;
-  const double w_half = width / 2.0;
-  const double r_i = std::min(w_half, h_half);
-
-  if (d <= r_i)
-    return true;
-  else if (accuracy == 1)
-    return true;
-
-  double h_new;
-  double w_new;
-  double delta_x;
-  double delta_y;
-  if (width < height)
-  {
-    const double h_clear = sqrt(d*d - w_half*w_half);
-    h_new = h_half - h_clear;
-    w_new = width;
-    delta_x = h_clear + h_new / 2.0;
-    delta_y = 0.0;
-  }
-  else // footWidth >= footHeight
-  {
-    const double w_clear = sqrt(d*d - h_half*h_half);
-    h_new = height;
-    w_new = w_half - w_clear;
-    delta_x = 0.0;
-    delta_y = w_clear + w_new / 2.0;
-  }
-  const double theta_cos = cos(theta);
-  const double theta_sin = sin(theta);
-  const double x_shift = theta_cos*delta_x - theta_sin*delta_y;
-  const double y_shift = theta_sin*delta_x + theta_cos*delta_y;
-
-  return (collision_check(x+x_shift, y+y_shift, theta, h_new, w_new,
-                          accuracy, distance_map) ||
-          collision_check(x-x_shift, y-y_shift, theta, h_new, w_new,
-                          accuracy, distance_map));
-}
-
-
-bool
-pointWithinPolygon(int x, int y, const std::vector<std::pair<int, int> >& edges)
-{
-  int cn = 0;
-
-  // loop through all edges of the polygon
-  for(unsigned int i = 0; i < edges.size() - 1; ++i)
-  {
-    if ((edges[i].second <= y && edges[i + 1].second > y) ||
-        (edges[i].second > y && edges[i + 1].second <= y))
-    {
-      float vt = (float)(y - edges[i].second) /
-        (edges[i + 1].second - edges[i].second);
-      if (x < edges[i].first + vt * (edges[i + 1].first - edges[i].first))
-      {
-        ++cn;
-      }
-    }
-  }
-  return cn & 1;
-}
-}
diff --git a/humanoid_navigation-for-git/gridmap_2d/CHANGELOG.rst b/humanoid_navigation-for-git/gridmap_2d/CHANGELOG.rst
deleted file mode 100644
index 1845fcc..0000000
--- a/humanoid_navigation-for-git/gridmap_2d/CHANGELOG.rst
+++ /dev/null
@@ -1,50 +0,0 @@
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-Changelog for package gridmap_2d
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-0.4.1 (2016-09-05)
-------------------
-* Added include files for footstep_planner and gridmap_2d for install.
-* gridmap_2d : OpenCV migration for indigo.
-* gridmap_2d: Adding conversion back to OccupancyGrid msg
-* gridmap_2d: adding external access to individual cells, allow recomputation of distance map
-* catkinize the stack
-* gridmap_2d: Add option to treat unknown as obstacle
-* Adding copy c'tor to gridmap_2d, humanoid_planner_2d using local map copy now
-* gridmap_2d: Fix map inflation
-
-* Contributors: Armin Hornung, Pramuditha Aravinda, Vincent Rabaud, enriquefernandez
-
-0.4.0 (2013-01-10)
-------------------
-* moved gridmap_2d into own namespace
-
-* Contributors: Armin Hornung
-
-0.3.1 (2012-06-15)
-------------------
-* Fixed gridmap_2d and footstep_planner to be used with ros fuerte and sbpl package
-
-* Contributors: Armin Hornung
-
-0.3.0 (2012-05-29)
-------------------
-* humanoid_navigation now compatible with electric and fuerte
-
-* Contributors: Armin Hornung
-
-0.2.0 (2011-11-28)
-------------------
-* added foundation for map change detection
-* fixed invalid states appearing on border of map during expansion
-
-* Contributors: Armin Hornung
-
-0.1.0 (2011-05-03)
-------------------
-* Replace gridmap2D with other  cv::Mat
-* Added a few more accessors to Gridmap2D
-* Fixed OpenCV deprecation warnings
-* Bugfix: x/y swapped in GridMap2D
-
-* Contributors: Armin Hornung
diff --git a/humanoid_navigation-for-git/gridmap_2d/CMakeLists.txt b/humanoid_navigation-for-git/gridmap_2d/CMakeLists.txt
deleted file mode 100644
index 7c1a4a3..0000000
--- a/humanoid_navigation-for-git/gridmap_2d/CMakeLists.txt
+++ /dev/null
@@ -1,28 +0,0 @@
-cmake_minimum_required(VERSION 2.8.3)
-project(gridmap_2d)
-
-find_package(catkin REQUIRED COMPONENTS nav_msgs)
-
-find_package(OpenCV REQUIRED)
-
-catkin_package(
-  INCLUDE_DIRS include
-  LIBRARIES ${PROJECT_NAME}
-)
-
-include_directories(include ${catkin_INCLUDE_DIRS})
-
-add_library(${PROJECT_NAME} src/GridMap2D.cpp)
-
-#define some target ...
-target_link_libraries(${PROJECT_NAME} ${OpenCV_LIBS})
-
-# install
-install(TARGETS ${PROJECT_NAME}
-        DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
-) 
-
-install(DIRECTORY include/${PROJECT_NAME}/
-  DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
-  FILES_MATCHING PATTERN "*.h"
-)
diff --git a/humanoid_navigation-for-git/gridmap_2d/include/gridmap_2d/GridMap2D.h b/humanoid_navigation-for-git/gridmap_2d/include/gridmap_2d/GridMap2D.h
deleted file mode 100644
index af16cc3..0000000
--- a/humanoid_navigation-for-git/gridmap_2d/include/gridmap_2d/GridMap2D.h
+++ /dev/null
@@ -1,149 +0,0 @@
-/*
- * A simple 2D gridmap structure
- *
- * Copyright 2011 Armin Hornung, University of Freiburg
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- *
- *     * Redistributions of source code must retain the above copyright
- *       notice, this list of conditions and the following disclaimer.
- *     * Redistributions in binary form must reproduce the above copyright
- *       notice, this list of conditions and the following disclaimer in the
- *       documentation and/or other materials provided with the distribution.
- *     * Neither the name of the University of Freiburg nor the names of its
- *       contributors may be used to endorse or promote products derived from
- *       this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
- * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
- * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
- * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- */
-
-
-#ifndef GRIDMAP2D_GRIDMAP2D_H_
-#define GRIDMAP2D_GRIDMAP2D_H_
-
-#include <opencv2/core/core.hpp>
-#include <opencv2/imgproc/imgproc.hpp>
-#include <nav_msgs/OccupancyGrid.h>
-
-
-
-
-
-namespace gridmap_2d{
-/**
- * @brief Stores a nav_msgs::OccupancyGrid in a convenient opencv cv::Mat
- * as binary map (free: 255, occupied: 0) and as distance map (distance
- * to closest obstacle in meter).
- */
-class GridMap2D {
-public:
-  GridMap2D();
-  ///@brief Create from nav_msgs::OccupancyGrid
-  GridMap2D(const nav_msgs::OccupancyGridConstPtr& grid_map, bool unknown_as_obstacle = false);
-  ///@brief Copy constructor, performs a deep copy of underlying data structures
-  GridMap2D(const GridMap2D& other);
-  virtual ~GridMap2D();
-
-  void mapToWorld(unsigned int mx, unsigned int my, double& wx, double& wy) const;
-  bool worldToMap(double wx, double wy, unsigned int& mx, unsigned int& my) const;
-  void worldToMapNoBounds(double wx, double wy, unsigned int& mx, unsigned int& my) const;
-
-  /// check if a coordinate is covered by the map extent (same as worldToMap)
-  bool inMapBounds(double wx, double wy) const;
-
-  /**
-   * Inflate occupancy map by inflationRadius
-   */
-  void inflateMap(double inflationRaduis);
-
-  /// Distance (in m) between two map coordinates (indices)
-  inline double worldDist(unsigned x1, unsigned y1, unsigned x2, unsigned y2){
-    return worldDist(cv::Point(x1, y1), cv::Point(x2, y2));
-  }
-
-  inline double worldDist(const cv::Point& p1, const cv::Point& p2){
-    return GridMap2D::pointDist(p1, p2) * m_mapInfo.resolution;
-  }
-
-  /// Euclidean distance between two points:
-  static inline double pointDist(const cv::Point& p1, const cv::Point& p2){
-    return sqrt(pointDist2(p1, p2));
-  }
-
-  /// Squared distance between two points:
-  static inline double pointDist2(const cv::Point& p1, const cv::Point& p2){
-    return (p1.x - p2.x)*(p1.x - p2.x) + (p1.y - p2.y)*(p1.y - p2.y);
-  }
-
-  /// Returns distance (in m) at world coordinates <wx,wy> in m; -1 if out of bounds!
-  float distanceMapAt(double wx, double wy) const;
-
-  /// Returns distance (in m) at map cell <mx, my> in m; -1 if out of bounds!
-  float distanceMapAtCell(unsigned int mx, unsigned int my) const;
-
-  /// Returns map value at world coordinates <wx, wy>; out of bounds will be returned as 0!
-  uchar binaryMapAt(double wx, double wy) const;
-
-  /// Returns map value at map cell <mx, my>; out of bounds will be returned as 0!
-  uchar binaryMapAtCell(unsigned int mx, unsigned int my) const;
-
-  /// Returns map value at map cell <mx, my>; out of bounds will be returned as 0!
-  uchar& binaryMapAtCell(unsigned int mx, unsigned int my);
-
-  /// @return true if map is occupied at world coordinate <wx, wy>. Out of bounds
-  /// 		will be returned as occupied.
-  bool isOccupiedAt(double wx, double wy) const;
-
-  /// @return true if map is occupied at cell <mx, my>
-  bool isOccupiedAtCell(unsigned int mx, unsigned int my) const;
-
-  ///@brief Initialize map from a ROS OccupancyGrid message
-  void setMap(const nav_msgs::OccupancyGridConstPtr& grid_map, bool unknown_as_obstacle = false);
-
-  ///@brief Converts back into a ROS nav_msgs::OccupancyGrid msg
-  nav_msgs::OccupancyGrid toOccupancyGridMsg() const;
-
-  ///@brief Initialize from an existing cv::Map. mapInfo (in particular resolution) remains the same!
-  void setMap(const cv::Mat& binary_map);
-
-  ///@brief Recalculate the internal distance map. Required after manual changes to the grid map data.
-  void updateDistanceMap();
-
-  inline const nav_msgs::MapMetaData& getInfo() const {return m_mapInfo;}
-  inline float getResolution() const {return m_mapInfo.resolution; }
-  /// returns the tf frame ID of the map (usually "/map")
-  inline const std::string getFrameID() const {return m_frameId;}
-  /// @return the cv::Mat distance image.
-  const cv::Mat& distanceMap() const {return m_distMap;}
-  /// @return the cv::Mat binary image.
-  const cv::Mat& binaryMap() const {return m_binaryMap;}
-  /// @return the size of the cv::Mat binary image. Note that x/y are swapped wrt. height/width
-  inline const CvSize size() const {return m_binaryMap.size();}
-
-  const static uchar FREE = 255;  ///< char value for "free": 255
-  const static uchar OCCUPIED = 0; ///< char value for "free": 0
-
-protected:
-  cv::Mat m_binaryMap;	///< binary occupancy map. 255: free, 0 occupied.
-  cv::Mat m_distMap;		///< distance map (in meter)
-  nav_msgs::MapMetaData m_mapInfo;
-  std::string m_frameId;	///< "map" frame where ROS OccupancyGrid originated from
-
-};
-
-typedef boost::shared_ptr< GridMap2D> GridMap2DPtr;
-typedef boost::shared_ptr<const GridMap2D> GridMap2DConstPtr;
-}
-
-#endif /* GRIDMAP2D_H_ */
diff --git a/humanoid_navigation-for-git/gridmap_2d/mainpage.dox b/humanoid_navigation-for-git/gridmap_2d/mainpage.dox
deleted file mode 100644
index 02017c6..0000000
--- a/humanoid_navigation-for-git/gridmap_2d/mainpage.dox
+++ /dev/null
@@ -1,26 +0,0 @@
-/**
-\mainpage
-\htmlinclude manifest.html
-
-\b gridmap_2d is ... 
-
-<!-- 
-Provide an overview of your package.
--->
-
-
-\section codeapi Code API
-
-<!--
-Provide links to specific auto-generated API documentation within your
-package that is of particular interest to a reader. Doxygen will
-document pretty much every part of your code, so do your best here to
-point the reader to the actual API.
-
-If your codebase is fairly large or has different sets of APIs, you
-should use the doxygen 'group' tag to keep these APIs together. For
-example, the roscpp documentation has 'libros' group.
--->
-
-
-*/
diff --git a/humanoid_navigation-for-git/gridmap_2d/package.xml b/humanoid_navigation-for-git/gridmap_2d/package.xml
deleted file mode 100644
index 091a7b7..0000000
--- a/humanoid_navigation-for-git/gridmap_2d/package.xml
+++ /dev/null
@@ -1,24 +0,0 @@
-<package>
-  <name>gridmap_2d</name>
-  <version>0.4.1</version>
-  <description>
-
-     gridmap_2d - a simple 2D gridmap structure, based on OpenCV's cv::Mat
-
-  </description>
-  <author>Armin Hornung</author>
-  <maintainer email="HornungA@informatik.uni-freiburg.de">Armin Hornung</maintainer>
-  <maintainer email="aravindadp@gmail.com">Pramuditha Aravinda</maintainer>
-  <license>BSD</license>
-  <url>http://ros.org/wiki/gridmap_2d</url>
-
-  <build_depend>rosconsole</build_depend>
-  <build_depend>nav_msgs</build_depend>
-  <build_depend>libopencv-dev</build_depend>
-
-  <run_depend>rosconsole</run_depend>
-  <run_depend>nav_msgs</run_depend>
-  <run_depend>libopencv-dev</run_depend>
-
-  <buildtool_depend>catkin</buildtool_depend>
-</package>
diff --git a/humanoid_navigation-for-git/gridmap_2d/src/GridMap2D.cpp b/humanoid_navigation-for-git/gridmap_2d/src/GridMap2D.cpp
deleted file mode 100644
index 8ce901f..0000000
--- a/humanoid_navigation-for-git/gridmap_2d/src/GridMap2D.cpp
+++ /dev/null
@@ -1,223 +0,0 @@
-/*
- * A simple 2D gridmap structure
- *
- * Copyright 2011 Armin Hornung, University of Freiburg
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- *
- *     * Redistributions of source code must retain the above copyright
- *       notice, this list of conditions and the following disclaimer.
- *     * Redistributions in binary form must reproduce the above copyright
- *       notice, this list of conditions and the following disclaimer in the
- *       documentation and/or other materials provided with the distribution.
- *     * Neither the name of the University of Freiburg nor the names of its
- *       contributors may be used to endorse or promote products derived from
- *       this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
- * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
- * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
- * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- */
-
-#include "gridmap_2d/GridMap2D.h"
-#include <ros/console.h>
-
-namespace gridmap_2d{
-
-GridMap2D::GridMap2D()
-: m_frameId("/map")
-{
-
-}
-
-GridMap2D::GridMap2D(const nav_msgs::OccupancyGridConstPtr& gridMap, bool unknown_as_obstacle) {
-
-  setMap(gridMap, unknown_as_obstacle);
-
-}
-
-GridMap2D::GridMap2D(const GridMap2D& other)
- : m_binaryMap(other.m_binaryMap.clone()),
-   m_distMap(other.m_distMap.clone()),
-   m_mapInfo(other.m_mapInfo),
-   m_frameId(other.m_frameId)
-{
-
-}
-
-GridMap2D::~GridMap2D() {
-
-}
-
-void GridMap2D::updateDistanceMap(){
-  cv::distanceTransform(m_binaryMap, m_distMap, CV_DIST_L2, CV_DIST_MASK_PRECISE);
-  // distance map now contains distance in meters:
-  m_distMap = m_distMap * m_mapInfo.resolution;
-}
-
-void GridMap2D::setMap(const nav_msgs::OccupancyGridConstPtr& grid_map, bool unknown_as_obstacle){
-  m_mapInfo = grid_map->info;
-  m_frameId = grid_map->header.frame_id;
-  // allocate map structs so that x/y in the world correspond to x/y in the image
-  // (=> cv::Mat is rotated by 90 deg, because it's row-major!)
-  m_binaryMap = cv::Mat(m_mapInfo.width, m_mapInfo.height, CV_8UC1);
-  m_distMap = cv::Mat(m_binaryMap.size(), CV_32FC1);
-
-  std::vector<signed char>::const_iterator mapDataIter = grid_map->data.begin();
-
-  //TODO check / param
-  unsigned char map_occ_thres = 70;
-
-  // iterate over map, store in image
-  // (0,0) is lower left corner of OccupancyGrid
-  for(unsigned int j = 0; j < m_mapInfo.height; ++j){
-    for(unsigned int i = 0; i < m_mapInfo.width; ++i){
-      if (*mapDataIter > map_occ_thres
-          || (unknown_as_obstacle && *mapDataIter < 0))
-      {
-        m_binaryMap.at<uchar>(i,j) = OCCUPIED;
-      } else{
-        m_binaryMap.at<uchar>(i,j) = FREE;
-      }
-      ++mapDataIter;
-    }
-  }
-
-  updateDistanceMap();
-
-  ROS_INFO("GridMap2D created with %d x %d cells at %f resolution.", m_mapInfo.width, m_mapInfo.height, m_mapInfo.resolution);
-}
-
-nav_msgs::OccupancyGrid GridMap2D::toOccupancyGridMsg() const{
-  nav_msgs::OccupancyGrid msg;
-  msg.header.frame_id = m_frameId;
-  msg.header.stamp = ros::Time::now();
-  msg.info = m_mapInfo;
-  msg.data.resize(msg.info.height*msg.info.width);
-
-  // iterate over map, store in data
-  std::vector<signed char>::iterator mapDataIter = msg.data.begin();
-  // (0,0) is lower left corner of OccupancyGrid
-  for(unsigned int j = 0; j < m_mapInfo.height; ++j){
-    for(unsigned int i = 0; i < m_mapInfo.width; ++i){
-      if (m_binaryMap.at<uchar>(i,j) == OCCUPIED)
-        *mapDataIter = 100;
-      else
-        *mapDataIter = 0;
-
-      ++mapDataIter;
-    }
-  }
-
-  return msg;
-}
-
-void GridMap2D::setMap(const cv::Mat& binaryMap){
-  m_binaryMap = binaryMap.clone();
-  m_distMap = cv::Mat(m_binaryMap.size(), CV_32FC1);
-
-  cv::distanceTransform(m_binaryMap, m_distMap, CV_DIST_L2, CV_DIST_MASK_PRECISE);
-  // distance map now contains distance in meters:
-  m_distMap = m_distMap * m_mapInfo.resolution;
-
-  ROS_INFO("GridMap2D copied from existing cv::Mat with %d x %d cells at %f resolution.", m_mapInfo.width, m_mapInfo.height, m_mapInfo.resolution);
-
-}
-
-void GridMap2D::inflateMap(double inflationRadius){
-  m_binaryMap = (m_distMap > inflationRadius );
-  // recompute distance map with new binary map:
-  cv::distanceTransform(m_binaryMap, m_distMap, CV_DIST_L2, CV_DIST_MASK_PRECISE);
-  m_distMap = m_distMap * m_mapInfo.resolution;
-}
-
-// See costmap2D for mapToWorld / worldToMap implementations:
-
-void GridMap2D::mapToWorld(unsigned int mx, unsigned int my, double& wx, double& wy) const {
-  wx = m_mapInfo.origin.position.x + (mx+0.5) * m_mapInfo.resolution;
-  wy = m_mapInfo.origin.position.y + (my+0.5) * m_mapInfo.resolution;
-}
-
-
-
-void GridMap2D::worldToMapNoBounds(double wx, double wy, unsigned int& mx, unsigned int& my) const {
-  mx = (int) ((wx - m_mapInfo.origin.position.x) / m_mapInfo.resolution);
-  my = (int) ((wy - m_mapInfo.origin.position.y) / m_mapInfo.resolution);
-}
-
-bool GridMap2D::worldToMap(double wx, double wy, unsigned int& mx, unsigned int& my) const {
-  if(wx < m_mapInfo.origin.position.x || wy < m_mapInfo.origin.position.y)
-    return false;
-
-  mx = (int) ((wx - m_mapInfo.origin.position.x) / m_mapInfo.resolution);
-  my = (int) ((wy - m_mapInfo.origin.position.y) / m_mapInfo.resolution);
-
-  if(mx < m_mapInfo.width && my < m_mapInfo.height)
-    return true;
-
-  return false;
-}
-
-bool GridMap2D::inMapBounds(double wx, double wy) const{
-  unsigned mx, my;
-  return worldToMap(wx,wy,mx,my);
-}
-
-float GridMap2D::distanceMapAt(double wx, double wy) const{
-  unsigned mx, my;
-
-  if (worldToMap(wx, wy, mx, my))
-    return m_distMap.at<float>(mx, my);
-  else
-    return -1.0f;
-}
-
-
-uchar GridMap2D::binaryMapAt(double wx, double wy) const{
-  unsigned mx, my;
-
-  if (worldToMap(wx, wy, mx, my))
-    return m_binaryMap.at<uchar>(mx, my);
-  else
-    return 0;
-}
-
-float GridMap2D::distanceMapAtCell(unsigned int mx, unsigned int my) const{
-  return m_distMap.at<float>(mx, my);
-}
-
-
-uchar GridMap2D::binaryMapAtCell(unsigned int mx, unsigned int my) const{
-  return m_binaryMap.at<uchar>(mx, my);
-}
-
-uchar& GridMap2D::binaryMapAtCell(unsigned int mx, unsigned int my){
-  return m_binaryMap.at<uchar>(mx, my);
-}
-
-
-bool GridMap2D::isOccupiedAtCell(unsigned int mx, unsigned int my) const{
-  return (m_binaryMap.at<uchar>(mx, my) < 255);
-}
-
-
-bool GridMap2D::isOccupiedAt(double wx, double wy) const{
-  unsigned mx, my;
-  if (worldToMap(wx, wy, mx, my))
-    return isOccupiedAtCell(mx, my);
-  else
-    return true;
-}
-
-}
-
-
diff --git a/humanoid_navigation-for-git/humanoid_localization/CHANGELOG.rst b/humanoid_navigation-for-git/humanoid_localization/CHANGELOG.rst
deleted file mode 100644
index 1bd641b..0000000
--- a/humanoid_navigation-for-git/humanoid_localization/CHANGELOG.rst
+++ /dev/null
@@ -1,56 +0,0 @@
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-Changelog for package humanoid_localization
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-0.4.1 (2016-09-05)
-------------------
-* catkinize the stack
-* get code to compile under Hydro
-* removes some trailing blanks and semicolon
-* added localization Service to HumanoidLocalization (untested)
-* Localization updates are now done based on the distance to the last localized pose (not summed distance)
-* Homogeneous subsampling of laser points (PCL voxel grid) instead of angular
-* Uniform sampling for depth camera data
-* Motion model and noise can now be calibrated with a variance matrix. Some parameters are no longer used, please adjust accordingly:
-  motion_noise/x, motion_noise/y, motion_noise/yaw, num_sensor_beams
-* Preventing TF_OLD_DATA Warning when init from RVIZ
-* refactoring/cleanup
-* Added Timer to Localization and timerCallback now republishes latest tf transform
-* added parameterization for odometry calibration in MotionModel
-* Proper floor offset if z is constrained to supporting surface by kinematics / odometry
-* More loops parallelized (motion model)
-
-* fixes:
-
-  * Fixed invalid conversion from 'octomap::AbstractOcTree*' to 'octomap::OcTree*'
-  * Add dependency to cmake_modules for FindEigen.cmake
-  * Fixed duplicate library export
-  * Fixed linking endpointmodel to humanoidlocalization in case dynamicEDT3D is available
-  * Fix missing OpenMP compilation flags (from catkinization)
-  * Fixing error with constrainMotion flags and optimized-away assertion
-  * Fixed point cloud callback crashing when ground filtering and no ground visible
-  * Bugfix for OctoMap in Groovy
-  * Height lookup for endpoint model fixed
-  * Fixed raycasting height integration on non-zero ground and raycast max_range
-  * bug fix: removed (unnecessary) feature in HumanoidLocalization
-  * Fixed compilation with ROS groovy (tf types)
-  * fixed localization for point clouds
-
-* Contributors: Armin Hornung, Daniel Maier, Pramuditha Aravinda, Stefan Osswald, Vincent Rabaud, enriquefernandez
-
-0.4.0 (2013-01-10)
-------------------
-* indentation / code style
-* added point cloud support (with ground filter) to humanoid_localization
-* Added option to constrain motion according to odometry (don't estimate z / RP)
-* cleanup, init localization from ground truth via tf lookup
-* Fixed odometry lookup error (wrong frame) and missing odom data
-* restructuring of humanoid_localization started
-* Parameter cleanup / renaming
-* Better height measurement in raycasting model
-* humanoid_localization now uses sensor_msgs::Imu instead of nao_msgs
-* EndpointModel is now optional, depends on dynamicEDT3D
-* humanoid_localization added to humanoid_navigation, currently supports 6D localization from laser, odometry and IMU
-
-* Contributors: Armin Hornung, Daniel Maier
-
diff --git a/humanoid_navigation-for-git/humanoid_localization/CMakeLists.txt b/humanoid_navigation-for-git/humanoid_localization/CMakeLists.txt
deleted file mode 100644
index 8f1d24e..0000000
--- a/humanoid_navigation-for-git/humanoid_localization/CMakeLists.txt
+++ /dev/null
@@ -1,64 +0,0 @@
-cmake_minimum_required(VERSION 2.8.3)
-project(humanoid_localization)
-
-find_package(catkin REQUIRED COMPONENTS roscpp pcl_conversions pcl_ros message_filters sensor_msgs cmake_modules)
-find_package(OpenMP)
-find_package(Boost REQUIRED COMPONENTS random)
-find_package(Eigen REQUIRED)
-find_package(octomap REQUIRED)
-include_directories(${OCTOMAP_INCLUDE_DIRS})
-link_libraries(${OCTOMAP_LIBRARIES})
-
-# required for OpenMP
-SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
-SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
-SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
-
-SET(LIBRARIES mapmodel motionmodel observationmodel raycastingmodel)
-
-find_package(dynamicEDT3D)
-if (${dynamicEDT3D_FOUND})                                                                       
-  include_directories(${DYNAMICEDT3D_INCLUDE_DIRS})                                                          
-  link_directories(${DYNAMICEDT3D_LIBRARY_DIRS})
-  LINK_LIBRARIES(${OCTOMAP_LIBRARIES} ${DYNAMICEDT3D_LIBRARIES})
-  list(APPEND LIBRARIES endpointmodel)
-else (${dynamicEDT3D_FOUND})
-  MESSAGE(WARNING "dynamicEDT3D library (part of OctoMap >1.5) not found, skipping endpoint model")
-  add_definitions(-DSKIP_ENDPOINT_MODEL)
-endif (${dynamicEDT3D_FOUND})
-
-catkin_package(
-  INCLUDE_DIRS include
-  LIBRARIES ${LIBRARIES} humanoidlocalization
-  CATKIN_DEPENDS tf
-  DEPENDS octomap OpenMP
-)
-
-include_directories(include
-  ${catkin_INCLUDE_DIRS}
-)
-
-if (${dynamicEDT3D_FOUND})
-  add_library(endpointmodel src/EndpointModel.cpp)
-endif (${dynamicEDT3D_FOUND})
-
-add_library(mapmodel src/MapModel.cpp)
-add_library(motionmodel src/MotionModel.cpp)
-add_library(observationmodel src/ObservationModel.cpp)
-
-add_library(raycastingmodel src/RaycastingModel.cpp)
-target_link_libraries(raycastingmodel observationmodel)
-
-add_library(humanoidlocalization src/HumanoidLocalization.cpp)
-target_link_libraries(humanoidlocalization ${LIBRARIES} ${catkin_LIBRARIES})
-
-add_executable(localization_node src/localization_node.cpp)
-target_link_libraries(localization_node humanoidlocalization ${catkin_LIBRARIES})
-
-# install
-install(TARGETS ${LIBRARIES} humanoidlocalization
-        DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
-) 
-install(TARGETS localization_node
-        DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
-)
diff --git a/humanoid_navigation-for-git/humanoid_localization/config/localization_conf_motion_test.yaml b/humanoid_navigation-for-git/humanoid_localization/config/localization_conf_motion_test.yaml
deleted file mode 100644
index c856cbf..0000000
--- a/humanoid_navigation-for-git/humanoid_localization/config/localization_conf_motion_test.yaml
+++ /dev/null
@@ -1,18 +0,0 @@
-use_raycasting: true
-init_from_truepose: true
-num_particles: 1
-neff_factor: 0
-
-initial_std_x: 0.0
-initial_std_y: 0.0
-initial_std_z: 0.0
-initial_std_roll: 0.0
-initial_std_pitch: 0.0
-initial_std_yaw: 0.0
-
-motion_noise/xx: 0.0
-motion_noise/yy: 0.0
-motion_noise/zz: 0.0
-motion_noise/RR: 0.0
-motion_noise/PP: 0.0
-motion_noise/YY: 0.0
\ No newline at end of file
diff --git a/humanoid_navigation-for-git/humanoid_localization/config/localization_vis.vcg b/humanoid_navigation-for-git/humanoid_localization/config/localization_vis.vcg
deleted file mode 100644
index 437b31b..0000000
--- a/humanoid_navigation-for-git/humanoid_localization/config/localization_vis.vcg
+++ /dev/null
@@ -1,330 +0,0 @@
-Axes.Enabled=1
-Axes.Length=1
-Axes.Radius=0.02
-Axes.Reference\ Frame=<Fixed Frame>
-Background\ ColorB=0
-Background\ ColorG=0
-Background\ ColorR=0
-Best\ Particle.Arrow\ Length=0.3
-Best\ Particle.ColorB=0.0509804
-Best\ Particle.ColorG=0.996078
-Best\ Particle.ColorR=0
-Best\ Particle.Enabled=1
-Best\ Particle.Topic=/nao_localization/best_particle
-Camera\ Config=0.594798 2.21966 8.10299 1.46659 -0.326056 1.29938e-05
-Camera\ Type=rviz::XYOrbitViewController
-Fixed\ Frame=/map
-Grid.Alpha=0.5
-Grid.Cell\ Size=1
-Grid.ColorB=0.5
-Grid.ColorG=0.5
-Grid.ColorR=0.5
-Grid.Enabled=1
-Grid.Line\ Style=0
-Grid.Line\ Width=0.03
-Grid.Normal\ Cell\ Count=0
-Grid.OffsetX=0
-Grid.OffsetY=0
-Grid.OffsetZ=0
-Grid.Plane=0
-Grid.Plane\ Cell\ Count=50
-Grid.Reference\ Frame=<Fixed Frame>
-Laser\ Scan..AxisColorAutocompute\ Value\ Bounds=1
-Laser\ Scan..AxisColorAxis=2
-Laser\ Scan..AxisColorMax\ Value=10
-Laser\ Scan..AxisColorMin\ Value=-10
-Laser\ Scan..AxisColorUse\ Fixed\ Frame=1
-Laser\ Scan..FlatColorColorB=1
-Laser\ Scan..FlatColorColorG=1
-Laser\ Scan..FlatColorColorR=1
-Laser\ Scan..IntensityAutocompute\ Intensity\ Bounds=1
-Laser\ Scan..IntensityChannel\ Name=intensity
-Laser\ Scan..IntensityMax\ ColorB=1
-Laser\ Scan..IntensityMax\ ColorG=1
-Laser\ Scan..IntensityMax\ ColorR=1
-Laser\ Scan..IntensityMax\ Intensity=4096
-Laser\ Scan..IntensityMin\ ColorB=0
-Laser\ Scan..IntensityMin\ ColorG=0
-Laser\ Scan..IntensityMin\ ColorR=0
-Laser\ Scan..IntensityMin\ Intensity=0
-Laser\ Scan..IntensityUse\ full\ RGB\ spectrum=0
-Laser\ Scan.Alpha=1
-Laser\ Scan.Billboard\ Size=0.01
-Laser\ Scan.Color\ Transformer=Intensity
-Laser\ Scan.Decay\ Time=0
-Laser\ Scan.Enabled=1
-Laser\ Scan.Position\ Transformer=XYZ
-Laser\ Scan.Queue\ Size=10
-Laser\ Scan.Selectable=0
-Laser\ Scan.Style=2
-Laser\ Scan.Topic=/scan
-MarkerArray.Enabled=1
-MarkerArray.Marker\ Array\ Topic=/occupied_cells_vis_array
-MarkerArray.Queue\ Size=100
-MarkerArray.map=1
-MarkerArray2.Enabled=1
-MarkerArray2.Marker\ Array\ Topic=/cortex_marker_array_throttle
-MarkerArray2.Queue\ Size=100
-MarkerArray2.nao_antenna2=1
-Odometry.Angle\ Tolerance=0.1
-Odometry.ColorB=0
-Odometry.ColorG=0.1
-Odometry.ColorR=1
-Odometry.Enabled=0
-Odometry.Keep=10
-Odometry.Length=0.2
-Odometry.Position\ Tolerance=0.01
-Odometry.Topic=/odom
-Particlecloud.Arrow\ Length=0.3
-Particlecloud.ColorB=0
-Particlecloud.ColorG=0
-Particlecloud.ColorR=1
-Particlecloud.Enabled=1
-Particlecloud.Topic=/humanoid_localization/particlecloud
-PointCloud2..AxisColorAutocompute\ Value\ Bounds=1
-PointCloud2..AxisColorAxis=2
-PointCloud2..AxisColorMax\ Value=10
-PointCloud2..AxisColorMin\ Value=-10
-PointCloud2..AxisColorUse\ Fixed\ Frame=1
-PointCloud2..FlatColorColorB=0.0156863
-PointCloud2..FlatColorColorG=0
-PointCloud2..FlatColorColorR=1
-PointCloud2..IntensityAutocompute\ Intensity\ Bounds=1
-PointCloud2..IntensityChannel\ Name=intensity
-PointCloud2..IntensityMax\ ColorB=1
-PointCloud2..IntensityMax\ ColorG=1
-PointCloud2..IntensityMax\ ColorR=1
-PointCloud2..IntensityMax\ Intensity=4096
-PointCloud2..IntensityMin\ ColorB=0
-PointCloud2..IntensityMin\ ColorG=0
-PointCloud2..IntensityMin\ ColorR=0
-PointCloud2..IntensityMin\ Intensity=0
-PointCloud2..IntensityUse\ full\ RGB\ spectrum=0
-PointCloud2.Alpha=1
-PointCloud2.Billboard\ Size=0.03
-PointCloud2.Color\ Transformer=FlatColor
-PointCloud2.Decay\ Time=0
-PointCloud2.Enabled=1
-PointCloud2.Position\ Transformer=XYZ
-PointCloud2.Queue\ Size=10
-PointCloud2.Selectable=1
-PointCloud2.Style=2
-PointCloud2.Topic=/humanoid_localization/filtered_cloud
-Property\ Grid\ Splitter=791,76
-Property\ Grid\ State=expanded=.Global Options,TF.Enabled,TF.Frames,TF.Frames./CameraBottom_frame,TF.Frames./CameraTop_frame,TF.Frames./HeadPitch_link,TF.Frames./LAnkleRoll_link,TF.Frames./LWristYaw_link,TF.Frames./Laser_frame,TF.Frames./RAnkleRoll_link,TF.Frames./RWristYaw_link,TF.Frames./base_link,TF.Frames./gaze,TF.Frames./l_ankle,TF.Frames./l_gripper,TF.Frames./l_sole,TF.Frames./l_wrist,TF.Frames./map,TF.Frames./mocap,TF.Frames./r_ankle,TF.Frames./r_gripper,TF.Frames./r_sole,TF.Frames./r_wrist,TF.Frames./torso,TF.Frames./HeadYaw_link,TF.Frames./LAnklePitch_link,TF.Frames./LElbowRoll_link,TF.Frames./LElbowYaw_link,TF.Frames./LHipPitch_link,TF.Frames./LHipRoll_link,TF.Frames./LHipYawPitch_link,TF.Frames./LKneePitch_link,TF.Frames./LShoulderPitch_link,TF.Frames./LShoulderRoll_link,TF.Frames./RAnklePitch_link,TF.Frames./RElbowRoll_link,TF.Frames./RElbowYaw_link,TF.Frames./RHipPitch_link,TF.Frames./RHipRoll_link,TF.Frames./RHipYawPitch_link,TF.Frames./RKneePitch_link,TF.Frames./RShoulderPitch_link,TF.Frames./RShoulderRoll_link,TF.Frames./Torso_link_real,TF.Frames./base_footprint,TF.Frames./odom,TF.Frames./nao_antenna2,TF.Frames./torso_real,Robot Model.Enabled,Odometry.Enabled,True Pose.Enabled,Best Particle.Enabled,Particlecloud.Enabled,MarkerArray.Enabled,PointCloud2.Enabled,MarkerArray2.Enabled;splitterratio=0.5
-QMainWindow=000000ff00000000fd000000030000000000000167000003a6fc0200000001fb000000100044006900730070006c0061007900730100000030000003a6000000de010000050000000100000108000003a6fc0200000003fb0000001e0054006f006f006c002000500072006f007000650072007400690065007301000000300000014a0000006901000005fb0000000a00560069006500770073010000017d00000174000000ad01000005fb0000001200530065006c0065006300740069006f006e01000002f4000000e20000006901000005000000030000057800000041fc0100000001fb0000000800540069006d0065010000000000000578000001f00100000500000303000003a600000004000000040000000800000008fc0000000100000002000000010000000a0054006f006f006c00730100000000ffffffff0000000000000000
-Robot\ Model.Alpha=1
-Robot\ Model.Collision\ Enabled=0
-Robot\ Model.Enabled=1
-Robot\ Model.Robot\ Description=robot_description
-Robot\ Model.TF\ Prefix=
-Robot\ Model.Update\ Interval=0
-Robot\ Model.Visual\ Enabled=1
-Robot\:\ Robot\ Model\ Link\ HeadPitch_linkAlpha=1
-Robot\:\ Robot\ Model\ Link\ HeadPitch_linkEnabled=1
-Robot\:\ Robot\ Model\ Link\ HeadPitch_linkShow\ Axes=0
-Robot\:\ Robot\ Model\ Link\ HeadPitch_linkShow\ Trail=0
-Robot\:\ Robot\ Model\ Link\ HeadYaw_linkAlpha=1
-Robot\:\ Robot\ Model\ Link\ HeadYaw_linkEnabled=1
-Robot\:\ Robot\ Model\ Link\ HeadYaw_linkShow\ Axes=0
-Robot\:\ Robot\ Model\ Link\ HeadYaw_linkShow\ Trail=0
-Robot\:\ Robot\ Model\ Link\ LAnklePitch_linkAlpha=1
-Robot\:\ Robot\ Model\ Link\ LAnklePitch_linkEnabled=1
-Robot\:\ Robot\ Model\ Link\ LAnklePitch_linkShow\ Axes=0
-Robot\:\ Robot\ Model\ Link\ LAnklePitch_linkShow\ Trail=0
-Robot\:\ Robot\ Model\ Link\ LAnkleRoll_linkAlpha=1
-Robot\:\ Robot\ Model\ Link\ LAnkleRoll_linkEnabled=1
-Robot\:\ Robot\ Model\ Link\ LAnkleRoll_linkShow\ Axes=0
-Robot\:\ Robot\ Model\ Link\ LAnkleRoll_linkShow\ Trail=0
-Robot\:\ Robot\ Model\ Link\ LElbowRoll_linkAlpha=1
-Robot\:\ Robot\ Model\ Link\ LElbowRoll_linkEnabled=1
-Robot\:\ Robot\ Model\ Link\ LElbowRoll_linkShow\ Axes=0
-Robot\:\ Robot\ Model\ Link\ LElbowRoll_linkShow\ Trail=0
-Robot\:\ Robot\ Model\ Link\ LElbowYaw_linkAlpha=1
-Robot\:\ Robot\ Model\ Link\ LElbowYaw_linkEnabled=1
-Robot\:\ Robot\ Model\ Link\ LElbowYaw_linkShow\ Axes=0
-Robot\:\ Robot\ Model\ Link\ LElbowYaw_linkShow\ Trail=0
-Robot\:\ Robot\ Model\ Link\ LHipPitch_linkAlpha=1
-Robot\:\ Robot\ Model\ Link\ LHipPitch_linkEnabled=1
-Robot\:\ Robot\ Model\ Link\ LHipPitch_linkShow\ Axes=0
-Robot\:\ Robot\ Model\ Link\ LHipPitch_linkShow\ Trail=0
-Robot\:\ Robot\ Model\ Link\ LHipRoll_linkAlpha=1
-Robot\:\ Robot\ Model\ Link\ LHipRoll_linkEnabled=1
-Robot\:\ Robot\ Model\ Link\ LHipRoll_linkShow\ Axes=0
-Robot\:\ Robot\ Model\ Link\ LHipRoll_linkShow\ Trail=0
-Robot\:\ Robot\ Model\ Link\ LHipYawPitch_linkAlpha=1
-Robot\:\ Robot\ Model\ Link\ LHipYawPitch_linkEnabled=1
-Robot\:\ Robot\ Model\ Link\ LHipYawPitch_linkShow\ Axes=0
-Robot\:\ Robot\ Model\ Link\ LHipYawPitch_linkShow\ Trail=0
-Robot\:\ Robot\ Model\ Link\ LKneePitch_linkAlpha=1
-Robot\:\ Robot\ Model\ Link\ LKneePitch_linkEnabled=1
-Robot\:\ Robot\ Model\ Link\ LKneePitch_linkShow\ Axes=0
-Robot\:\ Robot\ Model\ Link\ LKneePitch_linkShow\ Trail=0
-Robot\:\ Robot\ Model\ Link\ LShoulderRoll_linkAlpha=1
-Robot\:\ Robot\ Model\ Link\ LShoulderRoll_linkEnabled=1
-Robot\:\ Robot\ Model\ Link\ LShoulderRoll_linkShow\ Axes=0
-Robot\:\ Robot\ Model\ Link\ LShoulderRoll_linkShow\ Trail=0
-Robot\:\ Robot\ Model\ Link\ LWristYaw_linkAlpha=1
-Robot\:\ Robot\ Model\ Link\ LWristYaw_linkEnabled=1
-Robot\:\ Robot\ Model\ Link\ LWristYaw_linkShow\ Axes=0
-Robot\:\ Robot\ Model\ Link\ LWristYaw_linkShow\ Trail=0
-Robot\:\ Robot\ Model\ Link\ Laser_frameAlpha=1
-Robot\:\ Robot\ Model\ Link\ Laser_frameEnabled=1
-Robot\:\ Robot\ Model\ Link\ Laser_frameShow\ Axes=0
-Robot\:\ Robot\ Model\ Link\ Laser_frameShow\ Trail=0
-Robot\:\ Robot\ Model\ Link\ RAnklePitch_linkAlpha=1
-Robot\:\ Robot\ Model\ Link\ RAnklePitch_linkEnabled=1
-Robot\:\ Robot\ Model\ Link\ RAnklePitch_linkShow\ Axes=0
-Robot\:\ Robot\ Model\ Link\ RAnklePitch_linkShow\ Trail=0
-Robot\:\ Robot\ Model\ Link\ RAnkleRoll_linkAlpha=1
-Robot\:\ Robot\ Model\ Link\ RAnkleRoll_linkEnabled=1
-Robot\:\ Robot\ Model\ Link\ RAnkleRoll_linkShow\ Axes=0
-Robot\:\ Robot\ Model\ Link\ RAnkleRoll_linkShow\ Trail=0
-Robot\:\ Robot\ Model\ Link\ RElbowRoll_linkAlpha=1
-Robot\:\ Robot\ Model\ Link\ RElbowRoll_linkEnabled=1
-Robot\:\ Robot\ Model\ Link\ RElbowRoll_linkShow\ Axes=0
-Robot\:\ Robot\ Model\ Link\ RElbowRoll_linkShow\ Trail=0
-Robot\:\ Robot\ Model\ Link\ RElbowYaw_linkAlpha=1
-Robot\:\ Robot\ Model\ Link\ RElbowYaw_linkEnabled=1
-Robot\:\ Robot\ Model\ Link\ RElbowYaw_linkShow\ Axes=0
-Robot\:\ Robot\ Model\ Link\ RElbowYaw_linkShow\ Trail=0
-Robot\:\ Robot\ Model\ Link\ RHipPitch_linkAlpha=1
-Robot\:\ Robot\ Model\ Link\ RHipPitch_linkEnabled=1
-Robot\:\ Robot\ Model\ Link\ RHipPitch_linkShow\ Axes=0
-Robot\:\ Robot\ Model\ Link\ RHipPitch_linkShow\ Trail=0
-Robot\:\ Robot\ Model\ Link\ RHipRoll_linkAlpha=1
-Robot\:\ Robot\ Model\ Link\ RHipRoll_linkEnabled=1
-Robot\:\ Robot\ Model\ Link\ RHipRoll_linkShow\ Axes=0
-Robot\:\ Robot\ Model\ Link\ RHipRoll_linkShow\ Trail=0
-Robot\:\ Robot\ Model\ Link\ RHipYawPitch_linkAlpha=1
-Robot\:\ Robot\ Model\ Link\ RHipYawPitch_linkEnabled=1
-Robot\:\ Robot\ Model\ Link\ RHipYawPitch_linkShow\ Axes=0
-Robot\:\ Robot\ Model\ Link\ RHipYawPitch_linkShow\ Trail=0
-Robot\:\ Robot\ Model\ Link\ RKneePitch_linkAlpha=1
-Robot\:\ Robot\ Model\ Link\ RKneePitch_linkEnabled=1
-Robot\:\ Robot\ Model\ Link\ RKneePitch_linkShow\ Axes=0
-Robot\:\ Robot\ Model\ Link\ RKneePitch_linkShow\ Trail=0
-Robot\:\ Robot\ Model\ Link\ RShoulderRoll_linkAlpha=1
-Robot\:\ Robot\ Model\ Link\ RShoulderRoll_linkEnabled=1
-Robot\:\ Robot\ Model\ Link\ RShoulderRoll_linkShow\ Axes=0
-Robot\:\ Robot\ Model\ Link\ RShoulderRoll_linkShow\ Trail=0
-Robot\:\ Robot\ Model\ Link\ RWristYaw_linkAlpha=1
-Robot\:\ Robot\ Model\ Link\ RWristYaw_linkEnabled=1
-Robot\:\ Robot\ Model\ Link\ RWristYaw_linkShow\ Axes=0
-Robot\:\ Robot\ Model\ Link\ RWristYaw_linkShow\ Trail=0
-Robot\:\ Robot\ Model\ Link\ l_gripperAlpha=1
-Robot\:\ Robot\ Model\ Link\ l_gripperEnabled=1
-Robot\:\ Robot\ Model\ Link\ l_gripperShow\ Axes=0
-Robot\:\ Robot\ Model\ Link\ l_gripperShow\ Trail=0
-Robot\:\ Robot\ Model\ Link\ r_gripperAlpha=1
-Robot\:\ Robot\ Model\ Link\ r_gripperEnabled=1
-Robot\:\ Robot\ Model\ Link\ r_gripperShow\ Axes=0
-Robot\:\ Robot\ Model\ Link\ r_gripperShow\ Trail=0
-Robot\:\ Robot\ Model\ Link\ torsoAlpha=1
-Robot\:\ Robot\ Model\ Link\ torsoEnabled=1
-Robot\:\ Robot\ Model\ Link\ torsoShow\ Axes=0
-Robot\:\ Robot\ Model\ Link\ torsoShow\ Trail=0
-TF.All\ Enabled=0
-TF.Enabled=1
-TF.Frame\ Timeout=15
-TF.Marker\ Scale=1
-TF.Show\ Arrows=0
-TF.Show\ Axes=1
-TF.Show\ Names=1
-TF.Update\ Interval=0
-Target\ Frame=<Fixed Frame>
-Tool\ 2D\ Nav\ GoalTopic=goal
-Tool\ 2D\ Pose\ EstimateTopic=initialpose
-True\ Pose.Arrow\ Length=0.3
-True\ Pose.ColorB=1
-True\ Pose.ColorG=0
-True\ Pose.ColorR=0
-True\ Pose.Enabled=1
-True\ Pose.Topic=/true_particle
-[Display0]
-ClassName=rviz::GridDisplay
-Name=Grid
-[Display1]
-ClassName=rviz::AxesDisplay
-Name=Axes
-[Display10]
-ClassName=rviz::PointCloud2Display
-Name=PointCloud2
-[Display11]
-ClassName=rviz::MarkerArrayDisplay
-Name=MarkerArray2
-[Display2]
-ClassName=rviz::TFDisplay
-Name=TF
-[Display3]
-ClassName=rviz::RobotModelDisplay
-Name=Robot Model
-[Display4]
-ClassName=rviz::OdometryDisplay
-Name=Odometry
-[Display5]
-ClassName=rviz::LaserScanDisplay
-Name=Laser Scan
-[Display6]
-ClassName=rviz::PoseArrayDisplay
-Name=True Pose
-[Display7]
-ClassName=rviz::PoseArrayDisplay
-Name=Best Particle
-[Display8]
-ClassName=rviz::PoseArrayDisplay
-Name=Particlecloud
-[Display9]
-ClassName=rviz::MarkerArrayDisplay
-Name=MarkerArray
-[TF.Frames.]
-CameraBottom_frame.Enabled=0
-CameraTop_frame.Enabled=0
-HeadPitch_link.Enabled=0
-HeadYaw_link.Enabled=0
-LAnklePitch_link.Enabled=0
-LAnkleRoll_link.Enabled=0
-LElbowRoll_link.Enabled=0
-LElbowYaw_link.Enabled=0
-LHipPitch_link.Enabled=0
-LHipRoll_link.Enabled=0
-LHipYawPitch_link.Enabled=0
-LKneePitch_link.Enabled=0
-LShoulderPitch_link.Enabled=0
-LShoulderRoll_link.Enabled=0
-LWristYaw_link.Enabled=0
-Laser_frame.Enabled=0
-RAnklePitch_link.Enabled=0
-RAnkleRoll_link.Enabled=0
-RElbowRoll_link.Enabled=0
-RElbowYaw_link.Enabled=0
-RHipPitch_link.Enabled=0
-RHipRoll_link.Enabled=0
-RHipYawPitch_link.Enabled=0
-RKneePitch_link.Enabled=0
-RShoulderPitch_link.Enabled=0
-RShoulderRoll_link.Enabled=0
-RWristYaw_link.Enabled=0
-Torso_link_real.Enabled=0
-base_footprint.Enabled=0
-base_link.Enabled=0
-gaze.Enabled=0
-l_ankle.Enabled=0
-l_gripper.Enabled=0
-l_sole.Enabled=0
-l_wrist.Enabled=0
-map.Enabled=1
-mocap.Enabled=1
-nao_antenna2.Enabled=0
-odom.Enabled=0
-r_ankle.Enabled=0
-r_gripper.Enabled=0
-r_sole.Enabled=0
-r_wrist.Enabled=0
-torso.Enabled=1
-torso_real.Enabled=1
-[Window]
-Height=1077
-Width=1404
-X=1918
-Y=-23
diff --git a/humanoid_navigation-for-git/humanoid_localization/config/nao_localization_laser.yaml b/humanoid_navigation-for-git/humanoid_localization/config/nao_localization_laser.yaml
deleted file mode 100644
index e57b1ee..0000000
--- a/humanoid_navigation-for-git/humanoid_localization/config/nao_localization_laser.yaml
+++ /dev/null
@@ -1,113 +0,0 @@
-#
-# 6D localization configuration for the Nao humanoid with laser head
-#
-
-
- # raycasting (slow) or endpoint model (approx)
-use_raycasting: true
-
-# for testing only!
-# weight_factor_roll: 0.0
-# weight_factor_pitch: 0.0
-#weight_factor_z: 5.0
-
-
-num_particles: 500
-init_global: false
-init_from_truepose: false
-
-# global loc:
-# num_particles: 20000
-# init_global: true
-# init_from_truepose: false
-
-# rel. number of effectice particles for resampling threshold (0: never, 1: always)
-neff_factor: 1.0 
-
-# minimum weight for a particle (normal scale, need to sum up to < 1!)
-# Warning: this keeps the particles from converging properly!
-#min_particle_weight: 0.000001
-
-sensor_sampling_dist: 0.25
-
-# min traversed odometry interval between laser measurements:
-# 
-update_min_trans: 0.2
-update_min_rot: 0.4
-
-# laser obs. model (for raycasting only)
-raycasting/z_hit: 0.8
-raycasting/z_short: 0.1
-raycasting/z_max: 0.05
-raycasting/z_rand: 0.05
-raycasting/sigma_hit: 0.02
-raycasting/lambda_short: 0.1
-
-# laser obs.model (for endpoint model only)
-# std.dev for gaussian (p_hit)
-#use in loc
-endpoint/sigma: 0.05
-#used for global:
-#laser_endp_sigma: 0.07
-
-
-#motion_mean_z: 0.317
-#motion_range_z: 0.03
-#motion_range_roll: 0.25
-#motion_range_pitch: 0.1
-
-motion_sigma_z: 0.02
-motion_sigma_roll: 0.015 # 0.85 deg.
-motion_sigma_pitch: 0.015 # 0.85 deg.
-
-# noise of the motion model
-# std.devs for z,r,p depend on amount of translation (per meter):
-motion_noise/z: 0.05   # per m
-motion_noise/roll: 0.1    # per m
-motion_noise/pitch: 0.1    # per m
-
-#noise affecting x direction (sq. / variance)
-motion_noise/xx:    0.03
-motion_noise/xy:   0.05
-motion_noise/xt: 0.0003
-#noise affecting y direction (sq. / variance)
-motion_noise/yx:    0.13
-motion_noise/yy:   0.09
-motion_noise/yt:  0.004
-#noise affecting orientation (sq. / variance)
-motion_noise/tx:     1.58
-motion_noise/ty:     1.03
-motion_noise/tt:    0.11
-
-# single linear dependencies are no longer used!
-#motion_noise/x: 0.15  
-#motion_noise/y: 0.15  
-#motion_noise/yaw: 0.8 
-
-# odometry calibration for 2D drift (x,y,theta)
-# this is the identy matrix - uses odometry uncalibrated
-motion_calib/xx:  1.0
-motion_calib/xy:  0.0
-motion_calib/xt:  0.0
-motion_calib/yx:  0.0
-motion_calib/yy:  1.0
-motion_calib/yt:  0.0
-motion_calib/tx:  0.0
-motion_calib/ty:  0.0
-motion_calib/tt:  1.0
-
-# initial pose (when no truepose available):
-initial_pose/x: 2.0
-initial_pose/y: 2.0
-initial_pose/z: 0.31     # over z-plane 
-initial_pose/roll: 0.0
-initial_pose/pitch: 0.0
-initial_pose/yaw: 4.71    
-
-# std dev for initial noise (truepose or manual init)
-initial_std/x: 0.03
-initial_std/y: 0.03
-initial_std/z: 0.015
-initial_std/roll: 0.04
-initial_std/pitch: 0.04
-initial_std/yaw: 0.2    # ~13 deg
diff --git a/humanoid_navigation-for-git/humanoid_localization/include/humanoid_localization/EndpointModel.h b/humanoid_navigation-for-git/humanoid_localization/include/humanoid_localization/EndpointModel.h
deleted file mode 100644
index da7b684..0000000
--- a/humanoid_navigation-for-git/humanoid_localization/include/humanoid_localization/EndpointModel.h
+++ /dev/null
@@ -1,60 +0,0 @@
-// SVN $HeadURL$
-// SVN $Id$
-
-/*
- * 6D localization for humanoid robots
- *
- * Copyright 2009-2012 Armin Hornung, University of Freiburg
- * http://www.ros.org/wiki/humanoid_localization
- *
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, version 3.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-#ifndef HUMANOID_LOCALIZATION_ENDPOINTMODEL_H_
-#define HUMANOID_LOCALIZATION_ENDPOINTMODEL_H_
-
-#include <limits>
-#include<cmath>
-
-#include <omp.h>
-
-#include <ros/ros.h>
-#include <tf/transform_datatypes.h>
-
-#include <humanoid_localization/ObservationModel.h>
-#include <octomap/octomap.h>
-#include <dynamicEDT3D/dynamicEDTOctomap.h>
-#include <visualization_msgs/Marker.h>
-
-
-namespace humanoid_localization{
-class EndpointModel : public ObservationModel {
-public:
-  EndpointModel(ros::NodeHandle* nh, boost::shared_ptr<MapModel> mapModel, EngineT * rngEngine);
-  virtual ~EndpointModel();
-  virtual void integrateMeasurement(Particles& particles, const PointCloud& pc, const std::vector<float>& ranges, float max_range, const tf::Transform& baseToSensor);
-
-  virtual void setMap(boost::shared_ptr<octomap::OcTree> map);
-
-protected:
-  bool getHeightError(const Particle& p, const tf::StampedTransform& footprintToBase, double& heightError) const;
-  void initDistanceMap();
-  double m_sigma;
-  double m_maxObstacleDistance;
-  boost::shared_ptr<DynamicEDTOctomap> m_distanceMap;
-};
-
-}
-
-#endif
diff --git a/humanoid_navigation-for-git/humanoid_localization/include/humanoid_localization/HumanoidLocalization.h b/humanoid_navigation-for-git/humanoid_localization/include/humanoid_localization/HumanoidLocalization.h
deleted file mode 100644
index 55fab63..0000000
--- a/humanoid_navigation-for-git/humanoid_localization/include/humanoid_localization/HumanoidLocalization.h
+++ /dev/null
@@ -1,302 +0,0 @@
-// SVN $HeadURL$
-// SVN $Id$
-
-/*
- * 6D localization for humanoid robots
- *
- * Copyright 2009-2012 Armin Hornung, University of Freiburg
- * http://www.ros.org/wiki/humanoid_localization
- *
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, version 3.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-#ifndef HUMANOID_LOCALIZATION_HUMANOIDLOCALIZATION_H_
-#define HUMANOID_LOCALIZATION_HUMANOIDLOCALIZATION_H_
-
-#include <ctime>
-#include <boost/shared_ptr.hpp>
-
-#include <ros/ros.h>
-#include <tf/transform_datatypes.h>
-#include <tf/transform_listener.h>
-#include <tf/transform_broadcaster.h>
-#include <tf/message_filter.h>
-#include <message_filters/subscriber.h>
-#include <std_msgs/Float32.h>
-#include <std_msgs/Bool.h>
-#include <std_srvs/Empty.h>
-#include <sensor_msgs/LaserScan.h>
-#include <sensor_msgs/PointCloud2.h>
-
-#include <pcl_ros/point_cloud.h>
-#include <pcl/point_types.h>
-#include <pcl/sample_consensus/method_types.h>
-#include <pcl/sample_consensus/model_types.h>
-#include <pcl/segmentation/sac_segmentation.h>
-#include <pcl/io/pcd_io.h>
-#include <pcl/filters/extract_indices.h>
-#include <pcl/filters/passthrough.h>
-
-
-#include <geometry_msgs/Pose.h>
-#include <geometry_msgs/PoseArray.h>
-#include <geometry_msgs/PoseWithCovariance.h>
-#include <geometry_msgs/PoseWithCovarianceStamped.h>
-
-#include <humanoid_localization/humanoid_localization_defs.h>
-#include <humanoid_localization/MotionModel.h>
-#include <humanoid_localization/ObservationModel.h>
-#include <humanoid_localization/RaycastingModel.h>
-#ifndef SKIP_ENDPOINT_MODEL
-  #include <humanoid_localization/EndpointModel.h>
-#endif
-
-
-#include <octomap/octomap.h>
-#include <sensor_msgs/Imu.h>
-#include <boost/circular_buffer.hpp>
-
-namespace humanoid_localization{
-
-static inline void getRP(const geometry_msgs::Quaternion& msg_q, double& roll, double& pitch){
-  tf::Quaternion bt_q;
-  tf::quaternionMsgToTF(msg_q, bt_q);
-  double useless_yaw;
-  tf::Matrix3x3(bt_q).getRPY(roll, pitch, useless_yaw);
-
-  if (std::abs(useless_yaw) > 0.00001)
-    ROS_WARN("Non-zero yaw in IMU quaterion is ignored");
-}
-
-class HumanoidLocalization {
-public:
-    // some typedefs
-    //typedef pcl::PointCloud<pcl::PointXYZ> PointCloud;
-
-public:
-  HumanoidLocalization(unsigned randomSeed);
-  virtual ~HumanoidLocalization();
-  virtual void laserCallback(const sensor_msgs::LaserScanConstPtr& msg);
-  virtual void pointCloudCallback(const sensor_msgs::PointCloud2::ConstPtr& msg);
-  void initPoseCallback(const geometry_msgs::PoseWithCovarianceStampedConstPtr& msg);
-  bool globalLocalizationCallback(std_srvs::Empty::Request& req, std_srvs::Empty::Response& res);
-  void pauseLocalizationCallback(const std_msgs::BoolConstPtr& msg);
-  /// pause localization by service call
-  bool pauseLocalizationSrvCallback(std_srvs::Empty::Request& req, std_srvs::Empty::Response& res);
-  /// unpause localization by service call
-  bool resumeLocalizationSrvCallback(std_srvs::Empty::Request& req, std_srvs::Empty::Response& res);
-  void imuCallback(const sensor_msgs::ImuConstPtr& msg);
-
-  /**
-   * Importance sampling from m_particles according to weights,
-   * resets weight to 1/numParticles. Uses low variance sampling
-   *
-   * @param numParticles how many particles to sample, 0 (default): keep size of particle distribution
-   */
-  void resample(unsigned numParticles = 0);
-  /// Returns index of particle with highest weight (log or normal scale)
-  unsigned getBestParticleIdx() const;
-  /// Returns the 6D pose of a particle
-  tf::Pose getParticlePose(unsigned particleIdx) const;
-  /// Returns the 6D pose of the best particle (highest weight)
-  tf::Pose getBestParticlePose() const;
-  /// Returns the 6D pose of the weighted mean particle
-  tf::Pose getMeanParticlePose() const;
-
-  /// function call for global initialization (called by globalLocalizationCallback)
-  void initGlobal();
-
-  // needed for pointcloud callback (from OctomapServer)
-  static void filterGroundPlane(const PointCloud& pc, PointCloud& ground, PointCloud& nonground, double groundFilterDistance, double groundFilterAngle, double groundFilterPlaneDistance);
-
-protected:
-  /**
-   * General reset of the filter:
-   * sets pose around initial pose (or truepose, if requested) and resets
-   * the internal state. Calls initPoseCallback().
-   */
-  void reset();
-
-  // converts particles into PoseArray and publishes them for visualization
-  void publishPoseEstimate(const ros::Time& time, bool publish_eval);
-
-
-  /**
-   * Normalizes the weights and transforms from log to normal scale
-   * m_minWeight gives the lower bound for weight (normal scale).
-   * No adjustment will be done for minWeight = 0 (default)
-   */
-  void normalizeWeights();
-
-  /// cumulative weight of all particles (=1 when normalized)
-  double getCumParticleWeight() const;
-
-  /**
-   * nEff - returns the number of effective particles = 1/sum(w_i^2)
-   *
-   * Needed for selective resampling (Doucet 98, Arulampalam 01), when nEff < n/2
-   **/
-  double nEff() const;
-
-  /**
-   * Converts particles into log scale
-   */
-  void toLogForm();
-
-  /**
-   * Returns the IMU message with stamp closest to a given stamp.
-   * @param[in] stamp Timestamp to search.
-   * @param[out] imuStamp Stamp of closest IMU message (or interpolation of two IMU messages).
-   * @param[out] angleX Interpolated roll angle.
-   * @param[out] angleY Interpolated pitch angle.
-   * @return Success.
-   */
-  bool getImuMsg(const ros::Time& stamp, ros::Time& imuStamp, double& angleX, double& angleY) const;
-
-  /**
-   * Prepares a LaserScan msg to be integrated into the observations model. Filters
-   * near range measurements out and creates a sparse point cloud (out of m_numSensorBeams points)
-   *
-   */
-  void prepareLaserPointCloud(const sensor_msgs::LaserScanConstPtr& laser, PointCloud& pc, std::vector<float>& ranges) const;
-
-  /**
-   * Prepares a PointCloud msg to be integrated into the observations model. Filters
-   * near range, floor and subsamples a sparse point cloud (out of m_numSensorBeams points)
-   *
-   */
-  void prepareGeneralPointCloud(const sensor_msgs::PointCloud2::ConstPtr& msg, PointCloud& pc, std::vector<float>& ranges) const;
-  int filterUniform( const PointCloud & cloud_in, PointCloud & cloud_out, int numSamples) const;
-
-  void voxelGridSampling(const PointCloud & pc, pcl::PointCloud<int> & sampledIndices, double searchRadius) const;
-
-  bool isAboveMotionThreshold(const tf::Pose& odomTransform);
-
-  bool localizeWithMeasurement(const PointCloud& pc_filtered, const std::vector<float>& ranges, double max_range);
-
-  void constrainMotion(const tf::Pose& odomPose);
-
-  void timerCallback(const ros::TimerEvent & e);
-
-  unsigned computeBeamStep(unsigned numBeams) const;
-
-  /**
-   * Initializes z, roll and pitch values either from parameters
-   * or fromo real (odom) values
-   */
-  void initZRP(double& z, double& roll, double& pitch);
-
-  bool lookupPoseHeight(const ros::Time& t, double& poseHeight) const;
-
-  EngineT m_rngEngine;
-  /// standard normal distribution
-  NormalGeneratorT m_rngNormal;
-  /// uniform distribution [0:1]
-  UniformGeneratorT m_rngUniform;
-  boost::shared_ptr<MotionModel> m_motionModel;
-  boost::shared_ptr<ObservationModel> m_observationModel;
-  boost::shared_ptr<MapModel> m_mapModel;
-
-  ros::NodeHandle m_nh, m_privateNh;
-  ros::Subscriber m_pauseIntegrationSub;
-
-  message_filters::Subscriber<sensor_msgs::LaserScan>* m_laserSub;
-  tf::MessageFilter<sensor_msgs::LaserScan>* m_laserFilter;
-  message_filters::Subscriber<sensor_msgs::PointCloud2>* m_pointCloudSub;
-  tf::MessageFilter<sensor_msgs::PointCloud2>* m_pointCloudFilter;
-  message_filters::Subscriber<geometry_msgs::PoseWithCovarianceStamped>* m_initPoseSub;
-  tf::MessageFilter<geometry_msgs::PoseWithCovarianceStamped>* m_initPoseFilter;
-
-  ros::Publisher m_posePub, m_poseEvalPub, m_poseOdomPub, m_poseTruePub,
-                 m_poseArrayPub, m_bestPosePub, m_nEffPub,
-                 m_filteredPointCloudPub;
-  ros::Subscriber m_imuSub;
-  ros::ServiceServer m_globalLocSrv, m_pauseLocSrv, m_resumeLocSrv;
-  tf::TransformListener m_tfListener;
-  tf::TransformBroadcaster m_tfBroadcaster;
-  ros::Timer m_timer;
-
-  std::string m_odomFrameId;
-  std::string m_targetFrameId;
-  std::string m_baseFrameId;
-  std::string m_baseFootprintId;
-  std::string m_globalFrameId;
-
-  bool m_useRaycasting;
-  bool m_initFromTruepose;
-  int m_numParticles;
-  double m_sensorSampleDist;
-
-  double m_nEffFactor;
-  double m_minParticleWeight;
-  Vector6d m_initPose;	// fixed init. pose (from params)
-  Vector6d m_initNoiseStd; // Std.dev for init. pose
-  bool m_initPoseRealZRP; // override z, roll, pitch with real values from robot
-
-  double m_filterMaxRange;
-  double m_filterMinRange;
-
-
-  Particles m_particles;
-  int m_bestParticleIdx;
-  tf::Pose m_odomPose; // incrementally added odometry pose (=dead reckoning)
-  geometry_msgs::PoseArray m_poseArray; // particles as PoseArray (preallocated)
-  boost::circular_buffer<sensor_msgs::Imu> m_lastIMUMsgBuffer;
-
-  bool m_bestParticleAsMean;
-  bool m_receivedSensorData;
-  bool m_initialized;
-  bool m_initGlobal;
-  bool m_paused;
-  bool m_syncedTruepose;
-
-  double m_observationThresholdTrans;
-  double m_observationThresholdRot;
-  double m_observationThresholdHeadYawRot;
-  double m_observationThresholdHeadPitchRot;
-  double m_temporalSamplingRange;
-  double m_transformTolerance;
-  ros::Time m_lastLaserTime;
-  ros::Time m_lastPointCloudTime;
-
-
-  // PointCloud parameters
-
-  bool m_groundFilterPointCloud;
-  double m_groundFilterDistance;
-  double m_groundFilterAngle;
-  double m_groundFilterPlaneDistance;
-  double m_sensorSampleDistGroundFactor;
-
-
-  /// sensor data last integrated at this odom pose, to check if moved enough since then
-  tf::Pose m_lastLocalizedPose;
-  tf::StampedTransform m_latest_transform;
-
-  /// absolute, summed yaw angle since last measurement integraton
-  double m_headYawRotationLastScan;
-  /// absolute, summed pitch angle since last measurement integraton
-  double m_headPitchRotationLastScan;
-
-  bool m_useIMU;  ///< True = use IMU for initialization and observation models, false = use orientation from odometry
-  bool m_constrainMotionZ; /// < True = do not estimate height, directly use odometry pose
-  bool m_constrainMotionRP; /// < True = do not estimate roll and pitch, directly use odometry pose
-
-  // timer stuff
-  bool m_useTimer;
-  double m_timerPeriod;
-};
-}
-
-#endif
diff --git a/humanoid_navigation-for-git/humanoid_localization/include/humanoid_localization/MapModel.h b/humanoid_navigation-for-git/humanoid_localization/include/humanoid_localization/MapModel.h
deleted file mode 100644
index 970325c..0000000
--- a/humanoid_navigation-for-git/humanoid_localization/include/humanoid_localization/MapModel.h
+++ /dev/null
@@ -1,107 +0,0 @@
-// SVN $HeadURL$
-// SVN $Id$
-
-/*
- * 6D localization for humanoid robots
- *
- * Copyright 2009-2012 Armin Hornung, University of Freiburg
- * http://www.ros.org/wiki/humanoid_localization
- *
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, version 3.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-#ifndef HUMANOID_LOCALIZATION_MAPMODEL_H_
-#define HUMANOID_LOCALIZATION_MAPMODEL_H_
-
-#include <omp.h>
-#include <ros/ros.h>
-#include <octomap_msgs/conversions.h>
-#include <octomap_msgs/GetOctomap.h>
-#include <octomap_ros/conversions.h>
-
-#include <humanoid_localization/humanoid_localization_defs.h>
-
-namespace humanoid_localization{
-
-class MapModel{
-public:
-  MapModel(ros::NodeHandle* nh);
-  virtual ~MapModel();
-
-  //void setMap(boost::shared_ptr<octomap::OcTree> map);
-  boost::shared_ptr<octomap::OcTree> getMap() const;
-
-  /**
-   * Check if particles represent valid poses:
-   * Must be within map bounding box and not in an occupied area.
-   * Otherwise weight is minimized (=> die out at next resampling)
-   */
-  virtual void verifyPoses(Particles& particles);
-
-  virtual void initGlobal(Particles& particles,
-                          double z, double roll, double pitch,
-                          const Vector6d& initNoise,
-                          UniformGeneratorT& rngUniform, NormalGeneratorT& rngNormal);
-
-  /// @return whether a map coordinate is occupied. Will return
-  /// "false" if the coordinate does not exist in the map (e.g. out of bounds).
-  virtual bool isOccupied(const octomap::point3d& position) const;
-  virtual bool isOccupied(octomap::OcTreeNode* node) const = 0;
-  virtual double getFloorHeight(const tf::Transform& pose) const = 0;
-
-  /**
-   * Get a list of valid z values at a given xy-position
-   *
-   * @param x
-   * @param y
-   * @param totalHeight clearance of the robot required to be free
-   * @param[out] heights list of valid heights, return by ref.
-   */
-  void getHeightlist(double x, double y, double totalHeight, std::vector<double>& heights);
-
-
-protected:
-  boost::shared_ptr<octomap::OcTree> m_map;
-
-  double m_motionMeanZ;
-  double m_motionRangeZ;
-  double m_motionRangeRoll;
-  double m_motionRangePitch;
-  double m_motionObstacleDist;
-
-};
-
-
-class DistanceMap : public MapModel{
-public:
-  DistanceMap(ros::NodeHandle* nh);
-  virtual ~DistanceMap();
-
-  virtual bool isOccupied(octomap::OcTreeNode* node) const;
-  virtual double getFloorHeight(const tf::Transform& pose) const;
-
-};
-
-
-class OccupancyMap : public MapModel{
-public:
-  OccupancyMap(ros::NodeHandle* nh);
-  virtual ~OccupancyMap();
-
-  virtual bool isOccupied(octomap::OcTreeNode* node) const;
-  virtual double getFloorHeight(const tf::Transform& pose) const;
-};
-
-}
-#endif
diff --git a/humanoid_navigation-for-git/humanoid_localization/include/humanoid_localization/MotionModel.h b/humanoid_navigation-for-git/humanoid_localization/include/humanoid_localization/MotionModel.h
deleted file mode 100644
index 865e490..0000000
--- a/humanoid_navigation-for-git/humanoid_localization/include/humanoid_localization/MotionModel.h
+++ /dev/null
@@ -1,116 +0,0 @@
-// SVN $HeadURL$
-// SVN $Id$
-
-/*
- * 6D localization for humanoid robots
- *
- * Copyright 2009-2012 Armin Hornung, University of Freiburg
- * http://www.ros.org/wiki/humanoid_localization
- *
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, version 3.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-#ifndef HUMANOID_LOCALIZATION_MOTIONMODEL_H_
-#define HUMANOID_LOCALIZATION_MOTIONMODEL_H_
-
-#include <ros/ros.h>
-#include <tf/transform_listener.h>
-#include <tf/transform_datatypes.h>
-#include <Eigen/Cholesky>
-
-#include <humanoid_localization/humanoid_localization_defs.h>
-
-namespace humanoid_localization{
-class MotionModel {
-public:
-  MotionModel(ros::NodeHandle* nh, EngineT* rngEngine, tf::TransformListener* tf, const std::string& odomFrameId, const std::string& baseFrameId);
-  virtual ~MotionModel();
-  void reset();
-  /// look up the odom pose at a certain time through tf
-  bool lookupOdomPose(const ros::Time& t, tf::Stamped<tf::Pose>& odomPose) const;
-
-    /// looks up the odometry pose at time t and then calls computeOdomTransform()
-  bool lookupOdomTransform(const ros::Time& t, tf::Transform& odomTransform) const;
-
-  /// computes the odometry transform from m_lastOdomPose to currentPose as relative
-  /// 6D rigid body transform (=identity if m_lastOdomPose not available)
-  tf::Transform computeOdomTransform(const tf::Transform currentPose) const;
-
-  /// lookup the local target frame in the base frame (local transform)
-  bool lookupLocalTransform(const std::string& targetFrame, const ros::Time& t, tf::StampedTransform& localTransform) const;
-
-  /// lookup the height of the torso, based on tf between the base and footprint frames
-  bool lookupPoseHeight(const ros::Time& t, double& poseHeight) const;
-
-  /// apply odomTransform to all particles (with random noise and calibration)
-  void applyOdomTransform(Particles& particles, const tf::Transform& odomTransform);
-
-  /// apply odomTransform to all particles (noisy), with temporal sampling over the range of dt.
-  /// Times are sampled in an interval +-dt/2 around t, iff dt > 0.0.
-  bool applyOdomTransformTemporal(Particles& particles, const ros::Time& t, double dt);
-
-  /// store odomPose as m_lastOdomPose to compute future odom transforms
-  void storeOdomPose(const tf::Stamped<tf::Pose>& odomPose);
-
-  /// get the last stored odomPose
-  /// returns false when there is no valid previous pose stored
-  bool getLastOdomPose(tf::Stamped<tf::Pose>& lastOdomPose) const;
-
-
-  // aligns fixed-size members in memory
-  EIGEN_MAKE_ALIGNED_OPERATOR_NEW
-
-protected:
-  /// apply odomTransform to one particle pose (with random noise and calibration)
-  void applyOdomTransform(tf::Pose& particlePose, const tf::Transform& odomTransform);
-
-  /// Transform a particle's pose with the relative odomTransform with added random noise
-  void transformPose(tf::Pose& particlePose, const tf::Transform& odomTransform);
-
-  /// Generates motion noise corresponding to odomTransform
-  /// May not be called in parallel, accesses the random generator m_rngNormal
-  tf::Transform odomTransformNoise(const tf::Transform& odomTransform);
-
-  /// @return calibrated odometry transform w.r.t. 2D drift (pos. + orientation)
-  tf::Transform calibrateOdometry(const tf::Transform& odomTransform) const;
-
-  tf::TransformListener* m_tfListener;
-
-  NormalGeneratorT m_rngNormal; // standard normal-distributed noise
-  UniformGeneratorT m_rngUniform;
-  // parameters:
-  /// variance parameters for calibrated odometry noise
-  Eigen::Matrix3d m_odomNoise2D;
-  /// systematic calibration parameters for odometry drift
-  Eigen::Matrix3d m_odomCalibration2D;
-  /// std.dev param of noise in Z (depending on distance traveled)
-  double m_odomNoiseZ;
-  /// std.dev param of noise in roll (depending on distance traveled)
-  double m_odomNoiseRoll;
-  /// std.dev param of noise in pitch (depending on distance traveled)
-  double m_odomNoisePitch;
-
-
-  std::string m_odomFrameId;
-  std::string m_baseFrameId;
-  std::string m_footprintFrameId;
-
-  bool m_firstOdometryReceived;
-  tf::Stamped<tf::Pose> m_lastOdomPose;
-
-
-};
-}
-
-#endif
diff --git a/humanoid_navigation-for-git/humanoid_localization/include/humanoid_localization/ObservationModel.h b/humanoid_navigation-for-git/humanoid_localization/include/humanoid_localization/ObservationModel.h
deleted file mode 100644
index 473a11f..0000000
--- a/humanoid_navigation-for-git/humanoid_localization/include/humanoid_localization/ObservationModel.h
+++ /dev/null
@@ -1,104 +0,0 @@
-// SVN $HeadURL$
-// SVN $Id$
-
-/*
- * 6D localization for humanoid robots
- *
- * Copyright 2009-2012 Armin Hornung, University of Freiburg
- * http://www.ros.org/wiki/humanoid_localization
- *
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, version 3.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-#ifndef HUMANOID_LOCALIZATION_OBSERVATIONMODEL_H_
-#define HUMANOID_LOCALIZATION_OBSERVATIONMODEL_H_
-
-#include <limits>
-#include<cmath>
-
-#include <omp.h>
-
-#include <ros/ros.h>
-#include <tf/transform_datatypes.h>
-#include <pcl_ros/transforms.h>
-
-#include <humanoid_localization/humanoid_localization_defs.h>
-#include <humanoid_localization/MapModel.h>
-#include <octomap/octomap.h>
-
-#include <sensor_msgs/PointCloud2.h>
-
-
-namespace humanoid_localization{
-
-/// sqrt(2*pi)
-const static double SQRT_2_PI = 2.506628274;
-
-/// log(sqrt(2*pi))
-const static double LOG_SQRT_2_PI = 0.91893853320467274178;
-
-class ObservationModel {
-public:
-  ObservationModel(ros::NodeHandle* nh, boost::shared_ptr<MapModel> mapModel, EngineT * rngEngine);
-  virtual ~ObservationModel();
-
-  /// Helper function to compute the log likelihood
-  static inline double logLikelihood(double x, double sigma){
-    assert(!isnan(x));
-    return -1.0*( LOG_SQRT_2_PI) - log(sigma) - ((x * x) / (2* sigma * sigma));
-  }
-
-  /// Helper function to compute the log likelihood based on sqared distances
-  static inline double logLikelihoodSq(double x_sq, double sigma){
-    assert(!isnan(x_sq));
-    return -1.0*( LOG_SQRT_2_PI) - log(sigma) - ((x_sq) / (2* sigma * sigma));
-  }
-
-
-  //static double logLikelihoodSimple(double x, double sigma){
-  //	return  -((x * x) / (2* sigma * sigma));
-  //}
-
-  /**
-   * Integrate a measurement in particle set, update weights accordingly
-   * Particle weights should be in log scale before, weights are added.
-   */
-  virtual void integrateMeasurement(Particles& particles, const PointCloud& pc, const std::vector<float>& ranges, float max_range, const tf::Transform& baseToSensor) = 0;
-
-  virtual void integratePoseMeasurement(Particles& particles, double roll, double pitch, const tf::StampedTransform& footprintToTorso);
-
-  virtual void setMap(boost::shared_ptr<octomap::OcTree> map);
-protected:
-  virtual bool getHeightError(const Particle& p, const tf::StampedTransform& footprintToBase, double& heightError) const = 0;
-  boost::shared_ptr<MapModel> m_mapModel;
-  EngineT m_rngEngine;
-  NormalGeneratorT m_rngNormal;
-  UniformGeneratorT m_rngUniform;
-  boost::shared_ptr<octomap::OcTree> m_map;
-  ros::Publisher m_pc_pub;
-
-  double m_weightRoll;
-  double m_weightPitch;
-  double m_weightZ;
-
-  double m_sigmaZ;
-  double m_sigmaRoll;
-  double m_sigmaPitch;
-  
-  bool m_use_squared_error;
-
-};
-}
-
-#endif /* OBSERVATIONMODEL_H_ */
diff --git a/humanoid_navigation-for-git/humanoid_localization/include/humanoid_localization/RaycastingModel.h b/humanoid_navigation-for-git/humanoid_localization/include/humanoid_localization/RaycastingModel.h
deleted file mode 100644
index f953f74..0000000
--- a/humanoid_navigation-for-git/humanoid_localization/include/humanoid_localization/RaycastingModel.h
+++ /dev/null
@@ -1,67 +0,0 @@
-// SVN $HeadURL$
-// SVN $Id$
-
-/*
- * 6D localization for humanoid robots
- *
- * Copyright 2009-2012 Armin Hornung, University of Freiburg
- * http://www.ros.org/wiki/humanoid_localization
- *
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, version 3.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-#ifndef HUMANOID_LOCALIZATION_RAYCASTINGMODEL_H_
-#define HUMANOID_LOCALIZATION_RAYCASTINGMODEL_H_
-
-#include <limits>
-#include<cmath>
-
-#include <omp.h>
-
-#include <ros/ros.h>
-#include <tf/transform_datatypes.h>
-
-#include <humanoid_localization/ObservationModel.h>
-
-#include <octomap/octomap.h>
-
-
-namespace humanoid_localization{
-class RaycastingModel : public ObservationModel {
-public:
-  RaycastingModel(ros::NodeHandle* nh, boost::shared_ptr<MapModel> mapModel, EngineT * rngEngine);
-  virtual ~RaycastingModel();
-  virtual void integrateMeasurement(Particles& particles, const PointCloud& pc, const std::vector<float>& ranges, float max_range, const tf::Transform& baseToSensor);
-
-protected:
-  bool getHeightError(const Particle& p, const tf::StampedTransform& footprintToBase, double& heightError) const;
-  // laser parameters:
-  double m_zHit;
-  double m_zRand;
-  double m_zShort;
-  double m_zMax;
-  double m_sigmaHit;
-  double m_lambdaShort;
-
-  bool m_filterPointCloudGround;
-  double m_groundFilterDistance;
-  double m_groundFilterAngle;
-  double m_groundFilterPlaneDistance;
-  int m_numFloorPoints;
-  int m_numNonFloorPoints;
-};
-
-}
-
-#endif
diff --git a/humanoid_navigation-for-git/humanoid_localization/include/humanoid_localization/humanoid_localization_defs.h b/humanoid_navigation-for-git/humanoid_localization/include/humanoid_localization/humanoid_localization_defs.h
deleted file mode 100644
index 75ba3f8..0000000
--- a/humanoid_navigation-for-git/humanoid_localization/include/humanoid_localization/humanoid_localization_defs.h
+++ /dev/null
@@ -1,72 +0,0 @@
-// SVN $HeadURL$
-// SVN $Id$
-
-/*
- * 6D localization for humanoid robots
- *
- * Copyright 2009-2012 Armin Hornung, University of Freiburg
- * http://www.ros.org/wiki/humanoid_localization
- *
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, version 3.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-#ifndef HUMANOID_LOCALIZATION_HUMANOID_LOCALIZATION_DEFS_H_
-#define HUMANOID_LOCALIZATION_HUMANOID_LOCALIZATION_DEFS_H_
-
-#include <vector>
-#include <boost/random/variate_generator.hpp>
-#include <boost/random/mersenne_twister.hpp>
-#include <boost/random/normal_distribution.hpp>
-#include <boost/random/uniform_real.hpp>
-
-#include <tf/transform_datatypes.h>
-
-#include <Eigen/Core>
-
-#include <pcl_ros/point_cloud.h>
-#include <pcl/point_types.h>
-
-namespace humanoid_localization{
-
-/// Particle consists of a pose and a weight
-struct Particle{
-  double weight;
-  tf::Pose pose;
-};
-
-typedef std::vector<Particle> Particles;
-
-typedef pcl::PointCloud<pcl::PointXYZ> PointCloud;
-
-
-/// Boost RNG engine:
-typedef boost::mt19937                 	EngineT;
-/// Boost RNG distribution:
-typedef boost::normal_distribution<>   	NormalDistributionT;
-// Ugh! boost uniform_01 noise sucks: http://www.bnikolic.co.uk/blog/cpp-boost-uniform01.html
-// => using uniform_real instead
-typedef boost::uniform_real<>     		UniformDistributionT;
-/// standard normal-distributed noise
-typedef boost::variate_generator<EngineT&, NormalDistributionT>   NormalGeneratorT;
-/// uniform noise in range [0,1)
-typedef boost::variate_generator<EngineT&, UniformDistributionT>   UniformGeneratorT;
-
-
-typedef Eigen::Matrix<float, 6, 6> Matrix6f;
-typedef Eigen::Matrix<float, 6, 1> Vector6f;
-typedef Eigen::Matrix<double, 6, 6> Matrix6d;
-typedef Eigen::Matrix<double, 6, 1> Vector6d;
-
-}
-#endif
diff --git a/humanoid_navigation-for-git/humanoid_localization/launch/nao_localization_laser.launch b/humanoid_navigation-for-git/humanoid_localization/launch/nao_localization_laser.launch
deleted file mode 100644
index 818f8e2..0000000
--- a/humanoid_navigation-for-git/humanoid_localization/launch/nao_localization_laser.launch
+++ /dev/null
@@ -1,5 +0,0 @@
-<launch>
-	<node pkg="humanoid_localization" type="localization_node" name="humanoid_localization" output="screen" >
-		<rosparam file="$(find humanoid_localization)/config/nao_localization_laser.yaml" command="load" />
-	</node>
-</launch>
diff --git a/humanoid_navigation-for-git/humanoid_localization/launch/nao_localization_test_motion.launch b/humanoid_navigation-for-git/humanoid_localization/launch/nao_localization_test_motion.launch
deleted file mode 100644
index d3e651d..0000000
--- a/humanoid_navigation-for-git/humanoid_localization/launch/nao_localization_test_motion.launch
+++ /dev/null
@@ -1,8 +0,0 @@
-<!-- Test MotionModel / Odometry by using only one particle w. no noise -->
-
-<launch>
-	<node pkg="octomap_server" type="octomap_server" name="octomap_server" args="$(find nao_localization)/map.bt" />
-	<node pkg="nao_localization" type="nao_localization" name="nao_localization" >
-		<rosparam file="$(find nao_localization)/localization_conf_motion_test.yaml" command="load" />
-	</node>
-</launch>
\ No newline at end of file
diff --git a/humanoid_navigation-for-git/humanoid_localization/mainpage.dox b/humanoid_navigation-for-git/humanoid_localization/mainpage.dox
deleted file mode 100644
index 612cc80..0000000
--- a/humanoid_navigation-for-git/humanoid_localization/mainpage.dox
+++ /dev/null
@@ -1,30 +0,0 @@
-/**
-\mainpage
-\htmlinclude manifest.html
-
-\b nao_localization is ... 
-
-<!-- 
-In addition to providing an overview of your package,
-this is the section where the specification and design/architecture 
-should be detailed. While the original specification may be done on the
-wiki, it should be transferred here once your package starts to take shape.
-You can then link to this documentation page from the Wiki. 
--->
-
-
-\section codeapi Code API
-
-<!--
-Provide links to specific auto-generated API documentation within your
-package that is of particular interest to a reader. Doxygen will
-document pretty much every part of your code, so do your best here to
-point the reader to the actual API.
-
-If your codebase is fairly large or has different sets of APIs, you
-should use the doxygen 'group' tag to keep these APIs together. For
-example, the roscpp documentation has 'libros' group.
--->
-
-
-*/
\ No newline at end of file
diff --git a/humanoid_navigation-for-git/humanoid_localization/package.xml b/humanoid_navigation-for-git/humanoid_localization/package.xml
deleted file mode 100644
index ff98825..0000000
--- a/humanoid_navigation-for-git/humanoid_localization/package.xml
+++ /dev/null
@@ -1,56 +0,0 @@
-<package>
-  <name>humanoid_localization</name>
-  <version>0.4.1</version>
-  <description>
-
-     <p>6D localization for humanoid robots based on depth data (laser, point clouds).
-     Two observation models are currently available based on OctoMap as 3D map:
-     Ray casting and an end point model (lookup in the distance map).</p>
-     <p>Details can be found in the publication <br/>
-     <em>"Humanoid Navigation with Dynamic Footstep Plans"</em>
-     by A. Hornung, K.M. Wurm, and M. Bennewitz; published in 
-     IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS), 2010</p>
-  </description>
-  <maintainer email="HornungA@informatik.uni-freiburg.de">Armin Hornung</maintainer>
-  <maintainer email="aravindadp@gmail.com">Pramuditha Aravinda</maintainer>
-  <author>Armin Hornung</author>
-  <author>Stefan Osswald</author>
-  <author>Daniel Maier</author>
-  <license>GPL</license>
-  <url>http://ros.org/wiki/humanoid_localization</url>
-  
-  <build_depend>roscpp</build_depend>
-  <build_depend>tf</build_depend>
-  <build_depend>message_filters</build_depend>
-  <build_depend>sensor_msgs</build_depend>
-  <build_depend>geometry_msgs</build_depend>
-  <build_depend>nav_msgs</build_depend>
-  <build_depend>std_msgs</build_depend>
-  <build_depend>std_srvs</build_depend>
-  <build_depend>octomap_msgs</build_depend>
-  <build_depend>octomap_ros</build_depend>
-  <build_depend>octomap</build_depend>
-  <build_depend>visualization_msgs</build_depend>
-  <build_depend>pcl_ros</build_depend>
-  <build_depend>pcl_conversions</build_depend>
-  <build_depend>sensor_msgs</build_depend>
-  <build_depend>cmake_modules</build_depend>
-
-  <run_depend>roscpp</run_depend>
-  <run_depend>tf</run_depend>
-  <run_depend>message_filters</run_depend>
-  <run_depend>sensor_msgs</run_depend>
-  <run_depend>geometry_msgs</run_depend>
-  <run_depend>nav_msgs</run_depend>
-  <run_depend>std_msgs</run_depend>
-  <run_depend>std_srvs</run_depend>
-  <run_depend>octomap_msgs</run_depend>
-  <run_depend>octomap_ros</run_depend>
-  <run_depend>octomap</run_depend>
-  <run_depend>visualization_msgs</run_depend>
-  <run_depend>pcl_ros</run_depend>
-  <run_depend>pcl_conversions</run_depend>
-  <run_depend>sensor_msgs</run_depend>
-
-  <buildtool_depend>catkin</buildtool_depend>
-</package>
diff --git a/humanoid_navigation-for-git/humanoid_localization/src/EndpointModel.cpp b/humanoid_navigation-for-git/humanoid_localization/src/EndpointModel.cpp
deleted file mode 100644
index 1b69a14..0000000
--- a/humanoid_navigation-for-git/humanoid_localization/src/EndpointModel.cpp
+++ /dev/null
@@ -1,119 +0,0 @@
-// SVN $HeadURL$
-// SVN $Id$
-
-/*
- * 6D localization for humanoid robots
- *
- * Copyright 2009-2012 Armin Hornung, University of Freiburg
- * http://www.ros.org/wiki/humanoid_localization
- *
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, version 3.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-#include <humanoid_localization/EndpointModel.h>
-
-namespace humanoid_localization{
-
-EndpointModel::EndpointModel(ros::NodeHandle* nh, boost::shared_ptr<MapModel> mapModel, EngineT * rngEngine)
-: ObservationModel(nh, mapModel, rngEngine), m_sigma(0.2), m_maxObstacleDistance(0.5)
-{
-  ROS_INFO("Using Endpoint observation model (precomputing...)");
-
-  nh->param("endpoint/sigma", m_sigma, m_sigma);
-  nh->param("endpoint/max_obstacle_distance", m_maxObstacleDistance, m_maxObstacleDistance);
-
-  if (m_sigma <= 0.0){
-    ROS_ERROR("Sigma (std.dev) needs to be > 0 in EndpointModel");
-  }
-
-  initDistanceMap();
-
-
-}
-
-EndpointModel::~EndpointModel(){
-
-}
-
-void EndpointModel::integrateMeasurement(Particles& particles, const PointCloud& pc, const std::vector<float>& ranges, float max_range, const tf::Transform& baseToSensor){
-
-    // iterate over samples, multithreaded:
-#pragma omp parallel for
-  for (unsigned i=0; i < particles.size(); ++i){
-    Eigen::Matrix4f globalLaserOrigin;
-    pcl_ros::transformAsMatrix(particles[i].pose * baseToSensor, globalLaserOrigin);
-    PointCloud pc_transformed;
-    pcl::transformPointCloud(pc, pc_transformed, globalLaserOrigin);
-
-    std::vector<float>::const_iterator ranges_it = ranges.begin();
-    // iterate over beams:
-    for (PointCloud::const_iterator it = pc_transformed.begin(); it != pc_transformed.end(); ++it, ++ranges_it){
-      // search only for endpoint in tree
-      octomap::point3d endPoint(it->x, it->y, it->z);
-      float dist = m_distanceMap->getDistance(endPoint);
-      float sigma_scaled = m_sigma;
-      if (m_use_squared_error)
-         sigma_scaled = (*ranges_it) * (*ranges_it) * (m_sigma);
-      if (dist > 0.0){ // endpoint is inside map:
-        particles[i].weight += logLikelihood(dist, sigma_scaled);
-      } else { //assign weight of max.distance:
-        particles[i].weight += logLikelihood(m_maxObstacleDistance, sigma_scaled);
-      }
-    }
-    // TODO: handle max range measurements
-    //std::cout << "\n";
-  }
-
-}
-
-bool EndpointModel::getHeightError(const Particle& p, const tf::StampedTransform& footprintToBase, double& heightError) const{
-  tf::Vector3 xyz = p.pose.getOrigin();
-  double poseHeight = footprintToBase.getOrigin().getZ();
-  std::vector<double> heights;
-  m_mapModel->getHeightlist(xyz.getX(), xyz.getY(), 0.6, heights);
-  if (heights.size() == 0)
-    return false;
-
-
-  // TODO: verify this!
-  // find nearest z-level:
-  heightError = std::numeric_limits<double>::max();
-  for (unsigned i = 0; i< heights.size(); i++){
-    double dist = std::abs((heights[i] + poseHeight) - xyz.getZ());
-    if (dist < heightError)
-      heightError = dist;
-
-  }
-
-  return true;
-}
-
-void EndpointModel::setMap(boost::shared_ptr<octomap::OcTree> map){
-  m_map = map;
-  initDistanceMap();
-}
-
-void EndpointModel::initDistanceMap(){
-  double x,y,z;
-  m_map->getMetricMin(x,y,z);
-  octomap::point3d min(x,y,z);
-  m_map->getMetricMax(x,y,z);
-  octomap::point3d max(x,y,z);
-  m_distanceMap = boost::shared_ptr<DynamicEDTOctomap>(new DynamicEDTOctomap(float(m_maxObstacleDistance), &(*m_map), min, max, false));
-  m_distanceMap->update();
-  ROS_INFO("Distance map for endpoint model completed");
-}
-
-}
-
diff --git a/humanoid_navigation-for-git/humanoid_localization/src/HumanoidLocalization.cpp b/humanoid_navigation-for-git/humanoid_localization/src/HumanoidLocalization.cpp
deleted file mode 100644
index 7643cdf..0000000
--- a/humanoid_navigation-for-git/humanoid_localization/src/HumanoidLocalization.cpp
+++ /dev/null
@@ -1,1434 +0,0 @@
-/*
- * 6D localization for humanoid robots
- *
- * Copyright 2009-2012 Armin Hornung, University of Freiburg
- * http://www.ros.org/wiki/humanoid_localization
- *
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, version 3.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-#include <humanoid_localization/HumanoidLocalization.h>
-#include <iostream>
-#include <pcl/keypoints/uniform_sampling.h>
-
-#include <pcl_ros/transforms.h>
-
-#if PCL_VERSION_COMPARE(>=,1,7,0)
-  #include<pcl_conversions/pcl_conversions.h>
-#endif
-
-// simple timing benchmark output
-#define _BENCH_TIME 0
-
-namespace humanoid_localization{
-HumanoidLocalization::HumanoidLocalization(unsigned randomSeed)
-:
-m_rngEngine(randomSeed),
-m_rngNormal(m_rngEngine, NormalDistributionT(0.0, 1.0)),
-m_rngUniform(m_rngEngine, UniformDistributionT(0.0, 1.0)),
-m_nh(),m_privateNh("~"),
-m_odomFrameId("odom"), m_targetFrameId("odom"), m_baseFrameId("torso"), m_baseFootprintId("base_footprint"), m_globalFrameId("map"),
-m_useRaycasting(true), m_initFromTruepose(false), m_numParticles(500),
-m_sensorSampleDist(0.2),
-m_nEffFactor(1.0), m_minParticleWeight(0.0),
-m_bestParticleIdx(-1), m_lastIMUMsgBuffer(5),
-m_bestParticleAsMean(true),
-m_receivedSensorData(false), m_initialized(false), m_initGlobal(false), m_paused(false),
-m_syncedTruepose(false),
-m_observationThresholdTrans(0.1), m_observationThresholdRot(M_PI/6),
-m_observationThresholdHeadYawRot(0.5), m_observationThresholdHeadPitchRot(0.3),
-m_temporalSamplingRange(0.1), m_transformTolerance(0.1),
-m_groundFilterPointCloud(true), m_groundFilterDistance(0.04),
-m_groundFilterAngle(0.15), m_groundFilterPlaneDistance(0.07),
-m_sensorSampleDistGroundFactor(3),
-m_headYawRotationLastScan(0.0), m_headPitchRotationLastScan(0.0),
-m_useIMU(false),
-m_constrainMotionZ (false), m_constrainMotionRP(false), m_useTimer(false), m_timerPeriod(0.1)
-{
-
-   m_latest_transform.setData (tf::Transform(tf::createIdentityQuaternion()) );
-  // raycasting or endpoint model?
-  m_privateNh.param("use_raycasting", m_useRaycasting, m_useRaycasting);
-
-  m_privateNh.param("odom_frame_id", m_odomFrameId, m_odomFrameId);
-  m_privateNh.param("target_frame_id", m_targetFrameId, m_targetFrameId);
-  m_privateNh.param("base_frame_id", m_baseFrameId, m_baseFrameId);
-  m_privateNh.param("base_footprint_id", m_baseFootprintId, m_baseFootprintId);
-  m_privateNh.param("global_frame_id", m_globalFrameId, m_globalFrameId);
-  m_privateNh.param("init_from_truepose", m_initFromTruepose, m_initFromTruepose);
-  m_privateNh.param("init_global", m_initGlobal, m_initGlobal);
-  m_privateNh.param("best_particle_as_mean", m_bestParticleAsMean, m_bestParticleAsMean);
-  m_privateNh.param("num_particles", m_numParticles, m_numParticles);
-  m_privateNh.param("neff_factor", m_nEffFactor, m_nEffFactor);
-  m_privateNh.param("min_particle_weight", m_minParticleWeight, m_minParticleWeight);
-
-  m_privateNh.param("initial_pose/x", m_initPose(0), 0.0);
-  m_privateNh.param("initial_pose/y", m_initPose(1), 0.0);
-  m_privateNh.param("initial_pose/z", m_initPose(2), 0.32); // hip height when standing
-  m_privateNh.param("initial_pose/roll", m_initPose(3), 0.0);
-  m_privateNh.param("initial_pose/pitch", m_initPose(4), 0.0);
-  m_privateNh.param("initial_pose/yaw", m_initPose(5), 0.0);
-  m_privateNh.param("initial_pose_real_zrp", m_initPoseRealZRP, false);
-
-  m_privateNh.param("initial_std/x", m_initNoiseStd(0), 0.1); // 0.1
-  m_privateNh.param("initial_std/y", m_initNoiseStd(1), 0.1); // 0.1
-  m_privateNh.param("initial_std/z", m_initNoiseStd(2), 0.02); // 0.02
-  m_privateNh.param("initial_std/roll", m_initNoiseStd(3), 0.04); // 0.04
-  m_privateNh.param("initial_std/pitch", m_initNoiseStd(4), 0.04); // 0.04
-  m_privateNh.param("initial_std_yaw", m_initNoiseStd(5), M_PI/12); // M_PI/12
-
-  if (m_privateNh.hasParam("num_sensor_beams"))
-    ROS_WARN("Parameter \"num_sensor_beams\" is no longer used, use \"sensor_sampling_dist\" instead");
-
-  // laser observation model parameters:
-  m_privateNh.param("sensor_sampling_dist", m_sensorSampleDist, m_sensorSampleDist);
-  m_privateNh.param("max_range", m_filterMaxRange, 30.0);
-  m_privateNh.param("min_range", m_filterMinRange, 0.05);
-  ROS_DEBUG("Using a range filter of %f to %f", m_filterMinRange, m_filterMaxRange);
-
-  m_privateNh.param("update_min_trans", m_observationThresholdTrans, m_observationThresholdTrans);
-  m_privateNh.param("update_min_rot", m_observationThresholdRot, m_observationThresholdRot);
-  m_privateNh.param("update_min_head_yaw", m_observationThresholdHeadYawRot, m_observationThresholdHeadYawRot);
-  m_privateNh.param("update_min_head_pitch", m_observationThresholdHeadPitchRot, m_observationThresholdHeadPitchRot);
-  m_privateNh.param("temporal_sampling_range", m_temporalSamplingRange, m_temporalSamplingRange);
-  m_privateNh.param("transform_tolerance", m_transformTolerance, m_transformTolerance);
-
-  m_privateNh.param("use_imu", m_useIMU, m_useIMU);
-  m_privateNh.param("constrain_motion_z", m_constrainMotionZ, m_constrainMotionZ);
-  m_privateNh.param("constrain_motion_rp", m_constrainMotionRP, m_constrainMotionRP);
-
-  // point cloud observation model parameters
-  m_privateNh.param("ground_filter_point_cloud", m_groundFilterPointCloud, m_groundFilterPointCloud);
-  m_privateNh.param("ground_filter_distance", m_groundFilterDistance, m_groundFilterDistance);
-  m_privateNh.param("ground_filter_angle", m_groundFilterAngle, m_groundFilterAngle);
-  m_privateNh.param("ground_filter_plane_distance", m_groundFilterPlaneDistance, m_groundFilterPlaneDistance);
-  m_privateNh.param("sensor_sampling_dist_ground_factor", m_sensorSampleDistGroundFactor, m_sensorSampleDistGroundFactor);
-
-  m_privateNh.param("use_timer", m_useTimer, m_useTimer);
-  m_privateNh.param("timer_period", m_timerPeriod, m_timerPeriod);
-
-  // motion model parameters
-
-  m_motionModel = boost::shared_ptr<MotionModel>(new MotionModel(&m_privateNh, &m_rngEngine, &m_tfListener, m_odomFrameId, m_baseFrameId));
-
-  if (m_useRaycasting){
-    m_mapModel = boost::shared_ptr<MapModel>(new OccupancyMap(&m_privateNh));
-    m_observationModel = boost::shared_ptr<ObservationModel>(new RaycastingModel(&m_privateNh, m_mapModel, &m_rngEngine));
-  } else{
-#ifndef SKIP_ENDPOINT_MODEL
-    //m_mapModel = boost::shared_ptr<MapModel>(new DistanceMap(&m_privateNh));
-    m_mapModel = boost::shared_ptr<MapModel>(new OccupancyMap(&m_privateNh));
-    m_observationModel = boost::shared_ptr<ObservationModel>(new EndpointModel(&m_privateNh, m_mapModel, &m_rngEngine));
-#else
-    ROS_FATAL("EndpointModel not compiled due to missing dynamicEDT3D");
-    exit(-1);
-#endif
-  }
-
-
-  m_particles.resize(m_numParticles);
-  m_poseArray.poses.resize(m_numParticles);
-  m_poseArray.header.frame_id = m_globalFrameId;
-  m_tfListener.clear();
-
-
-  // publishers can be advertised first, before needed:
-  m_posePub = m_nh.advertise<geometry_msgs::PoseWithCovarianceStamped>("pose", 10);
-  m_poseEvalPub = m_nh.advertise<geometry_msgs::PoseWithCovarianceStamped>("pose_eval", 10);
-  m_poseOdomPub = m_privateNh.advertise<geometry_msgs::PoseStamped>("pose_odom_sync", 10);
-  m_poseArrayPub = m_privateNh.advertise<geometry_msgs::PoseArray>("particlecloud", 10);
-  m_bestPosePub = m_privateNh.advertise<geometry_msgs::PoseArray>("best_particle", 10);
-  m_nEffPub = m_privateNh.advertise<std_msgs::Float32>("n_eff", 10);
-  m_filteredPointCloudPub = m_privateNh.advertise<sensor_msgs::PointCloud2>("filtered_cloud", 1);
-
-
-  //TODO Propagate particles independent of sensor callback
-  reset();
-
-  // ROS subscriptions last:
-  m_globalLocSrv = m_nh.advertiseService("global_localization", &HumanoidLocalization::globalLocalizationCallback, this);
-
-  // subscription on laser, tf message filter
-  m_laserSub = new message_filters::Subscriber<sensor_msgs::LaserScan>(m_nh, "scan", 100);
-  m_laserFilter = new tf::MessageFilter<sensor_msgs::LaserScan>(*m_laserSub, m_tfListener, m_odomFrameId, 100);
-  m_laserFilter->registerCallback(boost::bind(&HumanoidLocalization::laserCallback, this, _1));
-
-  // subscription on point cloud, tf message filter
-  m_pointCloudSub = new message_filters::Subscriber<sensor_msgs::PointCloud2>(m_nh, "point_cloud", 100);
-  m_pointCloudFilter = new tf::MessageFilter<sensor_msgs::PointCloud2>(*m_pointCloudSub, m_tfListener, m_odomFrameId, 100);
-  m_pointCloudFilter->registerCallback(boost::bind(&HumanoidLocalization::pointCloudCallback, this, _1));
-
-  // subscription on init pose, tf message filter
-  m_initPoseSub = new message_filters::Subscriber<geometry_msgs::PoseWithCovarianceStamped>(m_nh, "initialpose", 2);
-  m_initPoseFilter = new tf::MessageFilter<geometry_msgs::PoseWithCovarianceStamped>(*m_initPoseSub, m_tfListener, m_globalFrameId, 2);
-  m_initPoseFilter->registerCallback(boost::bind(&HumanoidLocalization::initPoseCallback, this, _1));
-
-
-  m_pauseIntegrationSub = m_privateNh.subscribe("pause_localization", 1, &HumanoidLocalization::pauseLocalizationCallback, this);
-  m_pauseLocSrv = m_privateNh.advertiseService("pause_localization_srv", &HumanoidLocalization::pauseLocalizationSrvCallback, this);
-  m_resumeLocSrv = m_privateNh.advertiseService("resume_localization_srv", &HumanoidLocalization::resumeLocalizationSrvCallback, this);
-
-  if (m_useIMU)
-    m_imuSub = m_nh.subscribe("imu", 5, &HumanoidLocalization::imuCallback, this);
-  if (m_useTimer)
-  {
-     m_timer = m_nh.createTimer(ros::Duration(m_timerPeriod), &HumanoidLocalization::timerCallback, this);
-     ROS_INFO("Using timer with a period of %4f s", m_timerPeriod);
-  }
-
-  ROS_INFO("NaoLocalization initialized with %d particles.", m_numParticles);
-}
-
-HumanoidLocalization::~HumanoidLocalization() {
-
-  delete m_laserFilter;
-  delete m_laserSub;
-
-  delete m_pointCloudFilter;
-  delete m_pointCloudSub;
-
-  delete m_initPoseFilter;
-  delete m_initPoseSub;
-
-}
-
-void HumanoidLocalization::timerCallback(const ros::TimerEvent & e){
-   ros::Time transformExpiration = e.current_real + ros::Duration(m_transformTolerance);
-   tf::StampedTransform tmp_tf_stamped(m_latest_transform, transformExpiration, m_globalFrameId, m_targetFrameId);
-   m_tfBroadcaster.sendTransform(tmp_tf_stamped);
-}
-
-
-void HumanoidLocalization::reset(){
-
-#if defined(_BENCH_TIME)
-  ros::WallTime startTime = ros::WallTime::now();
-#endif
-
-  if (m_initGlobal){
-    this->initGlobal();
-  } else {
-    geometry_msgs::PoseWithCovarianceStampedPtr posePtr(new geometry_msgs::PoseWithCovarianceStamped());
-
-    if (m_initFromTruepose){ // useful for evaluation, when ground truth available:
-      geometry_msgs::PoseStamped truePose;
-      tf::Stamped<tf::Pose> truePoseTF;
-      tf::Stamped<tf::Pose> ident (tf::Transform(tf::createIdentityQuaternion(), tf::Vector3(0,0,0)), ros::Time::now(), "torso_real"); // TODO: param
-
-      ros::Time lookupTime = ros::Time::now();
-      while(m_nh.ok() && !m_tfListener.waitForTransform(m_globalFrameId, ident.frame_id_, lookupTime, ros::Duration(1.0))){
-        ROS_WARN("Waiting for transform %s --> %s for ground truth initialization failed, trying again...", m_globalFrameId.c_str(), ident.frame_id_.c_str());
-        lookupTime = ros::Time::now();
-      }
-      ident.stamp_ = lookupTime;
-
-      m_tfListener.transformPose(m_globalFrameId, ident, truePoseTF);
-      tf::poseStampedTFToMsg(truePoseTF, truePose);
-      tf::poseTFToMsg(truePoseTF, posePtr->pose.pose);
-      posePtr->header = truePose.header;
-
-
-      // initial covariance acc. to params
-      for(int j=0; j < 6; ++j){
-        for (int i = 0; i < 6; ++i){
-          if (i == j)
-            posePtr->pose.covariance.at(i*6 +j) = m_initNoiseStd(i) * m_initNoiseStd(i);
-          else
-            posePtr->pose.covariance.at(i*6 +j) = 0.0;
-        }
-      }
-
-    } else{
-      posePtr.reset(new geometry_msgs::PoseWithCovarianceStamped());
-      for (int i = 0; i < 6; ++i){
-        posePtr->pose.covariance.at(i*6 +i) = m_initNoiseStd(i) * m_initNoiseStd(i);
-      }
-
-      double roll, pitch, z;
-      initZRP(z, roll, pitch);
-
-
-
-      posePtr->pose.pose.position.x = m_initPose(0);
-      posePtr->pose.pose.position.y = m_initPose(1);
-      posePtr->pose.pose.position.z = z;
-      tf::Quaternion quat;
-      quat.setRPY(roll, pitch, m_initPose(5));
-      tf::quaternionTFToMsg(quat, posePtr->pose.pose.orientation);
-
-    }
-
-    this->initPoseCallback(posePtr);
-
-  }
-
-
-
-
-
-#if defined(_BENCH_TIME)
-  double dt = (ros::WallTime::now() - startTime).toSec();
-  ROS_INFO_STREAM("Initialization of "<< m_numParticles << " particles took "
-                  << dt << "s (="<<dt/m_numParticles<<"s/particle)");
-#endif
-
-
-}
-
-
-void HumanoidLocalization::initZRP(double& z, double& roll, double& pitch){
-  if(m_initPoseRealZRP) {
-    // Get latest pose height
-    tf::Stamped<tf::Pose> lastOdomPose;
-    double poseHeight;
-    if(m_motionModel->getLastOdomPose(lastOdomPose) &&
-        lookupPoseHeight(lastOdomPose.stamp_, poseHeight)) {
-      z = poseHeight;
-    } else {
-      ROS_WARN("Could not determine current pose height, falling back to init_pose_z");
-      z = m_initPose(2);
-    }
-
-    // Get latest roll and pitch
-    if(!m_lastIMUMsgBuffer.empty()) {
-      getRP(m_lastIMUMsgBuffer.back().orientation, roll, pitch);
-    } else {
-      ROS_WARN("Could not determine current roll and pitch, falling back to init_pose_{roll,pitch}");
-      roll = m_initPose(3);
-      pitch = m_initPose(4);
-    }
-  } else {
-    // Use pose height, roll and pitch from init_pose_{z,roll,pitch} parameters
-    z = m_initPose(2);
-    roll = m_initPose(3);
-    pitch = m_initPose(4);
-  }
-
-
-}
-void HumanoidLocalization::laserCallback(const sensor_msgs::LaserScanConstPtr& msg){
-  ROS_DEBUG("Laser received (time: %f)", msg->header.stamp.toSec());
-  
-  if (!m_initialized){
-    ROS_WARN("Localization not initialized yet, skipping laser callback.");
-    return;
-  }
-
-  double timediff = (msg->header.stamp - m_lastLaserTime).toSec();
-  if (m_receivedSensorData && timediff < 0){
-    ROS_WARN("Ignoring received laser data that is %f s older than previous data!", timediff);
-    return;
-  }
-  
-
-  /// absolute, current odom pose
-  tf::Stamped<tf::Pose> odomPose;
-  // check if odometry available, skip scan if not.
-  if (!m_motionModel->lookupOdomPose(msg->header.stamp, odomPose))
-     return;
-
-
-  bool sensor_integrated = false;
-  if (!m_paused && (!m_receivedSensorData || isAboveMotionThreshold(odomPose))) {
-
-     // convert laser to point cloud first:
-     PointCloud pc_filtered;
-     std::vector<float> laserRangesSparse;
-     prepareLaserPointCloud(msg, pc_filtered, laserRangesSparse);
-
-     sensor_integrated = localizeWithMeasurement(pc_filtered, laserRangesSparse, msg->range_max);
-
-  } 
-
-  if(!sensor_integrated){ // no laser integration: propagate particles forward by full interval
-
-     // relative odom transform to last odomPose
-     tf::Transform odomTransform = m_motionModel->computeOdomTransform(odomPose);
-     m_motionModel->applyOdomTransform(m_particles, odomTransform);
-     constrainMotion(odomPose);
-  }
-  else
-  {
-     m_lastLocalizedPose = odomPose;
-  }
-
-  m_motionModel->storeOdomPose(odomPose);
-  publishPoseEstimate(msg->header.stamp, sensor_integrated);
-  m_lastLaserTime = msg->header.stamp; 
-}
-
-void HumanoidLocalization::constrainMotion(const tf::Pose& odomPose){
-  // skip if nothing to do:
-  if (!m_constrainMotionZ && !m_constrainMotionRP)
-    return;
-
-  // reset z according to current odomPose:
-  double z = odomPose.getOrigin().getZ();
-  double odomRoll, odomPitch, uselessYaw;
-  odomPose.getBasis().getRPY(odomRoll, odomPitch, uselessYaw);
-
-#pragma omp parallel for
-  for (unsigned i=0; i < m_particles.size(); ++i){
-    if (m_constrainMotionZ){
-      tf::Vector3 pos = m_particles[i].pose.getOrigin();
-      double floor_z = m_mapModel->getFloorHeight(m_particles[i].pose);
-      pos.setZ(z+floor_z);
-      m_particles[i].pose.setOrigin(pos);
-    }
-
-    if (m_constrainMotionRP){
-      double yaw =  tf::getYaw(m_particles[i].pose.getRotation());
-      m_particles[i].pose.setRotation(tf::createQuaternionFromRPY(odomRoll, odomPitch, yaw));
-
-    }
-  }
-}
-
-bool HumanoidLocalization::isAboveMotionThreshold(const tf::Pose& odomPose){
-  tf::Transform odomTransform = m_lastLocalizedPose.inverse() * odomPose;
-
-  double yaw, pitch, roll;
-  odomTransform.getBasis().getRPY(roll, pitch, yaw);
-
-  return (odomTransform.getOrigin().length() >= m_observationThresholdTrans
-      || std::abs(yaw) >= m_observationThresholdRot);
-}
-
-bool HumanoidLocalization::localizeWithMeasurement(const PointCloud& pc_filtered, const std::vector<float>& ranges, double max_range){
-  ros::WallTime startTime = ros::WallTime::now();
-#if PCL_VERSION_COMPARE(>=,1,7,0)
-  ros::Time t = pcl_conversions::fromPCL(pc_filtered.header).stamp;
-#else
-  ros::Time t = pc_filtered.header.stamp;
-#endif
-  // apply motion model with temporal sampling:
-  m_motionModel->applyOdomTransformTemporal(m_particles, t, m_temporalSamplingRange);
-  
-  // constrain to ground plane, if desired:
-  tf::Stamped<tf::Transform> odomPose;
-  if (!m_motionModel->lookupOdomPose(t, odomPose))
-    return false;
-  constrainMotion(odomPose);
-
-  // transformation from torso frame to sensor
-  // this takes the latest tf, assumes that torso to sensor did not change over temp. sampling!
-  tf::StampedTransform localSensorFrame;
-  if (!m_motionModel->lookupLocalTransform(pc_filtered.header.frame_id, t, localSensorFrame))
-    return false;
-
-  tf::Transform torsoToSensor(localSensorFrame.inverse());
-  
-//### Particles in log-form from here...
-  toLogForm();
-
-  // skip pose integration if z, roll and pitch constrained to floor by odometry
-  if (!(m_constrainMotionRP && m_constrainMotionZ)){
-    bool imuMsgOk = false;
-    double angleX, angleY;
-    if(m_useIMU) {
-      ros::Time imuStamp;
-      imuMsgOk = getImuMsg(t, imuStamp, angleX, angleY);
-    } else {
-      tf::Stamped<tf::Pose> lastOdomPose;
-      if(m_motionModel->lookupOdomPose(t, lastOdomPose)) {
-        double dropyaw;
-        lastOdomPose.getBasis().getRPY(angleX, angleY, dropyaw);
-        imuMsgOk = true;
-      }
-    }
-
-    tf::StampedTransform footprintToTorso;
-    // integrated pose (z, roll, pitch) meas. only if data OK:
-    if(imuMsgOk) {
-      if (!m_motionModel->lookupLocalTransform(m_baseFootprintId, t, footprintToTorso)) {
-        ROS_WARN("Could not obtain pose height in localization, skipping Pose integration");
-      } else {
-        m_observationModel->integratePoseMeasurement(m_particles, angleX, angleY, footprintToTorso);
-      }
-    } else {
-      ROS_WARN("Could not obtain roll and pitch measurement, skipping Pose integration");
-    }
-  }
-
-  m_filteredPointCloudPub.publish(pc_filtered);
-  m_observationModel->integrateMeasurement(m_particles, pc_filtered, ranges, max_range, torsoToSensor);
-
-  // TODO: verify poses before measurements, ignore particles then
-  m_mapModel->verifyPoses(m_particles);
-
-  // normalize weights and transform back from log:
-  normalizeWeights();
-  //### Particles back in regular form now
-
-  double nEffParticles = nEff();
-
-  std_msgs::Float32 nEffMsg;
-  nEffMsg.data = nEffParticles;
-  m_nEffPub.publish(nEffMsg);
-
-  if (nEffParticles <= m_nEffFactor*m_particles.size()){ // selective resampling
-    ROS_INFO("Resampling, nEff=%f, numParticles=%zd", nEffParticles, m_particles.size());
-    resample();
-  } else {
-    ROS_INFO("Skipped resampling, nEff=%f, numParticles=%zd", nEffParticles, m_particles.size());
-  }
-
-  m_receivedSensorData = true;
-
-  double dt = (ros::WallTime::now() - startTime).toSec();
-  ROS_INFO_STREAM("Observations for "<< m_numParticles << " particles took "
-                  << dt << "s (="<<dt/m_numParticles<<"s/particle)");
-
-  return true;
-}
-
-void HumanoidLocalization::prepareLaserPointCloud(const sensor_msgs::LaserScanConstPtr& laser, PointCloud& pc, std::vector<float>& ranges) const{
-  unsigned numBeams = laser->ranges.size();
-  // skip every n-th scan:
-  //unsigned step = computeBeamStep(numBeams);
-  // build complete pointcloud:
-  unsigned step = 1;
-
-
-
-  // prepare laser message:
-  unsigned int numBeamsSkipped = 0;
-
-  // range_min of laser is also used to filter out wrong messages:
-  double laserMin = std::max(double(laser->range_min), m_filterMinRange);
-
-  // (range_max readings stay, will be used in the sensor model)
-
-  ranges.reserve(50);
-
-  // build a point cloud
-#if PCL_VERSION_COMPARE(>=,1,7,0)
-  pcl_conversions::toPCL(laser->header, pc.header);
-#else
-  pc.header = laser->header;
-#endif
-  pc.points.reserve(50);
-  for (unsigned beam_idx = 0; beam_idx < numBeams; beam_idx+= step){
-    float range = laser->ranges[beam_idx];
-    if (range >= laserMin && range <= m_filterMaxRange){
-      double laserAngle = laser->angle_min + beam_idx * laser->angle_increment;
-      tf::Transform laserAngleRotation(tf::Quaternion(tf::Vector3(0.0, 0.0, 1.0), laserAngle));
-      tf::Vector3 laserEndpointTrans(range, 0.0, 0.0);
-      tf::Vector3 pt(laserAngleRotation * laserEndpointTrans);
-
-      pc.points.push_back(pcl::PointXYZ(pt.x(), pt.y(), pt.z()));
-      ranges.push_back(range);
-
-    } else{
-      numBeamsSkipped++;
-    }
-
-  }
-  pc.height = 1;
-  pc.width = pc.points.size();
-  pc.is_dense = true;
-
-  // uniform sampling:
-  pcl::UniformSampling<pcl::PointXYZ> uniformSampling;
-  pcl::PointCloud<pcl::PointXYZ>::Ptr cloudPtr;
-  cloudPtr.reset(new pcl::PointCloud<pcl::PointXYZ> (pc));
-  uniformSampling.setInputCloud(cloudPtr);
-  uniformSampling.setRadiusSearch(m_sensorSampleDist);
-  pcl::PointCloud<int> sampledIndices;
-  uniformSampling.compute(sampledIndices);
-  pcl::copyPointCloud(*cloudPtr, sampledIndices.points, pc);
-  // adjust "ranges" array to contain the same points:
-  std::vector<float> rangesSparse;
-  rangesSparse.resize(sampledIndices.size());
-  for (size_t i = 0; i < rangesSparse.size(); ++i){
-    rangesSparse[i] = ranges[sampledIndices.points[i]];
-  }
-  ranges = rangesSparse;
-  ROS_INFO("Laser PointCloud subsampled: %zu from %zu (%u out of valid range)", pc.size(), cloudPtr->size(), numBeamsSkipped);
-}
-
-int HumanoidLocalization::filterUniform(const PointCloud & cloud_in, PointCloud & cloud_out, int numSamples) const{
-  int numPoints = static_cast<int>(cloud_in.size() );
-  numSamples = std::min( numSamples, numPoints);
-  std::vector<unsigned int> indices;
-  indices.reserve( numPoints );
-  for (int i=0; i<numPoints; ++i)
-    indices.push_back(i);
-  random_shuffle ( indices.begin(), indices.end());
-
-  cloud_out.reserve( cloud_out.size() + numSamples );
-  for ( int i = 0; i < numSamples; ++i)
-  {
-    cloud_out.push_back( cloud_in.at(indices[i]));
-  }
-  return numSamples;
-}
-
-
-
-void HumanoidLocalization::filterGroundPlane(const PointCloud& pc, PointCloud& ground, PointCloud& nonground, double groundFilterDistance, double groundFilterAngle, double groundFilterPlaneDistance){
-   ground.header = pc.header;
-   nonground.header = pc.header;
-
-   if (pc.size() < 50){
-      ROS_WARN("Pointcloud in HumanoidLocalization::filterGroundPlane too small, skipping ground plane extraction");
-      nonground = pc;
-   } else {
-      // plane detection for ground plane removal:
-      pcl::ModelCoefficients::Ptr coefficients (new pcl::ModelCoefficients);
-      pcl::PointIndices::Ptr inliers (new pcl::PointIndices);
-
-      // Create the segmentation object and set up:
-      pcl::SACSegmentation<pcl::PointXYZ> seg;
-      seg.setOptimizeCoefficients (true);
-      // TODO: maybe a filtering based on the surface normals might be more robust / accurate?
-      seg.setModelType(pcl::SACMODEL_PERPENDICULAR_PLANE);
-      seg.setMethodType(pcl::SAC_RANSAC);
-      seg.setMaxIterations(200);
-      seg.setDistanceThreshold (groundFilterDistance);
-      seg.setAxis(Eigen::Vector3f(0,0,1));
-      seg.setEpsAngle(groundFilterAngle);
-
-
-      PointCloud cloud_filtered(pc);
-      // Create the filtering object
-      pcl::ExtractIndices<pcl::PointXYZ> extract;
-      bool groundPlaneFound = false;
-
-      while(cloud_filtered.size() > 10 && !groundPlaneFound){
-         seg.setInputCloud(cloud_filtered.makeShared());
-         seg.segment (*inliers, *coefficients);
-         if (inliers->indices.size () == 0){
-            ROS_INFO("PCL segmentation did not find any plane.");
-
-            break;
-         }
-
-         extract.setInputCloud(cloud_filtered.makeShared());
-         extract.setIndices(inliers);
-
-         if (std::abs(coefficients->values.at(3)) < groundFilterPlaneDistance){
-            ROS_DEBUG("Ground plane found: %zu/%zu inliers. Coeff: %f %f %f %f", inliers->indices.size(), cloud_filtered.size(),
-                  coefficients->values.at(0), coefficients->values.at(1), coefficients->values.at(2), coefficients->values.at(3));
-            extract.setNegative (false);
-            extract.filter (ground);
-
-            // remove ground points from full pointcloud:
-            // workaround for PCL bug:
-            if(inliers->indices.size() != cloud_filtered.size()){
-               extract.setNegative(true);
-               PointCloud cloud_out;
-               extract.filter(cloud_out);
-               nonground += cloud_out;
-               cloud_filtered = cloud_out;
-            }
-
-            groundPlaneFound = true;
-         } else{
-            ROS_DEBUG("Horizontal plane (not ground) found: %zu/%zu inliers. Coeff: %f %f %f %f", inliers->indices.size(), cloud_filtered.size(),
-                  coefficients->values.at(0), coefficients->values.at(1), coefficients->values.at(2), coefficients->values.at(3));
-            pcl::PointCloud<pcl::PointXYZ> cloud_out;
-            extract.setNegative (false);
-            extract.filter(cloud_out);
-            nonground +=cloud_out;
-            // debug
-            //            pcl::PCDWriter writer;
-            //            writer.write<pcl::PointXYZ>("nonground_plane.pcd",cloud_out, false);
-
-            // remove current plane from scan for next iteration:
-            // workaround for PCL bug:
-            if(inliers->indices.size() != cloud_filtered.size()){
-               extract.setNegative(true);
-               cloud_out.points.clear();
-               extract.filter(cloud_out);
-               cloud_filtered = cloud_out;
-            } else{
-               cloud_filtered.points.clear();
-            }
-         }
-
-      }
-      // TODO: also do this if overall starting pointcloud too small?
-      if (!groundPlaneFound){ // no plane found or remaining points too small
-         ROS_WARN("No ground plane found in scan");
-
-         // do a rough fitlering on height to prevent spurious obstacles
-         pcl::PassThrough<pcl::PointXYZ> second_pass;
-         second_pass.setFilterFieldName("z");
-         second_pass.setFilterLimits(-groundFilterPlaneDistance, groundFilterPlaneDistance);
-         second_pass.setInputCloud(pc.makeShared());
-         second_pass.filter(ground);
-
-         second_pass.setFilterLimitsNegative (true);
-         second_pass.filter(nonground);
-      }
-
-      // debug:
-      //        pcl::PCDWriter writer;
-      //        if (pc_ground.size() > 0)
-      //          writer.write<pcl::PointXYZ>("ground.pcd",pc_ground, false);
-      //        if (pc_nonground.size() > 0)
-      //          writer.write<pcl::PointXYZ>("nonground.pcd",pc_nonground, false);
-   }
-}
-
-
-
-void HumanoidLocalization::prepareGeneralPointCloud(const sensor_msgs::PointCloud2::ConstPtr& msg, PointCloud& pc, std::vector<float>& ranges) const{
-
-    pc.clear();
-    // lookup Transfrom Sensor to BaseFootprint
-    tf::StampedTransform sensorToBaseFootprint;
-    try{
-      m_tfListener.waitForTransform(m_baseFootprintId, msg->header.frame_id, msg->header.stamp, ros::Duration(0.2));
-      m_tfListener.lookupTransform(m_baseFootprintId, msg->header.frame_id, msg->header.stamp, sensorToBaseFootprint);
-
-
-    }catch(tf::TransformException& ex){
-      ROS_ERROR_STREAM( "Transform error for pointCloudCallback: " << ex.what() << ", quitting callback.\n");
-      return;
-    }
-
-    /*** filter PointCloud and fill pc and ranges ***/
-
-    // pass-through filter to get rid of near and far ranges
-    pcl::PassThrough<pcl::PointXYZ> pass;
-    pcl::PointCloud<pcl::PointXYZ>::Ptr pcd_tmp(new pcl::PointCloud<pcl::PointXYZ>());
-#if PCL_VERSION_COMPARE(>=,1,7,0)
-    pcl::PCLPointCloud2 pcd2_tmp;
-    pcl_conversions::toPCL(*msg, pcd2_tmp);
-    pcl::fromPCLPointCloud2(pcd2_tmp, *pcd_tmp);
-#else
-    pcl::fromROSMsg(*msg, *pcd_tmp);
-#endif
-    pass.setInputCloud (pcd_tmp);
-    pass.setFilterFieldName ("z");
-    pass.setFilterLimits (m_filterMinRange, m_filterMaxRange);
-    pass.filter (pc);
-
-    // identify ground plane
-    PointCloud ground, nonground;
-    if (m_groundFilterPointCloud)
-    {
-        Eigen::Matrix4f matSensorToBaseFootprint, matBaseFootprintToSensor;
-        pcl_ros::transformAsMatrix(sensorToBaseFootprint, matSensorToBaseFootprint);
-        pcl_ros::transformAsMatrix(sensorToBaseFootprint.inverse(), matBaseFootprintToSensor);
-        // TODO:Why transform the point cloud and not just the normal vector?
-        pcl::transformPointCloud(pc, pc, matSensorToBaseFootprint );
-        filterGroundPlane(pc, ground, nonground, m_groundFilterDistance, m_groundFilterAngle, m_groundFilterPlaneDistance);
-
-        // clear pc again and refill it based on classification
-        pc.clear();
-        pcl::PointCloud<int> sampledIndices;
-
-        int numFloorPoints = 0;
-        if (ground.size() > 0){ // check for 0 size, otherwise PCL crashes
-          // transform clouds back to sensor for integration
-          pcl::transformPointCloud(ground, ground, matBaseFootprintToSensor);
-          voxelGridSampling(ground, sampledIndices, m_sensorSampleDist*m_sensorSampleDistGroundFactor);
-          pcl::copyPointCloud(ground, sampledIndices.points, pc);
-          numFloorPoints = sampledIndices.size();
-        }
-
-        //int numNonFloorPoints = filterUniform( nonground, pc, m_numNonFloorPoints );
-        int numNonFloorPoints = 0;
-        if (nonground.size() > 0){ // check for 0 size, otherwise PCL crashes
-          // transform clouds back to sensor for integration
-          pcl::transformPointCloud(nonground, nonground, matBaseFootprintToSensor);
-          voxelGridSampling( nonground, sampledIndices, m_sensorSampleDist);
-          pcl::copyPointCloud( nonground, sampledIndices.points, nonground);
-          numNonFloorPoints = sampledIndices.size();
-          pc += nonground;
-        }
-
-        //TODO improve sampling?
-
-
-        ROS_INFO("PointCloudGroundFiltering done. Added %d non-ground points and %d ground points (from %zu). Cloud size is %zu", numNonFloorPoints, numFloorPoints, ground.size(), pc.size());
-        // create sparse ranges..
-        ranges.resize(pc.size());
-        for (unsigned int i=0; i<pc.size(); ++i)
-        {
-           pcl::PointXYZ p = pc.at(i);
-           ranges[i] = sqrt(p.x*p.x + p.y*p.y + p.z*p.z);
-        }
-
-    }
-    else
-    {
-       ROS_INFO("Starting uniform sampling");
-       //ROS_ERROR("No ground filtering is not implemented yet!");
-       // uniform sampling:
-       pcl::PointCloud<int> sampledIndices;
-       voxelGridSampling(pc, sampledIndices,  m_sensorSampleDist);
-       pcl::copyPointCloud(pc, sampledIndices.points, pc);
-
-       // adjust "ranges" array to contain the same points:
-       ranges.resize(sampledIndices.size());
-       for (size_t i = 0; i < ranges.size(); ++i){
-          pcl::PointXYZ p = pc[i]; 
-          ranges[i] = sqrt(p.x*p.x + p.y*p.y + p.z*p.z);
-          //rangesSparse[i] = ranges[sampledIndices.points[i]];
-          //ranges[i] = sqrt(p.x*p.x + p.y*p.y + p.z*p.z);
-       }
-       ROS_INFO("Done.");
-
-
-    }
-    return;
-
-}
-
-void HumanoidLocalization::voxelGridSampling(const PointCloud & pc, pcl::PointCloud<int> & sampledIndices, double search_radius) const
-{
-   pcl::UniformSampling<pcl::PointXYZ> uniformSampling;
-   pcl::PointCloud<pcl::PointXYZ>::Ptr cloudPtr;
-   cloudPtr.reset(new pcl::PointCloud<pcl::PointXYZ> (pc)); // TODO: Check if this is a shallow copy..
-   uniformSampling.setInputCloud(cloudPtr);
-   uniformSampling.setRadiusSearch(search_radius);
-   uniformSampling.compute(sampledIndices);
-}
-
-void HumanoidLocalization::pointCloudCallback(const sensor_msgs::PointCloud2::ConstPtr& msg) {
-  ROS_DEBUG("PointCloud received (time: %f)", msg->header.stamp.toSec());
-
-  if (!m_initialized){
-    ROS_WARN("Loclization not initialized yet, skipping PointCloud callback.");
-    return;
-  }
-
-  double timediff = (msg->header.stamp - m_lastPointCloudTime).toSec();
-  if (m_receivedSensorData && timediff < 0){
-    ROS_WARN("Ignoring received PointCloud data that is %f s older than previous data!", timediff);
-    return;
-  }
-
-
-  /// absolute, current odom pose
-  tf::Stamped<tf::Pose> odomPose;
-  // check if odometry available, skip scan if not.
-  if (!m_motionModel->lookupOdomPose(msg->header.stamp, odomPose))
-    return;
-
-
-  bool sensor_integrated = false;
-
-  // TODO #1: Make this nicer: head rotations for integration check
-  // TODO #2: Initialization of m_headYawRotationLastScan, etc needs to be set correctly
-  bool isAboveHeadMotionThreshold = false;
-  double headYaw, headPitch, headRoll;
-  tf::StampedTransform torsoToSensor;
-  if (!m_motionModel->lookupLocalTransform(msg->header.frame_id, msg->header.stamp, torsoToSensor))
-      return; //TODO: should we apply applyOdomTransformTemporal, before returning
-
-  // TODO #3: Invert transform?: tf::Transform torsoToSensor(localSensorFrame.inverse());
-
-  torsoToSensor.getBasis().getRPY(headRoll, headPitch, headYaw);
-  double headYawRotationSinceScan = std::abs(headYaw - m_headYawRotationLastScan);
-  double headPitchRotationSinceScan = std::abs(headPitch - m_headPitchRotationLastScan);
-
-  if (headYawRotationSinceScan>= m_observationThresholdHeadYawRot || headPitchRotationSinceScan >= m_observationThresholdHeadPitchRot)
-      isAboveHeadMotionThreshold = true;
-  // end #1
-
-  if (!m_paused && (!m_receivedSensorData || isAboveHeadMotionThreshold || isAboveMotionThreshold(odomPose))) {
-
-    // convert laser to point cloud first:
-    PointCloud pc_filtered;
-    std::vector<float> rangesSparse;
-    prepareGeneralPointCloud(msg, pc_filtered, rangesSparse);
-
-    double maxRange = 10.0; // TODO #4: What is a maxRange for pointClouds? NaN? maxRange is expected to be a double and integrateMeasurement checks rangesSparse[i] > maxRange
-    ROS_DEBUG("Updating Pose Estimate from a PointCloud with %zu points and %zu ranges", pc_filtered.size(), rangesSparse.size());
-    sensor_integrated = localizeWithMeasurement(pc_filtered, rangesSparse, maxRange);
-   
-  } 
-  if(!sensor_integrated){ // no observation necessary: propagate particles forward by full interval
-     // relative odom transform to last odomPose
-     tf::Transform odomTransform = m_motionModel->computeOdomTransform(odomPose);
-     m_motionModel->applyOdomTransform(m_particles, odomTransform);
-     constrainMotion(odomPose);
-  }
-  else{
-     m_lastLocalizedPose = odomPose;
-     // TODO #1
-     m_headYawRotationLastScan = headYaw;
-     m_headPitchRotationLastScan = headPitch;
-  }
-
-  m_motionModel->storeOdomPose(odomPose);
-  publishPoseEstimate(msg->header.stamp, sensor_integrated);
-  m_lastPointCloudTime = msg->header.stamp;
-  ROS_DEBUG("PointCloud callback complete.");
-}
-
-void HumanoidLocalization::imuCallback(const sensor_msgs::ImuConstPtr& msg){
-  m_lastIMUMsgBuffer.push_back(*msg);
-}
-
-bool HumanoidLocalization::getImuMsg(const ros::Time& stamp, ros::Time& imuStamp, double& angleX, double& angleY) const {
-  if(m_lastIMUMsgBuffer.empty())
-    return false;
-
-  typedef boost::circular_buffer<sensor_msgs::Imu>::const_iterator ItT;
-  const double maxAge = 0.2;
-  double closestOlderStamp = std::numeric_limits<double>::max();
-  double closestNewerStamp = std::numeric_limits<double>::max();
-  ItT closestOlder = m_lastIMUMsgBuffer.end(), closestNewer = m_lastIMUMsgBuffer.end();
-  for(ItT it = m_lastIMUMsgBuffer.begin(); it != m_lastIMUMsgBuffer.end(); it++) {
-    const double age = (stamp - it->header.stamp).toSec();
-    if(age >= 0.0 && age < closestOlderStamp) {
-      closestOlderStamp = age;
-      closestOlder = it;
-    } else if(age < 0.0 && -age < closestNewerStamp) {
-      closestNewerStamp = -age;
-      closestNewer = it;
-    }
-  }
-
-  if(closestOlderStamp < maxAge && closestNewerStamp < maxAge && closestOlderStamp + closestNewerStamp > 0.0) {
-    // Linear interpolation
-    const double weightOlder = closestNewerStamp / (closestNewerStamp + closestOlderStamp);
-    const double weightNewer = 1.0 - weightOlder;
-    imuStamp = ros::Time(weightOlder * closestOlder->header.stamp.toSec()
-                          + weightNewer * closestNewer->header.stamp.toSec());
-    double olderX, olderY, newerX, newerY;
-    getRP(closestOlder->orientation, olderX, olderY);
-    getRP(closestNewer->orientation, newerX, newerY);
-    angleX   = weightOlder * olderX  + weightNewer * newerX;
-    angleY   = weightOlder * olderY + weightNewer * newerY;
-    ROS_DEBUG("Msg: %.3f, Interpolate [%.3f .. %.3f .. %.3f]\n", stamp.toSec(), closestOlder->header.stamp.toSec(),
-              imuStamp.toSec(), closestNewer->header.stamp.toSec());
-    return true;
-  } else if(closestOlderStamp < maxAge || closestNewerStamp < maxAge) {
-    // Return closer one
-    ItT it = (closestOlderStamp < closestNewerStamp) ? closestOlder : closestNewer;
-    imuStamp = it->header.stamp;
-    getRP(it->orientation, angleX, angleY);
-    return true;
-  } else {
-    if(closestOlderStamp < closestNewerStamp)
-      ROS_WARN("Closest IMU message is %.2f seconds too old, skipping pose integration", closestOlderStamp);
-    else
-      ROS_WARN("Closest IMU message is %.2f seconds too new, skipping pose integration", closestNewerStamp);
-    return false;
-  }
-}
-
-void HumanoidLocalization::initPoseCallback(const geometry_msgs::PoseWithCovarianceStampedConstPtr& msg){
-  tf::Pose pose;
-  tf::poseMsgToTF(msg->pose.pose, pose);
-
-  if (msg->header.frame_id != m_globalFrameId){
-    ROS_WARN("Frame ID of \"initialpose\" (%s) is different from the global frame %s", msg->header.frame_id.c_str(), m_globalFrameId.c_str());
-  }
-
-  std::vector<double> heights;
-  double poseHeight = 0.0;
-  if (std::abs(pose.getOrigin().getZ()) < 0.01){
-    m_mapModel->getHeightlist(pose.getOrigin().getX(), pose.getOrigin().getY(), 0.6, heights);
-    if (heights.size() == 0){
-      ROS_WARN("No ground level to stand on found at map position, assuming 0");
-      heights.push_back(0.0);
-    }
-
-    bool poseHeightOk = false;
-    if(m_initPoseRealZRP) {
-      ros::Time stamp(msg->header.stamp);
-      if(stamp.isZero()) {
-        // Header stamp is not set (e.g. RViz), use stamp from latest pose message instead
-        tf::Stamped<tf::Pose> lastOdomPose;
-        m_motionModel->getLastOdomPose(lastOdomPose);
-        stamp = lastOdomPose.stamp_;
-      }
-      poseHeightOk = lookupPoseHeight(stamp, poseHeight);
-      if(!poseHeightOk) {
-        ROS_WARN("Could not determine current pose height, falling back to init_pose_z");
-      }
-    }
-    if(!poseHeightOk) {
-      ROS_INFO("Use pose height from init_pose_z");
-      poseHeight = m_initPose(2);
-    }
-  }
-
-
-  Matrix6d initCov;
-  if ((std::abs(msg->pose.covariance.at(6*0+0) - 0.25) < 0.1) && (std::abs(msg->pose.covariance.at(6*1+1) -0.25) < 0.1)
-      && (std::abs(msg->pose.covariance.at(6*3+3) - M_PI/12.0 * M_PI/12.0)<0.1)){
-    ROS_INFO("Covariance originates from RViz, using default parameters instead");
-    initCov = Matrix6d::Zero();
-    initCov.diagonal() = m_initNoiseStd.cwiseProduct(m_initNoiseStd);
-
-    // manually set r&p, rviz values are 0
-    bool ok = false;
-    const double yaw = tf::getYaw(pose.getRotation());
-    if(m_initPoseRealZRP) {
-      bool useOdometry = true;
-      if(m_useIMU) {
-        if(m_lastIMUMsgBuffer.empty()) {
-          ROS_WARN("Could not determine current roll and pitch because IMU message buffer is empty.");
-        } else {
-          double roll, pitch;
-          if(msg->header.stamp.isZero()) {
-            // Header stamp is not set (e.g. RViz), use stamp from latest IMU message instead
-            getRP(m_lastIMUMsgBuffer.back().orientation, roll, pitch);
-            ok = true;
-          } else {
-            ros::Time imuStamp;
-            ok = getImuMsg(msg->header.stamp, imuStamp, roll, pitch);
-          }
-          if(ok) {
-            ROS_INFO("roll and pitch not set in initPoseCallback, use IMU values (roll = %f, pitch = %f) instead", roll, pitch);
-            pose.setRotation(tf::createQuaternionFromRPY(roll, pitch, yaw));
-            useOdometry = false;
-          } else {
-            ROS_WARN("Could not determine current roll and pitch from IMU, falling back to odometry roll and pitch");
-            useOdometry = true;
-          }
-        }
-      }
-
-      if(useOdometry) {
-        double roll, pitch, dropyaw;
-        tf::Stamped<tf::Pose> lastOdomPose;
-        ok = m_motionModel->getLastOdomPose(lastOdomPose);
-        if(ok) {
-          lastOdomPose.getBasis().getRPY(roll, pitch, dropyaw);
-          pose.setRotation(tf::createQuaternionFromRPY(roll, pitch, yaw));
-          ROS_INFO("roll and pitch not set in initPoseCallback, use odometry values (roll = %f, pitch = %f) instead", roll, pitch);
-        } else {
-          ROS_WARN("Could not determine current roll and pitch from odometry, falling back to init_pose_{roll,pitch} parameters");
-        }
-      }
-    }
-
-    if(!ok) {
-      ROS_INFO("roll and pitch not set in initPoseCallback, use init_pose_{roll,pitch} parameters instead");
-      pose.setRotation(tf::createQuaternionFromRPY(m_initPose(3), m_initPose(4), yaw));
-    }
-  } else{
-    for(int j=0; j < initCov.cols(); ++j){
-      for (int i = 0; i < initCov.rows(); ++i){
-        initCov(i,j) = msg->pose.covariance.at(i*initCov.cols() +j);
-      }
-    }
-  }
-
-  // sample from initial pose covariance:
-  Matrix6d initCovL = initCov.llt().matrixL();
-  tf::Transform transformNoise; // transformation on original pose from noise
-  unsigned idx = 0;
-  for(Particles::iterator it = m_particles.begin(); it != m_particles.end(); ++it){
-    Vector6d poseNoise;
-    for (unsigned i = 0; i < 6; ++i){
-      poseNoise(i) = m_rngNormal();
-    }
-    Vector6d poseCovNoise = initCovL * poseNoise; // is now drawn according to covariance noise
-    // if a variance is set to 0 => no noise!
-    for (unsigned i = 0; i < 6; ++i){
-      if (std::abs(initCov(i,i)) < 0.00001)
-        poseCovNoise(i) = 0.0;
-    }
-
-
-    transformNoise.setOrigin(tf::Vector3(poseCovNoise(0), poseCovNoise(1), poseCovNoise(2)));
-    tf::Quaternion q;
-    q.setRPY(poseCovNoise(3), poseCovNoise(4),poseCovNoise(5));
-
-    transformNoise.setRotation(q);
-    it->pose = pose;
-
-    if (heights.size() > 0){
-      // distribute particles evenly between levels:
-      it->pose.getOrigin().setZ(heights.at(int(double(idx)/m_particles.size() * heights.size())) + poseHeight);
-    }
-
-    it->pose *= transformNoise;
-
-    it->weight = 1.0/m_particles.size();
-    idx++;
-  }
-
-  ROS_INFO("Pose reset around mean (%f %f %f)", pose.getOrigin().getX(), pose.getOrigin().getY(), pose.getOrigin().getZ());
-
-  // reset internal state:
-  m_motionModel->reset();
-  // force integration of next laser data:
-  m_receivedSensorData = false;
-  m_initialized = true;
-
-
-  // Fix "0" time warning (when initializing pose from RViz)
-  ros::Time stampPublish = msg->header.stamp;
-  if (stampPublish.isZero()){
-    tf::Stamped<tf::Pose> lastOdomPose;
-    m_motionModel->getLastOdomPose(lastOdomPose);
-    stampPublish = lastOdomPose.stamp_;
-    if (stampPublish.isZero())
-       stampPublish = ros::Time::now();
-  
-  }
-  
-  publishPoseEstimate(stampPublish, false);
-}
-
-
-
-
-bool HumanoidLocalization::globalLocalizationCallback(std_srvs::Empty::Request& req, std_srvs::Empty::Response& res)
-{
-
-  initGlobal();
-
-  return true;
-}
-
-void HumanoidLocalization::normalizeWeights() {
-
-  double wmin = std::numeric_limits<double>::max();
-  double wmax = -std::numeric_limits<double>::max();
-
-  for (unsigned i=0; i < m_particles.size(); ++i){
-    double weight = m_particles[i].weight;
-    assert (!isnan(weight));
-    if (weight < wmin)
-      wmin = weight;
-    if (weight > wmax){
-      wmax = weight;
-      m_bestParticleIdx = i;
-    }
-  }
-  if (wmin > wmax){
-    ROS_ERROR_STREAM("Error in weights: min=" << wmin <<", max="<<wmax<<", 1st particle weight="<< m_particles[1].weight<< std::endl);
-
-  }
-
-  double min_normalized_value;
-  if (m_minParticleWeight > 0.0)
-    min_normalized_value = std::max(log(m_minParticleWeight), wmin - wmax);
-  else
-    min_normalized_value = wmin - wmax;
-
-  double max_normalized_value = 0.0; // = log(1.0);
-  double dn = max_normalized_value-min_normalized_value;
-  double dw = wmax-wmin;
-  if (dw == 0.0) dw = 1;
-  double scale = dn/dw;
-  if (scale < 0.0){
-    ROS_WARN("normalizeWeights: scale is %f < 0, dw=%f, dn=%f", scale, dw, dn );
-  }
-  double offset = -wmax*scale;
-  double weights_sum = 0.0;
-
-#pragma omp parallel
-  {
-
-#pragma omp for
-    for (unsigned i = 0; i < m_particles.size(); ++i){
-      double w = m_particles[i].weight;
-      w = exp(scale*w+offset);
-      assert(!isnan(w));
-      m_particles[i].weight = w;
-#pragma omp atomic
-      weights_sum += w;
-    }
-
-    assert(weights_sum > 0.0);
-    // normalize sum to 1:
-#pragma omp for
-    for (unsigned i = 0; i < m_particles.size(); ++i){
-      m_particles[i].weight /= weights_sum;
-    }
-
-  }
-}
-
-double HumanoidLocalization::getCumParticleWeight() const{
-  double cumWeight=0.0;
-
-  //compute the cumulative weights
-  for (Particles::const_iterator it = m_particles.begin(); it != m_particles.end(); ++it){
-    cumWeight += it->weight;
-  }
-
-  return cumWeight;
-}
-
-void HumanoidLocalization::resample(unsigned numParticles){
-
-  if (numParticles <= 0)
-    numParticles = m_numParticles;
-
-  //compute the interval
-  double interval=getCumParticleWeight()/numParticles;
-
-  //compute the initial target weight
-  double target=interval*m_rngUniform();
-
-  //compute the resampled indexes
-  double cumWeight=0;
-  std::vector<unsigned> indices(numParticles);
-
-  unsigned n=0;
-  for (unsigned i = 0; i < m_particles.size(); ++i){
-    cumWeight += m_particles[i].weight;
-    while(cumWeight > target && n < numParticles){
-      if (m_bestParticleIdx >= 0 && i == unsigned(m_bestParticleIdx)){
-        m_bestParticleIdx = n;
-      }
-
-      indices[n++]=i;
-      target+=interval;
-    }
-  }
-  // indices now contains the indices to draw from the particles distribution
-
-  Particles oldParticles = m_particles;
-  m_particles.resize(numParticles);
-  m_poseArray.poses.resize(numParticles);
-  double newWeight = 1.0/numParticles;
-#pragma omp parallel for
-  for (unsigned i = 0; i < numParticles; ++i){
-    m_particles[i].pose = oldParticles[indices[i]].pose;
-    m_particles[i].weight = newWeight;
-  }
-}
-
-void HumanoidLocalization::initGlobal(){
-  ROS_INFO("Initializing with uniform distribution");
-
-  double roll, pitch, z;
-  initZRP(z, roll, pitch);
-
-  m_mapModel->initGlobal(m_particles, z, roll, pitch, m_initNoiseStd, m_rngUniform, m_rngNormal);
-
-
-  ROS_INFO("Global localization done");
-  m_motionModel->reset();
-  m_receivedSensorData = false;
-  m_initialized = true;
-
-  publishPoseEstimate(ros::Time::now(), false);
-
-}
-
-void HumanoidLocalization::publishPoseEstimate(const ros::Time& time, bool publish_eval){
-
-  ////
-  // send all hypotheses as arrows:
-  ////
-
-  m_poseArray.header.stamp = time;
-
-  if (m_poseArray.poses.size() != m_particles.size())
-    m_poseArray.poses.resize(m_particles.size());
-
-#pragma omp parallel for
-  for (unsigned i = 0; i < m_particles.size(); ++i){
-    tf::poseTFToMsg(m_particles[i].pose, m_poseArray.poses[i]);
-  }
-
-  m_poseArrayPub.publish(m_poseArray);
-
-  ////
-  // send best particle as pose and one array:
-  ////
-  geometry_msgs::PoseWithCovarianceStamped p;
-  p.header.stamp = time;
-  p.header.frame_id = m_globalFrameId;
-
-  tf::Pose bestParticlePose;
-  if (m_bestParticleAsMean)
-    bestParticlePose = getMeanParticlePose();
-  else
-    bestParticlePose = getBestParticlePose();
-
-  tf::poseTFToMsg(bestParticlePose,p.pose.pose);
-  m_posePub.publish(p);
-
-  if (publish_eval){
-    m_poseEvalPub.publish(p);
-  }
-
-  geometry_msgs::PoseArray bestPose;
-  bestPose.header = p.header;
-  bestPose.poses.resize(1);
-  tf::poseTFToMsg(bestParticlePose, bestPose.poses[0]);
-  m_bestPosePub.publish(bestPose);
-
-  ////
-  // send incremental odom pose (synced to localization)
-  ////
-  tf::Stamped<tf::Pose> lastOdomPose;
-  if (m_motionModel->getLastOdomPose(lastOdomPose)){
-    geometry_msgs::PoseStamped odomPoseMsg;
-    tf::poseStampedTFToMsg(lastOdomPose, odomPoseMsg);
-    m_poseOdomPub.publish(odomPoseMsg);
-  }
-
-
-  ////
-  // Send tf target->map (where target is typically odom)
-  tf::Stamped<tf::Pose> targetToMapTF;
-  try{
-    tf::Stamped<tf::Pose> baseToMapTF(bestParticlePose.inverse(),time, m_baseFrameId);
-    m_tfListener.transformPose(m_targetFrameId, baseToMapTF, targetToMapTF); // typically target == odom
-  } catch (const tf::TransformException& e){
-    ROS_WARN("Failed to subtract base to %s transform, will not publish pose estimate: %s", m_targetFrameId.c_str(), e.what());
-    return;
-  }
-
-  tf::Transform latestTF(tf::Quaternion(targetToMapTF.getRotation()), tf::Point(targetToMapTF.getOrigin()));
-
-  // We want to send a transform that is good up until a
-  // tolerance time so that odom can be used
-  // see ROS amcl_node
-
-  ros::Duration transformTolerance(m_transformTolerance);
-  ros::Time transformExpiration = (time + transformTolerance);
-
-  tf::StampedTransform tmp_tf_stamped(latestTF.inverse(), transformExpiration, m_globalFrameId, m_targetFrameId);
-  m_latest_transform = tmp_tf_stamped;
-
-  m_tfBroadcaster.sendTransform(tmp_tf_stamped);
-
-}
-
-unsigned HumanoidLocalization::getBestParticleIdx() const{
-  if (m_bestParticleIdx < 0 || m_bestParticleIdx >= m_numParticles){
-    ROS_WARN("Index (%d) of best particle not valid, using 0 instead", m_bestParticleIdx);
-    return 0;
-  }
-
-  return m_bestParticleIdx;
-}
-
-tf::Pose HumanoidLocalization::getParticlePose(unsigned particleIdx) const{
-  return m_particles.at(particleIdx).pose;
-}
-
-tf::Pose HumanoidLocalization::getBestParticlePose() const{
-  return getParticlePose(getBestParticleIdx());
-}
-
-tf::Pose HumanoidLocalization::getMeanParticlePose() const{
-  tf::Pose meanPose = tf::Pose::getIdentity();
-
-  double totalWeight = 0.0;
-
-  meanPose.setBasis(tf::Matrix3x3(0,0,0,0,0,0,0,0,0));
-  for (Particles::const_iterator it = m_particles.begin(); it != m_particles.end(); ++it){
-    meanPose.getOrigin() += it->pose.getOrigin() * it->weight;
-    meanPose.getBasis()[0] += it->pose.getBasis()[0];
-    meanPose.getBasis()[1] += it->pose.getBasis()[1];
-    meanPose.getBasis()[2] += it->pose.getBasis()[2];
-    totalWeight += it->weight;
-  }
-  assert(!isnan(totalWeight));
-
-  //assert(totalWeight == 1.0);
-
-  // just in case weights are not normalized:
-  meanPose.getOrigin() /= totalWeight;
-  // TODO: only rough estimate of mean rotation, asserts normalized weights!
-  meanPose.getBasis() = meanPose.getBasis().scaled(tf::Vector3(1.0/m_numParticles, 1.0/m_numParticles, 1.0/m_numParticles));
-
-  // Apparently we need to normalize again
-  meanPose.setRotation(meanPose.getRotation().normalized());
-
-  return meanPose;
-}
-
-double HumanoidLocalization::nEff() const{
-
-  double sqrWeights=0.0;
-  for (Particles::const_iterator it=m_particles.begin(); it!=m_particles.end(); ++it){
-    sqrWeights+=(it->weight * it->weight);
-  }
-
-  if (sqrWeights > 0.0)
-    return 1./sqrWeights;
-  else
-    return 0.0;
-}
-
-void HumanoidLocalization::toLogForm(){
-  // TODO: linear offset needed?
-#pragma omp parallel for
-  for (unsigned i = 0; i < m_particles.size(); ++i){
-    assert(m_particles[i].weight > 0.0);
-    m_particles[i].weight = log(m_particles[i].weight);
-  }
-}
-
-void HumanoidLocalization::pauseLocalizationCallback(const std_msgs::BoolConstPtr& msg){
-  if (msg->data){
-    if (!m_paused){
-      m_paused = true;
-      ROS_INFO("Localization paused");
-    } else{
-      ROS_WARN("Received a msg to pause localizatzion, but is already paused.");
-    }
-  } else{
-    if (m_paused){
-      m_paused = false;
-      ROS_INFO("Localization resumed");
-      // force laser integration:
-      m_receivedSensorData = false;
-    } else {
-      ROS_WARN("Received a msg to resume localization, is not paused.");
-    }
-
-  }
-
-}
-
-bool HumanoidLocalization::pauseLocalizationSrvCallback(std_srvs::Empty::Request& req, std_srvs::Empty::Response& res)
-{
-  if (!m_paused){
-    m_paused = true;
-    ROS_INFO("Localization paused");
-  } else{
-    ROS_WARN("Received a request to pause localizatzion, but is already paused.");
-  }
-
-  return true;
-}
-
-bool HumanoidLocalization::resumeLocalizationSrvCallback(std_srvs::Empty::Request& req, std_srvs::Empty::Response& res)
-{
-  if (m_paused){
-    m_paused = false;
-    ROS_INFO("Localization resumed");
-    // force next laser integration:
-    m_receivedSensorData = false;
-  } else {
-    ROS_WARN("Received a request to resume localization, but is not paused.");
-  }
-
-  return true;
-}
-
-bool HumanoidLocalization::lookupPoseHeight(const ros::Time& t, double& poseHeight) const{
-  tf::StampedTransform tf;
-  if (m_motionModel->lookupLocalTransform(m_baseFootprintId, t, tf)){
-    poseHeight = tf.getOrigin().getZ();
-    return true;
-  } else
-    return false;
-}
-
-}
-
diff --git a/humanoid_navigation-for-git/humanoid_localization/src/MapModel.cpp b/humanoid_navigation-for-git/humanoid_localization/src/MapModel.cpp
deleted file mode 100644
index 1013e98..0000000
--- a/humanoid_navigation-for-git/humanoid_localization/src/MapModel.cpp
+++ /dev/null
@@ -1,314 +0,0 @@
-// SVN $HeadURL$
-// SVN $Id$
-
-/*
- * 6D localization for humanoid robots
- *
- * Copyright 2009-2012 Armin Hornung, University of Freiburg
- * http://www.ros.org/wiki/humanoid_localization
- *
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, version 3.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-#include <humanoid_localization/MapModel.h>
-
-namespace humanoid_localization{
-MapModel::MapModel(ros::NodeHandle* nh)
-: m_motionMeanZ(0.0),
-  m_motionRangeZ(-1.0), m_motionRangeRoll(-1.0), m_motionRangePitch(-1.0),
-  m_motionObstacleDist(0.2)
-{
-
-  // motion model max ranges (particles have to stay within range)
-  nh->param("motion_mean_z", m_motionMeanZ, m_motionMeanZ);
-  nh->param("motion_range_z", m_motionRangeZ, m_motionRangeZ);
-  nh->param("motion_range_roll", m_motionRangeRoll, m_motionRangeRoll);
-  nh->param("motion_range_pitch", m_motionRangePitch, m_motionRangePitch);
-  // this is not correctly used at the moment:
-  //nh->param("motion_occupied_radius", m_motionObstacleDist, m_motionObstacleDist);
-
-}
-
-MapModel::~MapModel(){
-
-}
-
-
-boost::shared_ptr<octomap::OcTree> MapModel::getMap() const{
-  return m_map;
-}
-
-void MapModel::verifyPoses(Particles& particles){
-  double minX, minY, minZ, maxX, maxY, maxZ;
-  m_map->getMetricMin(minX, minY, minZ);
-  m_map->getMetricMax(maxX, maxY, maxZ);
-
-  // find min. particle weight:
-  double minWeight = std::numeric_limits<double>::max();
-  for (Particles::iterator it = particles.begin(); it != particles.end(); ++it) {
-    if (it->weight < minWeight)
-      minWeight = it->weight;
-
-  }
-
-  minWeight -= 200;
-
-  unsigned numWall = 0;
-  unsigned numOut = 0;
-  unsigned numMotion = 0;
-
-
-  // TODO possible speedup: cluster particles by grid voxels first?
-  // iterate over samples, multi-threaded:
-#pragma omp parallel for
-  for (unsigned i = 0; i < particles.size(); ++i){
-
-    octomap::point3d position(particles[i].pose.getOrigin().getX(),
-                              particles[i].pose.getOrigin().getY(),
-                              particles[i].pose.getOrigin().getZ());
-
-    // see if outside of map bounds:
-    if (position(0) < minX || position(0) > maxX
-        ||	position(1) < minY || position(1) > maxY
-        ||	position(2) < minZ || position(2) > maxZ)
-    {
-      particles[i].weight = minWeight;
-#pragma omp atomic
-      numOut++;
-    } else {
-
-      // see if occupied cell:
-      if (this->isOccupied(position)){
-        particles[i].weight = minWeight;
-#pragma omp atomic
-        numWall++;
-      } else {
-        // see if current pose is has a valid walking height:
-        if (m_motionRangeZ >= 0.0 &&
-            (std::abs(particles[i].pose.getOrigin().getZ() - getFloorHeight(particles[i].pose) - m_motionMeanZ)
-              > m_motionRangeZ))
-        {
-          particles[i].weight = minWeight;
-#pragma omp atomic
-          numMotion++;
-        } else if (m_motionRangePitch >= 0.0 || m_motionRangeRoll >= 0.0){
-
-          double yaw, pitch, roll;
-          particles[i].pose.getBasis().getRPY(roll, pitch, yaw);
-
-          if ((m_motionRangePitch >= 0.0 && std::abs(pitch) > m_motionRangePitch)
-              || (m_motionRangeRoll >= 0.0 && std::abs(roll) > m_motionRangeRoll))
-          {
-            particles[i].weight = minWeight;
-#pragma omp atomic
-            numMotion++;
-          }
-        }
-      }
-    }
-  } // end loop over particles
-
-  if (numWall > 0 || numOut > 0 || numMotion > 0){
-    ROS_INFO("Particle weights minimized: %d out of map, %d in obstacles, %d out of motion range", numOut, numWall, numMotion);
-  }
-
-  if (numOut + numWall >= particles.size()){
-    ROS_WARN("All particles are out of the valid map area or in obstacles!");
-  }
-
-}
-
-
-void MapModel::initGlobal(Particles& particles, double z, double roll, double pitch,
-                          const Vector6d& initNoise,
-                          UniformGeneratorT& rngUniform, NormalGeneratorT& rngNormal){
-  double sizeX,sizeY,sizeZ, minX, minY, minZ;
-  m_map->getMetricSize(sizeX,sizeY,sizeZ);
-  m_map->getMetricMin(minX, minY, minZ);
-
-  double weight = 1.0 / particles.size();
-  Particles::iterator it = particles.begin();
-  while (true){
-    if (it == particles.end())
-      break;
-    // obtain a pose hypothesis:
-    double x = minX + sizeX * rngUniform();
-    double y = minY + sizeY * rngUniform();
-    std::vector<double> z_list;
-    getHeightlist(x, y, 0.6,z_list);
-
-    for (unsigned zIdx = 0; zIdx < z_list.size(); zIdx++){
-      if (it == particles.end())
-        break;
-
-      // not needed => we already know that z contains valid poses
-      // distance map: used distance from obstacles:
-      //std::abs(node->getLogOdds()) < 0.1){
-      //			if (!isOccupied(octomap::point3d(x, y, z[zIdx]))){
-
-      it->pose.getOrigin().setX(x);
-      it->pose.getOrigin().setY(y);
-      // TODO: sample z, roll, pitch
-      it->pose.getOrigin().setZ(z_list.at(zIdx) + z + rngNormal() * initNoise(2));
-      double yaw = rngUniform() * 2 * M_PI  -M_PI;
-      it->pose.setRotation(tf::createQuaternionFromRPY(roll, pitch, yaw));
-      it->weight = weight;
-      it++;
-    }
-  }
-
-}
-
-void MapModel::getHeightlist(double x, double y, double totalHeight, std::vector<double>& heights){
-  double minX, minY, minZ, maxX, maxY, maxZ;
-  m_map->getMetricMin(minX, minY, minZ);
-  m_map->getMetricMax(maxX, maxY, maxZ);
-
-  double res = m_map->getResolution();
-
-  double z =  maxZ-res/2.0;
-  double lastZ = z + res;
-
-  while (z >= minZ){
-    if (isOccupied(octomap::point3d(x, y, z))){
-      if (lastZ - z >= totalHeight + res){
-        heights.push_back(z+ res/2.0);
-      }
-      lastZ = z;
-    }
-
-    z -= res;
-  }
-}
-
-bool MapModel::isOccupied(const octomap::point3d& position) const{
-  octomap::OcTreeNode* mapNode = m_map->search(position);
-  if (mapNode)
-    return isOccupied(mapNode);
-  else return false;
-}
-
-
-///////////////////////////////////////////////////////////////////////
-// Distance Map (Endpoint Model)
-///////////////////////////////////////////////////////////////////////
-
-DistanceMap::DistanceMap(ros::NodeHandle* nh)
-: MapModel(nh)
-{
-  ROS_ERROR("Distance map implementation is currently not supported");
-  std::string mapFileName;
-  nh->getParam("map_file_dist", mapFileName);
-
-// TODO: use FileIO, try octree<float>
-//  octomap::AbstractOcTree* tree = octomap_msgs::fullMsgDataToMap(resp.map.data);
-//  if (tree){
-//    ROS_INFO("Received tree type %s",tree->getTreeType().c_str());
-//    //octree = dynamic_cast<OcTree*>(tree);
-//  }
-
-  octomap::OcTree* tree = dynamic_cast<octomap::OcTree*>(octomap::AbstractOcTree::read(mapFileName));
-  if (tree){
-    m_map.reset(tree);
-  }
-
-  if (!m_map|| m_map->size() <= 1){
-    ROS_ERROR("Distance map file loaded from \"%s\" is erroneous, exiting...", mapFileName.c_str());
-    exit(-1);
-  }
-  double x,y,z;
-  m_map->getMetricSize(x,y,z);
-  ROS_INFO("Distance map initialized with %zd nodes (%.2f x %.2f x %.2f m)", m_map->size(), x,y,z);
-
-}
-
-DistanceMap::~DistanceMap(){
-
-}
-
-bool DistanceMap::isOccupied(octomap::OcTreeNode* node) const{
-  if (std::abs(node->getLogOdds()) < m_map->getResolution())
-    return true;
-  else
-    return false;
-}
-
-double DistanceMap::getFloorHeight(const tf::Transform& pose) const{
-  // TODO:
-  ROS_ERROR("DistanceMap::getFloorHeight not implemented yet!");
-
-  return 0.0;
-}
-
-///////////////////////////////////////////////////////////////////////
-// Occupancy Map (Raycasting)
-///////////////////////////////////////////////////////////////////////
-
-
-OccupancyMap::OccupancyMap(ros::NodeHandle* nh)
-: MapModel(nh)
-{
-  std::string servname = "octomap_binary";
-  ROS_INFO("Requesting the map from %s...", nh->resolveName(servname).c_str());
-  octomap_msgs::GetOctomap::Request req;
-  octomap_msgs::GetOctomap::Response resp;
-  while(nh->ok() && !ros::service::call(servname, req, resp))
-  {
-    ROS_WARN("Request to %s failed; trying again...", nh->resolveName(servname).c_str());
-    usleep(1000000);
-  }
-
-
-// Groovy:
-#if ROS_VERSION_MINIMUM(1, 9, 0)
-  m_map.reset(dynamic_cast<octomap::OcTree*>(octomap_msgs::binaryMsgToMap(resp.map)));
-#else  // Fuerte:
-  m_map.reset(octomap_msgs::binaryMsgDataToMap(resp.map.data));
-#endif
-
-  if (!m_map || m_map->size() <= 1){
-    ROS_ERROR("Occupancy map is erroneous, exiting...");
-    exit(-1);
-  }
-  double x,y,z;
-  m_map->getMetricSize(x,y,z);
-  ROS_INFO("Occupancy map initialized with %zd nodes (%.2f x %.2f x %.2f m), %f m res.", m_map->size(), x,y,z, m_map->getResolution());
-  
-  m_map->writeBinary("/tmp/octomap_loc");
-
-}
-
-OccupancyMap::~OccupancyMap(){
-
-}
-
-bool OccupancyMap::isOccupied(octomap::OcTreeNode* node) const{
-  return m_map->isNodeOccupied(node);
-}
-
-
-double OccupancyMap::getFloorHeight(const tf::Transform& pose)const {
-  octomap::point3d end;
-  if (m_map->castRay(octomap::pointTfToOctomap(pose.getOrigin()), octomap::point3d(0.0, 0.0, -1.0), end, false)){
-    // add resolution/2 so height is above voxel boundary:
-    return end.z()+m_map->getResolution()/2.0;
-  } else {
-    ROS_WARN("getFloorHeight raycast did not succeed, using 0.0");
-    return 0.0;
-  }
-
-}
-
-}
-
diff --git a/humanoid_navigation-for-git/humanoid_localization/src/MotionModel.cpp b/humanoid_navigation-for-git/humanoid_localization/src/MotionModel.cpp
deleted file mode 100644
index e2fc4f7..0000000
--- a/humanoid_navigation-for-git/humanoid_localization/src/MotionModel.cpp
+++ /dev/null
@@ -1,275 +0,0 @@
-// SVN $HeadURL$
-// SVN $Id$
-
-/*
- * 6D localization for humanoid robots
- *
- * Copyright 2009-2012 Armin Hornung, University of Freiburg
- * http://www.ros.org/wiki/humanoid_localization
- *
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, version 3.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-#include <humanoid_localization/MotionModel.h>
-
-using namespace tf;
-using namespace std;
-
-namespace humanoid_localization{
-
-MotionModel::MotionModel(ros::NodeHandle* nh, EngineT* rngEngine, tf::TransformListener* tf,
-                         const std::string& odomFrameId, const std::string& baseFrameId)
-: m_tfListener(tf),
-  m_rngNormal(*rngEngine, NormalDistributionT(0.0, 1.0)),
-  m_rngUniform(*rngEngine, UniformDistributionT(0.0, 1.0)),
-  m_odomFrameId(odomFrameId), m_baseFrameId(baseFrameId),
-  m_firstOdometryReceived(false)
-
-{
-
-  // motion model noise parameters:
-  m_odomNoise2D = Eigen::Matrix3d::Zero();
-  // noise affecting x direction (sq. / variance)
-  nh->param("motion_noise/xx", m_odomNoise2D(0,0), 0.01);
-  nh->param("motion_noise/xy", m_odomNoise2D(0,1), 0.01);
-  nh->param("motion_noise/xt", m_odomNoise2D(0,2), 0.0001);
-  // noise affecting y direction (sq. / variance)
-  nh->param("motion_noise/yx", m_odomNoise2D(1,0), 0.01);
-  nh->param("motion_noise/yy", m_odomNoise2D(1,1), 0.01);
-  nh->param("motion_noise/yt", m_odomNoise2D(1,2), 0.0001);
-  // noise affecting orientation (sq. / variance)
-  nh->param("motion_noise/tx", m_odomNoise2D(2,0), 0.5);
-  nh->param("motion_noise/ty", m_odomNoise2D(2,1), 0.5);
-  nh->param("motion_noise/tt", m_odomNoise2D(2,2), 0.01);
-
-  // std. devs for z, roll & pitch (depend on amount of transl.)
-  nh->param("motion_noise/z", m_odomNoiseZ, 0.01);
-  nh->param("motion_noise/roll", m_odomNoiseRoll, 0.05);
-  nh->param("motion_noise/pitch", m_odomNoisePitch, 0.1);
-
-  // old parameters, warn that renamed:
-  if (nh->hasParam("motion_noise/x"))
-    ROS_WARN("Parameter motion_noise/x is no longer used, use variances motion_noise/[xx|xy|xt] instead");
-
-  if (nh->hasParam("motion_noise/y"))
-    ROS_WARN("Parameter motion_noise/y is no longer used, use variances motion_noise/[yx|yy|yt] instead");
-
-  if (nh->hasParam("motion_noise/yaw"))
-    ROS_WARN("Parameter motion_noise/yaw is no longer used, use variances motion_noise/[tx|ty|tt] instead");
-
-  // odometry calibration (systematic drift correction)
-  m_odomCalibration2D = Eigen::Matrix3d::Identity();
-  nh->param("motion_calib/xx", m_odomCalibration2D(0,0), 1.0);
-  nh->param("motion_calib/xy", m_odomCalibration2D(0,1), 0.0);
-  nh->param("motion_calib/xt", m_odomCalibration2D(0,2), 0.0);
-  nh->param("motion_calib/yx", m_odomCalibration2D(1,0), 0.0);
-  nh->param("motion_calib/yy", m_odomCalibration2D(1,1), 1.0);
-  nh->param("motion_calib/yt", m_odomCalibration2D(1,2), 0.0);
-  nh->param("motion_calib/tx", m_odomCalibration2D(2,0), 0.0);
-  nh->param("motion_calib/ty", m_odomCalibration2D(2,1), 0.0);
-  nh->param("motion_calib/tt", m_odomCalibration2D(2,2), 1.0);
-
-
-  reset();
-
-}
-
-MotionModel::~MotionModel() {
-
-}
-
-
-tf::Transform MotionModel::odomTransformNoise(const tf::Transform& odomTransform){
-  // vectors (x,y,theta) in 2D for squared motion and variance
-  Eigen::Vector3d motion2D_sq, motion_variance;
-  double yaw = tf::getYaw(odomTransform.getRotation());
-  motion2D_sq(0) = odomTransform.getOrigin().x() * odomTransform.getOrigin().x();
-  motion2D_sq(1) = odomTransform.getOrigin().y() * odomTransform.getOrigin().y();
-  motion2D_sq(2) = yaw * yaw;
-
-  motion_variance = m_odomNoise2D * motion2D_sq;
-
-  // use std.normal dev as basis:
-  // X is normally distributed (mean 0, dev 1)
-  // => Y = aX + b is also normally distributed with mean b and deviation a
-
-  // absolute amount of translation, used to scale noise in z, roll & pitch
-  // (about 1-2cm for each update step)
-  const double d = odomTransform.getOrigin().length();
-  return tf::Transform(tf::createQuaternionFromRPY(
-        m_rngNormal() * d * m_odomNoiseRoll,      // roll
-        m_rngNormal() * d * m_odomNoisePitch,     // pitch
-        m_rngNormal() * sqrt(motion_variance(2))),// yaw
-      tf::Vector3(
-        m_rngNormal() * sqrt(motion_variance(0)), // x
-        m_rngNormal() * sqrt(motion_variance(1)), // y
-        m_rngNormal() * d * m_odomNoiseZ));       // z
-}
-
-void MotionModel::reset(){
-  m_firstOdometryReceived = false;
-}
-
-void MotionModel::applyOdomTransform(tf::Pose& particlePose, const tf::Transform& odomTransform){
-  particlePose *= calibrateOdometry(odomTransform) * odomTransformNoise(odomTransform);
-}
-
-void MotionModel::applyOdomTransform(Particles& particles, const tf::Transform& odomTransform){
-  const tf::Transform calibratedOdomTransform = calibrateOdometry(odomTransform);
-
-  for (unsigned i=0; i < particles.size(); ++i){
-    particles[i].pose *= calibratedOdomTransform * odomTransformNoise(odomTransform);
-  }
-}
-
-bool MotionModel::applyOdomTransformTemporal(Particles& particles,const ros::Time& t, double dt){
-  ros::WallTime startTime = ros::WallTime::now();
-
-  // first see if default time is available
-  tf::Transform odomTransform;
-  if (!lookupOdomTransform(t, odomTransform))
-    return false;
-
-  tf::Transform timeSampledTransform;
-  ros::Duration maxDuration;
-  if (dt > 0.0){
-    ros::Time maxTime;
-    std::string errorString;
-    m_tfListener->getLatestCommonTime(m_odomFrameId, m_baseFrameId, maxTime, &errorString);
-    maxDuration = maxTime - t;
-  }
-
-  for (unsigned i=0; i < particles.size(); ++i){
-    if (dt > 0.0){
-      ros::Duration duration(m_rngUniform()*dt -dt/2.0);
-      // TODO: time t is time of first measurement in scan!
-      if (duration > maxDuration)
-        duration = maxDuration;
-
-      if (lookupOdomTransform(t + duration, timeSampledTransform))
-        applyOdomTransform(particles[i].pose, timeSampledTransform);
-      else{
-        ROS_WARN("Could not lookup temporal odomTransform");
-        applyOdomTransform(particles[i].pose, odomTransform);
-      }
-    } else{
-      applyOdomTransform(particles[i].pose, odomTransform);
-    }
-  }
-
-  double dwalltime = (ros::WallTime::now() - startTime).toSec();
-  ROS_INFO_STREAM("OdomTransformTemporal took " << dwalltime << "s ");
-
-
-  return true;
-}
-
-tf::Transform MotionModel::calibrateOdometry(const tf::Transform& odomTransform) const {
-  Eigen::Vector3d odomPose2D;
-  double roll, pitch;
-  odomPose2D(0) = odomTransform.getOrigin().getX();
-  odomPose2D(1) = odomTransform.getOrigin().getY();
-  odomPose2D(2) = tf::getYaw(odomTransform.getRotation());
-  odomTransform.getBasis().getRPY(roll, pitch, odomPose2D(2));
-
-  odomPose2D = m_odomCalibration2D * odomPose2D;
-
-  return tf::Transform(tf::createQuaternionFromRPY(roll, pitch, odomPose2D(2)),
-                       tf::Vector3(odomPose2D(0), odomPose2D(1), odomTransform.getOrigin().getZ()));
-
-
-}
-
-bool MotionModel::lookupOdomTransform(const ros::Time& t, tf::Transform& odomTransform) const{
-  tf::Stamped<tf::Pose> odomPose;
-
-  if (t <= m_lastOdomPose.stamp_){
-    ROS_WARN("Looking up OdomTransform that is %f ms older than the last odomPose!",
-             (m_lastOdomPose.stamp_ - t).toSec()/1000.0);
-  }
-
-  if (!lookupOdomPose(t, odomPose))
-    return false;
-
-  odomTransform = computeOdomTransform(odomPose);
-  return true;
-}
-
-tf::Transform MotionModel::computeOdomTransform(const tf::Transform currentPose) const{
-  if (m_firstOdometryReceived){
-    return m_lastOdomPose.inverse() * currentPose;
-  } else{
-    return tf::Transform(tf::createIdentityQuaternion(), tf::Vector3(0,0,0));
-  }
-
-}
-
-void MotionModel::storeOdomPose(const tf::Stamped<tf::Pose>& odomPose){
-  m_firstOdometryReceived = true;
-  if (odomPose.stamp_ <= m_lastOdomPose.stamp_){
-    ROS_WARN("Trying to store an OdomPose that is older or equal than the current in the MotionModel, ignoring!");
-  } else {
-    m_lastOdomPose = odomPose;
-  }
-
-}
-
-
-bool MotionModel::lookupOdomPose(const ros::Time& t, tf::Stamped<tf::Pose>& odomPose) const
-{
-  tf::Stamped<tf::Pose> ident (tf::Transform(tf::createIdentityQuaternion(),
-                                             tf::Vector3(0,0,0)), t, m_baseFrameId);
-
-  try
-  {
-    m_tfListener->transformPose(m_odomFrameId, ident, odomPose);
-  }
-  catch(tf::TransformException& e)
-  {
-    ROS_WARN("Failed to compute odom pose, skipping scan (%s)", e.what());
-    return false;
-  }
-
-  return true;
-}
-
-
-bool MotionModel::lookupLocalTransform(const std::string& targetFrame, const ros::Time& t,
-                                       tf::StampedTransform& localTransform) const
-{
-  try
-  {
-    m_tfListener->lookupTransform(targetFrame, m_baseFrameId, t, localTransform);
-  }
-  catch(tf::TransformException& e)
-  {
-    ROS_WARN("Failed to lookup local transform (%s)", e.what());
-    return false;
-  }
-
-  return true;
-}
-
-bool MotionModel::getLastOdomPose(tf::Stamped<tf::Pose>& lastOdomPose) const{
-  if (m_firstOdometryReceived){
-    lastOdomPose = m_lastOdomPose;
-    return true;
-  } else{
-    return false;
-  }
-
-}
-
-}
-
diff --git a/humanoid_navigation-for-git/humanoid_localization/src/ObservationModel.cpp b/humanoid_navigation-for-git/humanoid_localization/src/ObservationModel.cpp
deleted file mode 100644
index 78291ee..0000000
--- a/humanoid_navigation-for-git/humanoid_localization/src/ObservationModel.cpp
+++ /dev/null
@@ -1,85 +0,0 @@
-// SVN $HeadURL$
-// SVN $Id$
-
-/*
- * 6D localization for humanoid robots
- *
- * Copyright 2009-2012 Armin Hornung, University of Freiburg
- * http://www.ros.org/wiki/humanoid_localization
- *
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, version 3.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-#include <humanoid_localization/ObservationModel.h>
-
-using namespace std;
-using namespace tf;
-
-namespace humanoid_localization{
-
-ObservationModel::ObservationModel(ros::NodeHandle* nh, boost::shared_ptr<MapModel> mapModel, EngineT* rngEngine )
-: m_mapModel(mapModel),
-  m_rngNormal(*rngEngine, NormalDistributionT(0.0, 1.0)),
-  m_rngUniform(*rngEngine, UniformDistributionT(0.0, 1.0)),
-  m_weightRoll(1.0), m_weightPitch(1.0), m_weightZ(1.0),
-  m_sigmaZ(0.02), m_sigmaRoll(0.05), m_sigmaPitch(0.05),
-  m_use_squared_error(false)
-{
-
-  m_map = m_mapModel->getMap();
-
-  nh->param("weight_factor_roll", m_weightRoll, m_weightRoll);
-  nh->param("weight_factor_pitch", m_weightPitch, m_weightPitch);
-  nh->param("weight_factor_z", m_weightZ, m_weightZ);
-  nh->param("motion_sigma_z", m_sigmaZ, m_sigmaZ);
-  nh->param("motion_sigma_roll", m_sigmaRoll, m_sigmaRoll);
-  nh->param("motion_sigma_pitch", m_sigmaPitch, m_sigmaPitch);
-  nh->param("obs_squared_distance", m_use_squared_error, m_use_squared_error);
-
-  if (m_sigmaZ <= 0.0 || m_sigmaRoll <= 0.0 || m_sigmaPitch <= 0.0){
-    ROS_ERROR("Sigma (std.dev) needs to be > 0 in ObservationModel");
-  }
-}
-
-ObservationModel::~ObservationModel() {
-}
-
-void ObservationModel::integratePoseMeasurement(Particles& particles, double poseRoll, double posePitch, const tf::StampedTransform& footprintToTorso){
-  // TODO: move to HumanoidLocalization, skip individual parts if z/rp constrained
-  double poseHeight = footprintToTorso.getOrigin().getZ();
-  ROS_DEBUG("Pose measurement z=%f R=%f P=%f", poseHeight, poseRoll, posePitch);
-  // TODO cluster xy of particles => speedup
-#pragma omp parallel for
-  for (unsigned i=0; i < particles.size(); ++i){
-    // integrate IMU meas.:
-    double roll, pitch, yaw;
-    particles[i].pose.getBasis().getRPY(roll, pitch, yaw);
-    particles[i].weight += m_weightRoll * logLikelihood(poseRoll - roll, m_sigmaRoll);
-    particles[i].weight += m_weightPitch * logLikelihood(posePitch - pitch, m_sigmaPitch);
-
-    // integrate height measurement (z)
-    double heightError;
-    if (getHeightError(particles[i],footprintToTorso, heightError))
-      particles[i].weight += m_weightZ * logLikelihood(heightError, m_sigmaZ);
-
-
-  }
-
-}
-
-void ObservationModel::setMap(boost::shared_ptr<octomap::OcTree> map){
-  m_map = map;
-}
-
-}
diff --git a/humanoid_navigation-for-git/humanoid_localization/src/RaycastingModel.cpp b/humanoid_navigation-for-git/humanoid_localization/src/RaycastingModel.cpp
deleted file mode 100644
index 7e74c0d..0000000
--- a/humanoid_navigation-for-git/humanoid_localization/src/RaycastingModel.cpp
+++ /dev/null
@@ -1,151 +0,0 @@
-/*
- * 6D localization for humanoid robots
- *
- * Copyright 2009-2012 Armin Hornung, University of Freiburg
- * http://www.ros.org/wiki/humanoid_localization
- *
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, version 3.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-#include <humanoid_localization/RaycastingModel.h>
-
-#include <pcl/point_types.h>
-#include <pcl/ros/conversions.h>
-#include <pcl_ros/transforms.h>
-#include <octomap_ros/conversions.h>
-
-namespace humanoid_localization{
-
-RaycastingModel::RaycastingModel(ros::NodeHandle* nh, boost::shared_ptr<MapModel> mapModel, EngineT * rngEngine)
-: ObservationModel(nh, mapModel, rngEngine)
-{
-  // params:
-  nh->param("raycasting/z_hit", m_zHit, 0.8);
-  nh->param("raycasting/z_short", m_zShort, 0.1);
-  nh->param("raycasting/z_max", m_zMax, 0.05);
-  nh->param("raycasting/z_rand", m_zRand, 0.05);
-  nh->param("raycasting/sigma_hit", m_sigmaHit, 0.02);
-  nh->param("raycasting/lambda_short", m_lambdaShort, 0.1);
-
-  if (m_zMax <= 0.0){
-    ROS_ERROR("raycasting/z_max needs to be > 0.0");
-  }
-
-  if (m_zRand <= 0.0){
-    ROS_ERROR("raycasting/z_rand needs to be > 0.0");
-  }
-   #pragma omp parallel
-   #pragma omp critical
-    {
-      if (omp_get_thread_num() == 0){
-        ROS_INFO("Using %d threads in RaycastingModel", omp_get_num_threads());
-      }
-    }
-}
-
-RaycastingModel::~RaycastingModel(){
-
-}
-
-void RaycastingModel::integrateMeasurement(Particles& particles, const PointCloud& pc, const std::vector<float>& ranges, float max_range, const tf::Transform& base_to_laser){
-  assert(pc.size() == ranges.size());
-
-  if (!m_map){
-    ROS_ERROR("Map file is not set in raycasting");
-    return;
-  }
-  // iterate over samples, multi-threaded:
-#pragma omp parallel for
-  for (unsigned i=0; i < particles.size(); ++i){
-    Eigen::Matrix4f globalLaserOrigin;
-    tf::Transform globalLaserOriginTf = particles[i].pose * base_to_laser;
-    pcl_ros::transformAsMatrix(globalLaserOriginTf, globalLaserOrigin);
-
-    // raycasting origin
-    octomap::point3d originP(globalLaserOriginTf.getOrigin().x(),
-                             globalLaserOriginTf.getOrigin().y(),
-                             globalLaserOriginTf.getOrigin().z());
-    PointCloud pc_transformed;
-    pcl::transformPointCloud(pc, pc_transformed, globalLaserOrigin);
-
-    // iterate over beams:
-    PointCloud::const_iterator pc_it = pc_transformed.begin();
-    std::vector<float>::const_iterator ranges_it = ranges.begin();
-    for ( ; pc_it != pc_transformed.end(); ++pc_it, ++ranges_it){
-
-      double p = 0.0; // probability for weight
-
-      if (*ranges_it <= max_range){
-
-        // direction of ray in global (map) coords
-        octomap::point3d direction(pc_it->x , pc_it->y, pc_it->z);
-        direction = direction - originP;
-
-        // TODO: check first if endpoint is within map?
-        octomap::point3d end;
-        // raycast in OctoMap, we need to cast a little longer than max_range
-        // to correct for particle drifts away from obstacles
-        if(m_map->castRay(originP,direction, end, true, 1.5*max_range)){
-          assert(m_map->isNodeOccupied(m_map->search(end)));
-          float raycastRange = (originP - end).norm();
-          float z = raycastRange - *ranges_it;
-          float sigma_scaled = m_sigmaHit;
-          if (m_use_squared_error)
-             sigma_scaled = (*ranges_it) * (*ranges_it) * (m_sigmaHit);
-
-          // obstacle hit:
-          p = m_zHit / (SQRT_2_PI * sigma_scaled) * exp(-(z * z) / (2 * sigma_scaled * sigma_scaled));
-
-          // short range:
-          if (*ranges_it <= raycastRange)
-            p += m_zShort * m_lambdaShort * exp(-m_lambdaShort* (*ranges_it)) / (1-exp(-m_lambdaShort*raycastRange));
-
-          // random measurement:
-          p += m_zRand / max_range;
-        } else { // racasting did not hit, but measurement is no maxrange => random?
-          p = m_zRand / max_range;
-        }
-
-      } else{ // maximum range
-        p = m_zMax;
-      }
-
-      // add log-likelihood
-      // (note: likelihood can be larger than 1!)
-      assert(p > 0.0);
-      particles[i].weight += log(p);
-
-    } // end of loop over scan
-
-  } // end of loop over particles
-
-
-}
-
-bool RaycastingModel::getHeightError(const Particle& p, const tf::StampedTransform& footprintToBase, double& heightError) const{
-
-  octomap::point3d direction = octomap::pointTfToOctomap(footprintToBase.inverse().getOrigin());
-  octomap::point3d origin = octomap::pointTfToOctomap(p.pose.getOrigin());
-  octomap::point3d end;
-  // cast ray to bottom:
-  if (!m_map->castRay(origin, direction, end, true, 2*direction.norm()))
-    return false;
-
-  heightError =  std::max(0.0, std::abs((origin-end).z() - footprintToBase.getOrigin().z()) - m_map->getResolution());
-  //ROS_INFO("Height error: %f", heightError);
-
-  return true;
-}
-
-}
diff --git a/humanoid_navigation-for-git/humanoid_localization/src/localization_node.cpp b/humanoid_navigation-for-git/humanoid_localization/src/localization_node.cpp
deleted file mode 100644
index 6545c7a..0000000
--- a/humanoid_navigation-for-git/humanoid_localization/src/localization_node.cpp
+++ /dev/null
@@ -1,44 +0,0 @@
-// SVN $HeadURL$
-// SVN $Id$
-
-/*
- * 6D localization for humanoid robots
- *
- * Copyright 2009-2012 Armin Hornung, University of Freiburg
- * http://www.ros.org/wiki/humanoid_localization
- *
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, version 3.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-#include <ros/ros.h>
-#include <humanoid_localization/HumanoidLocalization.h>
-
-int main(int argc, char** argv){
-  ros::init(argc, argv, "humanoid_localization");
-
-  ros::NodeHandle private_nh("~");
-  unsigned seed;
-  int iseed;
-  private_nh.param("seed", iseed, -1);
-  if(iseed == -1)
-    seed = static_cast<unsigned int>(std::time(0));
-  else
-    seed = static_cast<unsigned int>(iseed);
-
-  humanoid_localization::HumanoidLocalization localization(seed);
-
-  ros::spin();
-
-  return 0;
-}
diff --git a/humanoid_navigation-for-git/humanoid_navigation/CHANGELOG.rst b/humanoid_navigation-for-git/humanoid_navigation/CHANGELOG.rst
deleted file mode 100644
index 77fc314..0000000
--- a/humanoid_navigation-for-git/humanoid_navigation/CHANGELOG.rst
+++ /dev/null
@@ -1,41 +0,0 @@
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-Changelog for package humanoid_navigation
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-0.4.1 (2016-09-05)
-------------------
-* humanoid_navigation : removed hrl_kinematics from runtime dependancy
-* catkinize the stack
-* humanoid_planner_2d on gridmaps, provides a lightweight wrapper around SBPL
-
-* Contributors: Armin Hornung, Vincent Rabaud, enriquefernandez
-
-0.4.0 (2013-01-10)
-------------------
-* humanoid_localization added to humanoid_navigation, currently supports 6D localization from laser, odometry and IMU
-
-* Contributors: Armin Hornung, Daniel Maier, Johannes Garimort
-
-0.3.1 (2012-06-15)
-------------------
-* Fixed gridmap_2d and footstep_planner to be used with ros fuerte and sbpl package
-
-* Contributors: Armin Hornung, Johannes Garimort
-
-0.3.0 (2012-05-29)
-------------------
-* humanoid_navigation now compatible with electric and fuerte
-
-* Contributors: Armin Hornung, Johannes Garimort
-
-0.2.0 (2011-11-28)
-------------------
-* stack.xml and manifest updated in footstep_planner to use SBPL instead of D* lite, enabling ARA* and AD* for search with anytime capabilities
-
-* Contributors: Armin Hornung, Johannes Garimort
-
-0.1.0 (2011-05-03)
-------------------
-* New humanoid_navigation stack created
-
-* Contributors: Armin Hornung, Johannes Garimort
diff --git a/humanoid_navigation-for-git/humanoid_navigation/CMakeLists.txt b/humanoid_navigation-for-git/humanoid_navigation/CMakeLists.txt
deleted file mode 100644
index 318dd41..0000000
--- a/humanoid_navigation-for-git/humanoid_navigation/CMakeLists.txt
+++ /dev/null
@@ -1,4 +0,0 @@
-cmake_minimum_required(VERSION 2.8.3)
-project(humanoid_navigation)
-find_package(catkin REQUIRED)
-catkin_metapackage()
diff --git a/humanoid_navigation-for-git/humanoid_navigation/package.xml b/humanoid_navigation-for-git/humanoid_navigation/package.xml
deleted file mode 100644
index 4250fd2..0000000
--- a/humanoid_navigation-for-git/humanoid_navigation/package.xml
+++ /dev/null
@@ -1,25 +0,0 @@
-<package>
-  <name>humanoid_navigation</name>
-  <version>0.4.1</version>
-  <description>
-        <p>This stack contains packages for humanoid (biped) navigation,
-        developed at the <a href="http://hrl.informatik.uni-freiburg.de/">Humanoid Robots Lab</a>
-    at the Albert-Ludwigs-Universitat in Freiburg, Germany.
-   </p>
-  </description>
-  <maintainer email="HornungA@informatik.uni-freiburg.de">Armin Hornung</maintainer>
-  <maintainer email="aravindadp@gmail.com">Pramuditha Aravinda</maintainer>
-  <author>Armin Hornung</author>
-  <license>BSD,GPL 3</license>
-  <url>http://ros.org/wiki/humanoid_navigation</url>
-
-  <buildtool_depend>catkin</buildtool_depend>
-
-  <run_depend>humanoid_localization</run_depend>
-  <run_depend>footstep_planner</run_depend>
-  <run_depend>gridmap_2d</run_depend>
-
-  <export>
-    <metapackage/>
-  </export>
-</package>
diff --git a/humanoid_navigation-for-git/humanoid_planner_2d/CHANGELOG.rst b/humanoid_navigation-for-git/humanoid_planner_2d/CHANGELOG.rst
deleted file mode 100644
index d9ef8c6..0000000
--- a/humanoid_navigation-for-git/humanoid_planner_2d/CHANGELOG.rst
+++ /dev/null
@@ -1,22 +0,0 @@
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-Changelog for package humanoid_planner_2d
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-0.4.1 (2016-09-05)
-------------------
-* catkinize the stack
-* humanoid_planner_2d on gridmaps, provides a lightweight wrapper around SBPL
-
-* enhancements:
-
-  * check if goal / start reachable before planning
-  * adding option to find SBPL overlay, reducing output
-  * Getters for robot (inflation) radius, path costs from SBPL
-  * Add another planning method (double)
-
-* fixes:
-
-  * Fix map inflation for planning
-
-* Contributors: Armin Hornung, Vincent Rabaud, enriquefernandez
-
diff --git a/humanoid_navigation-for-git/humanoid_planner_2d/CMakeLists.txt b/humanoid_navigation-for-git/humanoid_planner_2d/CMakeLists.txt
deleted file mode 100644
index 6b488c0..0000000
--- a/humanoid_navigation-for-git/humanoid_planner_2d/CMakeLists.txt
+++ /dev/null
@@ -1,35 +0,0 @@
-cmake_minimum_required(VERSION 2.8.3)
-project(humanoid_planner_2d)
-
-find_package(catkin REQUIRED geometry_msgs visualization_msgs gridmap_2d roscpp)
-
-## CMake config:
-#find_package(sbpl REQUIRED)
-## pkg-config:
-find_package(PkgConfig REQUIRED)
-pkg_check_modules(SBPL REQUIRED sbpl)
-
-include_directories(${SBPL_INCLUDE_DIRS})
-# not needed for SBPL with CMake config
-link_directories(${SBPL_LIBRARY_DIRS})
-
-catkin_package(
-  INCLUDE_DIRS include
-  LIBRARIES ${PROJECT_NAME}
-  DEPENDS sbpl  
-)
-
-include_directories(include ${catkin_INCLUDE_DIRS})
-
-add_library(${PROJECT_NAME} src/SBPLPlanner2D.cpp)
-target_link_libraries(${PROJECT_NAME} ${SBPL_LIBRARIES} ${catkin_LIBRARIES})
-add_executable(sbpl_2d_planner_node src/humanoid_planner_2d.cpp)
-target_link_libraries(sbpl_2d_planner_node ${PROJECT_NAME} ${catkin_LIBRARIES})
-
-# install
-install(TARGETS ${PROJECT_NAME}
-        DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
-)
-install(TARGETS sbpl_2d_planner_node
-        DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
-)
diff --git a/humanoid_navigation-for-git/humanoid_planner_2d/include/humanoid_planner_2d/SBPLPlanner2D.h b/humanoid_navigation-for-git/humanoid_planner_2d/include/humanoid_planner_2d/SBPLPlanner2D.h
deleted file mode 100644
index 00e5279..0000000
--- a/humanoid_navigation-for-git/humanoid_planner_2d/include/humanoid_planner_2d/SBPLPlanner2D.h
+++ /dev/null
@@ -1,106 +0,0 @@
-/*
- * Copyright 2013 Armin Hornung, University of Freiburg
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- *
- *     * Redistributions of source code must retain the above copyright
- *       notice, this list of conditions and the following disclaimer.
- *     * Redistributions in binary form must reproduce the above copyright
- *       notice, this list of conditions and the following disclaimer in the
- *       documentation and/or other materials provided with the distribution.
- *     * Neither the name of the University of Freiburg nor the names of its
- *       contributors may be used to endorse or promote products derived from
- *       this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
- * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
- * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
- * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- */
-
-#ifndef HUMANOID_PLANNER_2D_SBPL_2D_PLANNER_
-#define HUMANOID_PLANNER_2D_SBPL_2D_PLANNER_
-
-#include <ros/ros.h>
-#include <geometry_msgs/PoseStamped.h>
-#include <geometry_msgs/PoseWithCovarianceStamped.h>
-#include <sbpl/headers.h>
-#include <visualization_msgs/Marker.h>
-#include <nav_msgs/Path.h>
-#include <gridmap_2d/GridMap2D.h>
-
-
-class SBPLPlanner2D {
-public:
-  SBPLPlanner2D();
-  virtual ~SBPLPlanner2D();
-  /// Set goal and plan when start was already set
-  void goalCallback(const geometry_msgs::PoseStampedConstPtr& goal);
-  /// Set start and plan when goal was already set
-  void startCallback(const geometry_msgs::PoseWithCovarianceStampedConstPtr& start);
-  /// calls updateMap()
-  void mapCallback(const nav_msgs::OccupancyGridConstPtr& occupancy_map);
-  /// Setup the internal map representation and initialize the SBPL planning environment
-  bool updateMap(gridmap_2d::GridMap2DPtr map);
-
-  gridmap_2d::GridMap2DPtr getMap() const { return map_;};
-
-  /**
-   * @brief Plans from start to goal, assuming that the map was set with updateMap().
-   * When successful, you can retrieve the path with getPath().
-   *
-   * @param start
-   * @param goal
-   * @return success of planning
-   */
-  bool plan(const geometry_msgs::Pose& start, const geometry_msgs::Pose& goal);
-
-  /**
-   * @brief Plans from start to goal, assuming that the map was set with updateMap().
-   * When successful, you can retrieve the path with getPath().
-   *
-   * @return success of planning
-   */
-  bool plan(double startX, double startY, double goalX, double goalY);
-
-  /// @return costs of the path (=length in m), if planning was successful
-  inline double getPathCosts() const{return path_costs_;};
-
-  inline const nav_msgs::Path& getPath() const{return path_;};
-  inline double getRobotRadius() const{return robot_radius_;};
-
-protected:
-  bool plan();
-  void setPlanner(); ///< (re)sets the planner
-  ros::NodeHandle nh_;
-  ros::Subscriber goal_sub_, start_sub_, map_sub_;
-  ros::Publisher path_pub_;
-  boost::shared_ptr<SBPLPlanner> planner_;
-  boost::shared_ptr<EnvironmentNAV2D> planner_environment_;
-  gridmap_2d::GridMap2DPtr map_;
-
-  std::string planner_type_;
-  double allocated_time_;
-  double initial_epsilon_;
-  bool search_until_first_solution_;
-  bool forward_search_;
-  double robot_radius_;
-
-  bool start_received_, goal_received_;
-  geometry_msgs::Pose start_pose_, goal_pose_;
-  nav_msgs::Path path_;
-  double path_costs_;
-  
-  static const unsigned char OBSTACLE_COST = 20;
-
-};
-
-#endif
diff --git a/humanoid_navigation-for-git/humanoid_planner_2d/package.xml b/humanoid_navigation-for-git/humanoid_planner_2d/package.xml
deleted file mode 100644
index 89d9106..0000000
--- a/humanoid_navigation-for-git/humanoid_planner_2d/package.xml
+++ /dev/null
@@ -1,30 +0,0 @@
-<package>
-  <name>humanoid_planner_2d</name>
-  <version>0.4.1</version>
-
-  <description>
-
-     humanoid_planner_2d - provides a simple 2D path planner as wrapper around
-     SBPL (ARA*, AD*, R*).
-
-  </description>
-  <maintainer email="HornungA@informatik.uni-freiburg.de">Armin Hornung</maintainer>
-  <maintainer email="aravindadp@gmail.com">Pramuditha Aravinda</maintainer>
-  <author>Armin Hornung</author>
-  <license>BSD</license>
-  <url>http://ros.org/wiki/humanoid_planner_2d</url>
-
-  <build_depend>geometry_msgs</build_depend>
-  <build_depend>gridmap_2d</build_depend>
-  <build_depend>roscpp</build_depend>
-  <build_depend>sbpl</build_depend>
-  <build_depend>visualization_msgs</build_depend>
-
-  <run_depend>geometry_msgs</run_depend>
-  <run_depend>gridmap_2d</run_depend>
-  <run_depend>roscpp</run_depend>
-  <run_depend>sbpl</run_depend>
-  <run_depend>visualization_msgs</run_depend>
-
-  <buildtool_depend>catkin</buildtool_depend>
-</package>
diff --git a/humanoid_navigation-for-git/humanoid_planner_2d/src/SBPLPlanner2D.cpp b/humanoid_navigation-for-git/humanoid_planner_2d/src/SBPLPlanner2D.cpp
deleted file mode 100644
index 1cf17a4..0000000
--- a/humanoid_navigation-for-git/humanoid_planner_2d/src/SBPLPlanner2D.cpp
+++ /dev/null
@@ -1,233 +0,0 @@
-/*
- * Copyright 2013 Armin Hornung, University of Freiburg
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- *
- *     * Redistributions of source code must retain the above copyright
- *       notice, this list of conditions and the following disclaimer.
- *     * Redistributions in binary form must reproduce the above copyright
- *       notice, this list of conditions and the following disclaimer in the
- *       documentation and/or other materials provided with the distribution.
- *     * Neither the name of the University of Freiburg nor the names of its
- *       contributors may be used to endorse or promote products derived from
- *       this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
- * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
- * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
- * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- */
-
-#include "humanoid_planner_2d/SBPLPlanner2D.h"
-
-SBPLPlanner2D::SBPLPlanner2D()
-  : nh_(),
-  robot_radius_(0.25),
-  start_received_(false), goal_received_(false),
-  path_costs_(0.0)
-{
-  
-  // private NodeHandle for parameters:
-  ros::NodeHandle nh_private("~");
-  nh_private.param("planner_type", planner_type_, std::string("ARAPlanner"));
-  nh_private.param("search_until_first_solution", search_until_first_solution_, false);
-  nh_private.param("allocated_time", allocated_time_, 7.0);
-  nh_private.param("forward_search", forward_search_, false);
-  nh_private.param("initial_epsilon", initial_epsilon_, 3.0);
-  nh_private.param("robot_radius", robot_radius_, robot_radius_);
-
-  path_pub_ = nh_.advertise<nav_msgs::Path>("path", 0);
-
-  // subscriptions in SBPLPlanner2DNode
-}
-
-SBPLPlanner2D::~SBPLPlanner2D() {
-
-}
-
-void SBPLPlanner2D::goalCallback(const geometry_msgs::PoseStampedConstPtr& goal_pose){
-  // set goal:
-  goal_pose_ = goal_pose->pose;
-  goal_received_ = true;
-  ROS_DEBUG("Received goal: %f %f", goal_pose_.position.x, goal_pose_.position.y);
-
-  if (goal_pose->header.frame_id != map_->getFrameID()){
-    ROS_WARN("Goal pose frame id \"%s\" different from map frame id \"%s\"", goal_pose->header.frame_id.c_str(), map_->getFrameID().c_str());
-  }
-  
-  // planning?
-  if (start_received_)
-    plan();
-}
-
-void SBPLPlanner2D::startCallback(const geometry_msgs::PoseWithCovarianceStampedConstPtr& start_pose){
-  // set start:
-  start_pose_ = start_pose->pose.pose;
-  start_received_ = true;
-  ROS_DEBUG("Received start: %f %f", start_pose_.position.x, start_pose_.position.y);
-
-  if (start_pose->header.frame_id != map_->getFrameID()){
-    ROS_WARN("Start pose frame id \"%s\" different from map frame id \"%s\"", start_pose->header.frame_id.c_str(), map_->getFrameID().c_str());
-  }
-  
-  // planning?
-  if (goal_received_)
-    plan();
-}
-
-bool SBPLPlanner2D::plan(const geometry_msgs::Pose& start, const geometry_msgs::Pose& goal){
-  start_pose_ = start;
-  goal_pose_ = goal;
-
-  start_received_ = true;
-  goal_received_ = true;
-
-  return plan();
-}
-
-bool SBPLPlanner2D::plan(double startX, double startY, double goalX, double goalY){
-  start_pose_.position.x = startX;
-  start_pose_.position.y = startY;
-
-  goal_pose_.position.x = goalX;
-  goal_pose_.position.y = goalY;
-
-  start_received_ = true;
-  goal_received_ = true;
-
-  return plan();
-}
-
-bool SBPLPlanner2D::plan(){
-  path_.poses.clear();
-
-  if (!map_){
-    ROS_ERROR("Map not set");
-    return false;
-  }
-
-  unsigned start_x, start_y, goal_x, goal_y;
-  if (!map_->worldToMap(start_pose_.position.x, start_pose_.position.y, start_x, start_y)){
-    ROS_ERROR("Start coordinates out of map bounds");
-    return false;
-  }
-  if (!map_->worldToMap(goal_pose_.position.x, goal_pose_.position.y, goal_x, goal_y)){
-    ROS_ERROR("Goal coordinates out of map bounds");
-    return false;
-  }
-
-  if (map_->isOccupiedAtCell(start_x, start_y)){
-    ROS_ERROR("Start coordinate (%f %f) is occupied in map", start_pose_.position.x, start_pose_.position.y);
-    return false;
-  }
-  if (map_->isOccupiedAtCell(goal_x, goal_y)){
-    ROS_ERROR("Goal coordinate (%f %f) is occupied in map", goal_pose_.position.x, goal_pose_.position.y);
-    return false;
-  }
-
-  int start_id = planner_environment_->SetStart(start_x, start_y);
-  int goal_id = planner_environment_->SetGoal(goal_x, goal_y);
-
-  if (start_id < 0 || planner_->set_start(start_id) == 0){
-    ROS_ERROR("Failed to set start state");
-    return false;
-  }
-
-  if (goal_id < 0 || planner_->set_goal(goal_id) == 0){
-    ROS_ERROR("Failed to set goal state");
-    return false;
-  }
-
-  // set planner params:
-  planner_->set_initialsolution_eps(initial_epsilon_);
-  planner_->set_search_mode(search_until_first_solution_);
-  std::vector<int> solution_stateIDs;
-  int solution_cost;
-
-
-  if(planner_->replan(allocated_time_, &solution_stateIDs, &solution_cost))
-    ROS_DEBUG("Solution found. Costs: %d;  final eps: %f", solution_cost, planner_->get_final_epsilon());
-  else{
-    ROS_INFO("Solution not found");
-    return false;
-  }
-
-  // scale costs (SBPL uses mm and does not know map res)
-  path_costs_ = double(solution_cost) / ENVNAV2D_COSTMULT * map_->getResolution();
-
-  // extract / publish path:
-  path_.poses.reserve(solution_stateIDs.size());
-  path_.header.frame_id = map_->getFrameID();
-  path_.header.stamp = ros::Time::now();
-
-  geometry_msgs::PoseStamped pose;
-  pose.header = path_.header;
-  for (size_t i = 0; i < solution_stateIDs.size(); i++) {
-    int mx, my;
-    planner_environment_->GetCoordFromState(solution_stateIDs[i], mx, my);
-    //ROS_INFO("p: %d - [%d %d]", solution_stateIDs[i], mx, my);
-    double wx,wy;
-    map_->mapToWorld(mx,my,wx,wy);
-
-
-    pose.pose.position.x = wx;
-    pose.pose.position.y = wy;
-    pose.pose.position.z = 0.0;
-    path_.poses.push_back(pose);
-  }
-
-  path_pub_.publish(path_);
-
-  return true;
-}
-
-void SBPLPlanner2D::mapCallback(const nav_msgs::OccupancyGridConstPtr& occupancy_map){
-  gridmap_2d::GridMap2DPtr map(new gridmap_2d::GridMap2D(occupancy_map));
-  updateMap(map);
-}
-
-bool SBPLPlanner2D::updateMap(gridmap_2d::GridMap2DPtr map){
-  planner_environment_.reset(new EnvironmentNAV2D());
-  planner_environment_->InitializeEnv(int(map->getInfo().width), int(map->getInfo().height), 0, OBSTACLE_COST);
-  // environment is set up, reset planner:
-  setPlanner();
-
-  // store local copy:
-  map_.reset(new gridmap_2d::GridMap2D(*map));
-  map_->inflateMap(robot_radius_);
-
-
-  for(unsigned int j = 0; j < map_->getInfo().height; ++j){
-    for(unsigned int i = 0; i < map_->getInfo().width; ++i){
-      if (map_->isOccupiedAtCell(i,j))
-        planner_environment_->UpdateCost(i, j, OBSTACLE_COST);
-      else
-        planner_environment_->UpdateCost(i,j,0);
-
-    }
-  }
-
-  ROS_DEBUG("Map set");
-
-  return true;
-}
-
-void SBPLPlanner2D::setPlanner(){
-  if (planner_type_ == "ARAPlanner"){
-    planner_.reset(new ARAPlanner(planner_environment_.get(),forward_search_));
-  } else if (planner_type_ == "ADPlanner"){
-    planner_.reset(new ADPlanner(planner_environment_.get(),forward_search_));
-  } else if (planner_type_ == "RSTARPlanner"){
-    planner_.reset(new RSTARPlanner(planner_environment_.get(),forward_search_));
-  }
-}
-
-
diff --git a/humanoid_navigation-for-git/humanoid_planner_2d/src/humanoid_planner_2d.cpp b/humanoid_navigation-for-git/humanoid_planner_2d/src/humanoid_planner_2d.cpp
deleted file mode 100644
index 9b438c5..0000000
--- a/humanoid_navigation-for-git/humanoid_planner_2d/src/humanoid_planner_2d.cpp
+++ /dev/null
@@ -1,60 +0,0 @@
-/*
- * Copyright 2013 Armin Hornung, University of Freiburg
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- *
- *     * Redistributions of source code must retain the above copyright
- *       notice, this list of conditions and the following disclaimer.
- *     * Redistributions in binary form must reproduce the above copyright
- *       notice, this list of conditions and the following disclaimer in the
- *       documentation and/or other materials provided with the distribution.
- *     * Neither the name of the University of Freiburg nor the names of its
- *       contributors may be used to endorse or promote products derived from
- *       this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
- * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
- * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
- * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- */
-
-#include <ros/ros.h>
-#include <humanoid_planner_2d/SBPLPlanner2D.h>
-
-class SBPLPlanner2DNode{
-public:
-  SBPLPlanner2DNode(){
-    ros::NodeHandle nh;
-
-    map_sub_ = nh.subscribe<nav_msgs::OccupancyGrid>("map", 1, &SBPLPlanner2D::mapCallback, &planner_);
-    goal_sub_ = nh.subscribe<geometry_msgs::PoseStamped>("goal", 1, &SBPLPlanner2D::goalCallback, &planner_);
-    start_sub_ = nh.subscribe<geometry_msgs::PoseWithCovarianceStamped>("initialpose", 1, &SBPLPlanner2D::startCallback, &planner_);
-
-  }
-
-  virtual ~SBPLPlanner2DNode(){}
-
-protected:
-  SBPLPlanner2D planner_;
-  ros::Subscriber map_sub_, goal_sub_, start_sub_;
-
-
-};
-
-int main(int argc, char** argv){
-  ros::init(argc, argv, "humanoid_planner_2d");
-
-  SBPLPlanner2DNode planner;
-
-  ros::spin();
-
-  return 0;
-}
diff --git a/self_balancing_robot b/self_balancing_robot
--- a/self_balancing_robot
+++ b/self_balancing_robot
@@ -1 +1 @@
-Subproject commit 98a394edadfad2c7363f6c20e98c8bb03c862387
+Subproject commit 98a394edadfad2c7363f6c20e98c8bb03c862387-dirty
